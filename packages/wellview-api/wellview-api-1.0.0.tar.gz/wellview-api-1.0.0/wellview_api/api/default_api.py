# coding: utf-8

"""
    WellViewAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wellview_api.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_wvtables(self, uri, **kwargs):  # noqa: E501
        """Get WellView table dtata e.g. JobReportTimeLogs  # noqa: E501

        Get WellView table dtata e.g. JobReportTimeLogs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wvtables(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: (required) - uri path of wellview api
        :param str select: Limits the properties returned in the result.
        :param str expand: Indicates the related entities to be represented inline. The maximum depth is 5.
        :param str skip: Skips the first n results.
        :param str top: Returns the first n results.
        :param str filter: Filters the results using oData Notation.
        :param str search: Searches the results using oData Notation.
        :param str orderby: Orders the results by the fields listed.
        :param str count: Returns the Count in the results. Useful for pagination.
        :return: WVTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wvtables_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wvtables_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def get_wvtables_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get WellView table dtata e.g. JobReportTimeLogs  # noqa: E501

        Get WellView table dtata e.g. JobReportTimeLogs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wvtables_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: (required) - uri path of wellview api
        :param str select: Limits the properties returned in the result.
        :param str expand: Indicates the related entities to be represented inline. The maximum depth is 5.
        :param str skip: Skips the first n results.
        :param str top: Returns the first n results.
        :param str filter: Filters the results using oData Notation.
        :param str search: Searches the results using oData Notation.
        :param str orderby: Orders the results by the fields listed.
        :param str count: Returns the Count in the results. Useful for pagination.
        :return: WVTable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['select', 'expand', 'skip', 'top', 'filter', 'search', 'orderby', 'count']  # noqa: E501
        all_params.append('uri')
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wvtables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `wvtables`")  # noqa: E501

        #'/v1/JobReportTimeLogs'
        resource_path =  params['uri']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'search' in params:
            query_params.append(('$search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'count' in params:
            query_params.append(('$count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            f"{resource_path}", 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WVTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wvtables_idwell_idrec(self, uri, id_well, id_rec, **kwargs):  # noqa: E501
        """Get WellView table dtata e.g. JobReportTimeLogs({idWell},{idRec})  # noqa: E501

        Get WellView table dtata e.g. JobReportTimeLogs({idWell},{idRec})  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wvtables_idwell_idrec(id_well, id_rec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: (required) - uri path of wellview api
        :param str id_well: (required)
        :param str id_rec: (required)
        :param str select: Limits the properties returned in the result.
        :param str expand: Indicates the related entities to be represented inline. The maximum depth is 5.
        :param str skip: Skips the first n results.
        :param str top: Returns the first n results.
        :param str filter: Filters the results using oData Notation.
        :param str search: Searches the results using oData Notation.
        :param str orderby: Orders the results by the fields listed.
        :param str count: Returns the Count in the results. Useful for pagination.
        :return: WVTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wvtables_idwell_idrec_with_http_info(uri, id_well, id_rec, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wvtables_idwell_idrec_with_http_info(uri, id_well, id_rec, **kwargs)  # noqa: E501
            return data

    def get_wvtables_idwell_idrec_with_http_info(self, uri, id_well, id_rec, **kwargs):  # noqa: E501
        """Get WellView table dtata e.g. JobReportTimeLogs({idWell},{idRec})  # noqa: E501

        Get WellView table dtata e.g. JobReportTimeLogs({idWell},{idRec})  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wvtables_idwell_idrec_with_http_info(id_well, id_rec, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: (required) - uri path of wellview api
        :param str id_well: (required)
        :param str id_rec: (required)
        :param str select: Limits the properties returned in the result.
        :param str expand: Indicates the related entities to be represented inline. The maximum depth is 5.
        :param str skip: Skips the first n results.
        :param str top: Returns the first n results.
        :param str filter: Filters the results using oData Notation.
        :param str search: Searches the results using oData Notation.
        :param str orderby: Orders the results by the fields listed.
        :param str count: Returns the Count in the results. Useful for pagination.
        :return: WVTable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_well', 'id_rec', 'select', 'expand', 'skip', 'top', 'filter', 'search', 'orderby', 'count']  # noqa: E501
        all_params.append('uri')
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wvtables_idwell_idrec" % key
                )
            params[key] = val
        del params['kwargs']
        
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_wvtables_idwell_idrec`")  # noqa: E501

        #/v1/JobReportTimeLogs({idWell},{idRec})
        resource_path =  params['uri']

        # verify the required parameter 'id_well' is set
        if ('id_well' not in params or
                params['id_well'] is None):
            raise ValueError("Missing the required parameter `id_well` when calling `get_wvtables_idwell_idrec`")  # noqa: E501
        # verify the required parameter 'id_rec' is set
        if ('id_rec' not in params or
                params['id_rec'] is None):
            raise ValueError("Missing the required parameter `id_rec` when calling `get_wvtables_idwell_idrec`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        idWell = ""
        if 'id_well' in params:
            #path_params['idWell'] = params['id_well']  # noqa: E501
            idWell = params['id_well']

        idRec = ""
        if 'id_rec' in params:
            #path_params['idRec'] = params['id_rec']  # noqa: E501
            idRec = params['id_rec']

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'search' in params:
            query_params.append(('$search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'count' in params:
            query_params.append(('$count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            f"{resource_path}('{idWell}','{idRec}')", 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WVTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
