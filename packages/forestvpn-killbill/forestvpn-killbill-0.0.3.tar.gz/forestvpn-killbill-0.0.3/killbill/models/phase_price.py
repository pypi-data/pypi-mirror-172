# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 0.22.30
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhasePrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_name': 'str',
        'phase_name': 'str',
        'phase_type': 'str',
        'fixed_price': 'float',
        'recurring_price': 'float',
        'usage_prices': 'list[UsagePrice]'
    }

    attribute_map = {
        'plan_name': 'planName',
        'phase_name': 'phaseName',
        'phase_type': 'phaseType',
        'fixed_price': 'fixedPrice',
        'recurring_price': 'recurringPrice',
        'usage_prices': 'usagePrices'
    }

    def __init__(self, plan_name=None, phase_name=None, phase_type=None, fixed_price=None, recurring_price=None, usage_prices=None):  # noqa: E501
        """PhasePrice - a model defined in Swagger"""  # noqa: E501
        self._plan_name = None
        self._phase_name = None
        self._phase_type = None
        self._fixed_price = None
        self._recurring_price = None
        self._usage_prices = None
        self.discriminator = None
        if plan_name is not None:
            self.plan_name = plan_name
        if phase_name is not None:
            self.phase_name = phase_name
        if phase_type is not None:
            self.phase_type = phase_type
        if fixed_price is not None:
            self.fixed_price = fixed_price
        if recurring_price is not None:
            self.recurring_price = recurring_price
        if usage_prices is not None:
            self.usage_prices = usage_prices

    @property
    def plan_name(self):
        """Gets the plan_name of this PhasePrice.  # noqa: E501


        :return: The plan_name of this PhasePrice.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this PhasePrice.


        :param plan_name: The plan_name of this PhasePrice.  # noqa: E501
        :type: str
        """

        self._plan_name = plan_name

    @property
    def phase_name(self):
        """Gets the phase_name of this PhasePrice.  # noqa: E501


        :return: The phase_name of this PhasePrice.  # noqa: E501
        :rtype: str
        """
        return self._phase_name

    @phase_name.setter
    def phase_name(self, phase_name):
        """Sets the phase_name of this PhasePrice.


        :param phase_name: The phase_name of this PhasePrice.  # noqa: E501
        :type: str
        """

        self._phase_name = phase_name

    @property
    def phase_type(self):
        """Gets the phase_type of this PhasePrice.  # noqa: E501


        :return: The phase_type of this PhasePrice.  # noqa: E501
        :rtype: str
        """
        return self._phase_type

    @phase_type.setter
    def phase_type(self, phase_type):
        """Sets the phase_type of this PhasePrice.


        :param phase_type: The phase_type of this PhasePrice.  # noqa: E501
        :type: str
        """

        self._phase_type = phase_type

    @property
    def fixed_price(self):
        """Gets the fixed_price of this PhasePrice.  # noqa: E501


        :return: The fixed_price of this PhasePrice.  # noqa: E501
        :rtype: float
        """
        return self._fixed_price

    @fixed_price.setter
    def fixed_price(self, fixed_price):
        """Sets the fixed_price of this PhasePrice.


        :param fixed_price: The fixed_price of this PhasePrice.  # noqa: E501
        :type: float
        """

        self._fixed_price = fixed_price

    @property
    def recurring_price(self):
        """Gets the recurring_price of this PhasePrice.  # noqa: E501


        :return: The recurring_price of this PhasePrice.  # noqa: E501
        :rtype: float
        """
        return self._recurring_price

    @recurring_price.setter
    def recurring_price(self, recurring_price):
        """Sets the recurring_price of this PhasePrice.


        :param recurring_price: The recurring_price of this PhasePrice.  # noqa: E501
        :type: float
        """

        self._recurring_price = recurring_price

    @property
    def usage_prices(self):
        """Gets the usage_prices of this PhasePrice.  # noqa: E501


        :return: The usage_prices of this PhasePrice.  # noqa: E501
        :rtype: list[UsagePrice]
        """
        return self._usage_prices

    @usage_prices.setter
    def usage_prices(self, usage_prices):
        """Sets the usage_prices of this PhasePrice.


        :param usage_prices: The usage_prices of this PhasePrice.  # noqa: E501
        :type: list[UsagePrice]
        """

        self._usage_prices = usage_prices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhasePrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhasePrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
