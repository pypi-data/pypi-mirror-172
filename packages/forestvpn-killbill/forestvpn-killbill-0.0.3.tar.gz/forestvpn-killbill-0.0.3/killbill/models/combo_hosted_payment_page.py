# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 0.22.30
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComboHostedPaymentPage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'Account',
        'payment_method': 'PaymentMethod',
        'hosted_payment_page_fields': 'HostedPaymentPageFields',
        'payment_method_plugin_properties': 'list[PluginProperty]',
        'audit_logs': 'list[AuditLog]'
    }

    attribute_map = {
        'account': 'account',
        'payment_method': 'paymentMethod',
        'hosted_payment_page_fields': 'hostedPaymentPageFields',
        'payment_method_plugin_properties': 'paymentMethodPluginProperties',
        'audit_logs': 'auditLogs'
    }

    def __init__(self, account=None, payment_method=None, hosted_payment_page_fields=None, payment_method_plugin_properties=None, audit_logs=None):  # noqa: E501
        """ComboHostedPaymentPage - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._payment_method = None
        self._hosted_payment_page_fields = None
        self._payment_method_plugin_properties = None
        self._audit_logs = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if payment_method is not None:
            self.payment_method = payment_method
        if hosted_payment_page_fields is not None:
            self.hosted_payment_page_fields = hosted_payment_page_fields
        if payment_method_plugin_properties is not None:
            self.payment_method_plugin_properties = payment_method_plugin_properties
        if audit_logs is not None:
            self.audit_logs = audit_logs

    @property
    def account(self):
        """Gets the account of this ComboHostedPaymentPage.  # noqa: E501


        :return: The account of this ComboHostedPaymentPage.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ComboHostedPaymentPage.


        :param account: The account of this ComboHostedPaymentPage.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def payment_method(self):
        """Gets the payment_method of this ComboHostedPaymentPage.  # noqa: E501


        :return: The payment_method of this ComboHostedPaymentPage.  # noqa: E501
        :rtype: PaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ComboHostedPaymentPage.


        :param payment_method: The payment_method of this ComboHostedPaymentPage.  # noqa: E501
        :type: PaymentMethod
        """

        self._payment_method = payment_method

    @property
    def hosted_payment_page_fields(self):
        """Gets the hosted_payment_page_fields of this ComboHostedPaymentPage.  # noqa: E501


        :return: The hosted_payment_page_fields of this ComboHostedPaymentPage.  # noqa: E501
        :rtype: HostedPaymentPageFields
        """
        return self._hosted_payment_page_fields

    @hosted_payment_page_fields.setter
    def hosted_payment_page_fields(self, hosted_payment_page_fields):
        """Sets the hosted_payment_page_fields of this ComboHostedPaymentPage.


        :param hosted_payment_page_fields: The hosted_payment_page_fields of this ComboHostedPaymentPage.  # noqa: E501
        :type: HostedPaymentPageFields
        """

        self._hosted_payment_page_fields = hosted_payment_page_fields

    @property
    def payment_method_plugin_properties(self):
        """Gets the payment_method_plugin_properties of this ComboHostedPaymentPage.  # noqa: E501


        :return: The payment_method_plugin_properties of this ComboHostedPaymentPage.  # noqa: E501
        :rtype: list[PluginProperty]
        """
        return self._payment_method_plugin_properties

    @payment_method_plugin_properties.setter
    def payment_method_plugin_properties(self, payment_method_plugin_properties):
        """Sets the payment_method_plugin_properties of this ComboHostedPaymentPage.


        :param payment_method_plugin_properties: The payment_method_plugin_properties of this ComboHostedPaymentPage.  # noqa: E501
        :type: list[PluginProperty]
        """

        self._payment_method_plugin_properties = payment_method_plugin_properties

    @property
    def audit_logs(self):
        """Gets the audit_logs of this ComboHostedPaymentPage.  # noqa: E501


        :return: The audit_logs of this ComboHostedPaymentPage.  # noqa: E501
        :rtype: list[AuditLog]
        """
        return self._audit_logs

    @audit_logs.setter
    def audit_logs(self, audit_logs):
        """Sets the audit_logs of this ComboHostedPaymentPage.


        :param audit_logs: The audit_logs of this ComboHostedPaymentPage.  # noqa: E501
        :type: list[AuditLog]
        """

        self._audit_logs = audit_logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComboHostedPaymentPage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComboHostedPaymentPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
