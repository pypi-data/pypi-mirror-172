# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 0.22.30
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentMethodPluginDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_payment_method_id': 'str',
        'is_default_payment_method': 'bool',
        'properties': 'list[PluginProperty]'
    }

    attribute_map = {
        'external_payment_method_id': 'externalPaymentMethodId',
        'is_default_payment_method': 'isDefaultPaymentMethod',
        'properties': 'properties'
    }

    def __init__(self, external_payment_method_id=None, is_default_payment_method=None, properties=None):  # noqa: E501
        """PaymentMethodPluginDetail - a model defined in Swagger"""  # noqa: E501
        self._external_payment_method_id = None
        self._is_default_payment_method = None
        self._properties = None
        self.discriminator = None
        if external_payment_method_id is not None:
            self.external_payment_method_id = external_payment_method_id
        if is_default_payment_method is not None:
            self.is_default_payment_method = is_default_payment_method
        if properties is not None:
            self.properties = properties

    @property
    def external_payment_method_id(self):
        """Gets the external_payment_method_id of this PaymentMethodPluginDetail.  # noqa: E501


        :return: The external_payment_method_id of this PaymentMethodPluginDetail.  # noqa: E501
        :rtype: str
        """
        return self._external_payment_method_id

    @external_payment_method_id.setter
    def external_payment_method_id(self, external_payment_method_id):
        """Sets the external_payment_method_id of this PaymentMethodPluginDetail.


        :param external_payment_method_id: The external_payment_method_id of this PaymentMethodPluginDetail.  # noqa: E501
        :type: str
        """

        self._external_payment_method_id = external_payment_method_id

    @property
    def is_default_payment_method(self):
        """Gets the is_default_payment_method of this PaymentMethodPluginDetail.  # noqa: E501


        :return: The is_default_payment_method of this PaymentMethodPluginDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_default_payment_method

    @is_default_payment_method.setter
    def is_default_payment_method(self, is_default_payment_method):
        """Sets the is_default_payment_method of this PaymentMethodPluginDetail.


        :param is_default_payment_method: The is_default_payment_method of this PaymentMethodPluginDetail.  # noqa: E501
        :type: bool
        """

        self._is_default_payment_method = is_default_payment_method

    @property
    def properties(self):
        """Gets the properties of this PaymentMethodPluginDetail.  # noqa: E501


        :return: The properties of this PaymentMethodPluginDetail.  # noqa: E501
        :rtype: list[PluginProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PaymentMethodPluginDetail.


        :param properties: The properties of this PaymentMethodPluginDetail.  # noqa: E501
        :type: list[PluginProperty]
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentMethodPluginDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodPluginDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
