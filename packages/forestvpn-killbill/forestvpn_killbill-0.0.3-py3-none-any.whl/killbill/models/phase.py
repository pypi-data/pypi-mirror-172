# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 0.22.30
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Phase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'prices': 'list[Price]',
        'fixed_prices': 'list[Price]',
        'duration': 'Duration',
        'usages': 'list[Usage]'
    }

    attribute_map = {
        'type': 'type',
        'prices': 'prices',
        'fixed_prices': 'fixedPrices',
        'duration': 'duration',
        'usages': 'usages'
    }

    def __init__(self, type=None, prices=None, fixed_prices=None, duration=None, usages=None):  # noqa: E501
        """Phase - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._prices = None
        self._fixed_prices = None
        self._duration = None
        self._usages = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if prices is not None:
            self.prices = prices
        if fixed_prices is not None:
            self.fixed_prices = fixed_prices
        if duration is not None:
            self.duration = duration
        if usages is not None:
            self.usages = usages

    @property
    def type(self):
        """Gets the type of this Phase.  # noqa: E501


        :return: The type of this Phase.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Phase.


        :param type: The type of this Phase.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def prices(self):
        """Gets the prices of this Phase.  # noqa: E501


        :return: The prices of this Phase.  # noqa: E501
        :rtype: list[Price]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this Phase.


        :param prices: The prices of this Phase.  # noqa: E501
        :type: list[Price]
        """

        self._prices = prices

    @property
    def fixed_prices(self):
        """Gets the fixed_prices of this Phase.  # noqa: E501


        :return: The fixed_prices of this Phase.  # noqa: E501
        :rtype: list[Price]
        """
        return self._fixed_prices

    @fixed_prices.setter
    def fixed_prices(self, fixed_prices):
        """Sets the fixed_prices of this Phase.


        :param fixed_prices: The fixed_prices of this Phase.  # noqa: E501
        :type: list[Price]
        """

        self._fixed_prices = fixed_prices

    @property
    def duration(self):
        """Gets the duration of this Phase.  # noqa: E501


        :return: The duration of this Phase.  # noqa: E501
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Phase.


        :param duration: The duration of this Phase.  # noqa: E501
        :type: Duration
        """

        self._duration = duration

    @property
    def usages(self):
        """Gets the usages of this Phase.  # noqa: E501


        :return: The usages of this Phase.  # noqa: E501
        :rtype: list[Usage]
        """
        return self._usages

    @usages.setter
    def usages(self, usages):
        """Sets the usages of this Phase.


        :param usages: The usages of this Phase.  # noqa: E501
        :type: list[Usage]
        """

        self._usages = usages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Phase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Phase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
