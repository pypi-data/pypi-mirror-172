# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 0.22.30
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'start_date': 'datetime',
        'last_access_date': 'datetime',
        'timeout': 'int',
        'host': 'str'
    }

    attribute_map = {
        'id': 'id',
        'start_date': 'startDate',
        'last_access_date': 'lastAccessDate',
        'timeout': 'timeout',
        'host': 'host'
    }

    def __init__(self, id=None, start_date=None, last_access_date=None, timeout=None, host=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._start_date = None
        self._last_access_date = None
        self._timeout = None
        self._host = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if start_date is not None:
            self.start_date = start_date
        if last_access_date is not None:
            self.last_access_date = last_access_date
        if timeout is not None:
            self.timeout = timeout
        if host is not None:
            self.host = host

    @property
    def id(self):
        """Gets the id of this Session.  # noqa: E501


        :return: The id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Session.


        :param id: The id of this Session.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def start_date(self):
        """Gets the start_date of this Session.  # noqa: E501


        :return: The start_date of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Session.


        :param start_date: The start_date of this Session.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def last_access_date(self):
        """Gets the last_access_date of this Session.  # noqa: E501


        :return: The last_access_date of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access_date

    @last_access_date.setter
    def last_access_date(self, last_access_date):
        """Sets the last_access_date of this Session.


        :param last_access_date: The last_access_date of this Session.  # noqa: E501
        :type: datetime
        """

        self._last_access_date = last_access_date

    @property
    def timeout(self):
        """Gets the timeout of this Session.  # noqa: E501


        :return: The timeout of this Session.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Session.


        :param timeout: The timeout of this Session.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def host(self):
        """Gets the host of this Session.  # noqa: E501


        :return: The host of this Session.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Session.


        :param host: The host of this Session.  # noqa: E501
        :type: str
        """

        self._host = host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Session, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
