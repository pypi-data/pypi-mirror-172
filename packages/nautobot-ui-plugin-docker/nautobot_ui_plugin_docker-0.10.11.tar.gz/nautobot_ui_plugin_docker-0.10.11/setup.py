# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['nautobot_ui_plugin_docker',
 'nautobot_ui_plugin_docker.api',
 'nautobot_ui_plugin_docker.migrations']

package_data = \
{'': ['*'],
 'nautobot_ui_plugin_docker': ['static/font-awesome-4.7.0/css/*',
                               'static/nautobot_ui_plugin_docker/*',
                               'static/nautobot_ui_plugin_docker/img/*',
                               'static/nautobot_ui_plugin_docker/jquery-ui-1.12.1/*',
                               'static/nautobot_ui_plugin_docker/jquery/*',
                               'static/nautobot_ui_plugin_docker/next_sources/*',
                               'static/nautobot_ui_plugin_docker/next_sources/css/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/assets/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/assets/css/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/assets/img/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/assets/js/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/assets/vendor/prettify/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/classes/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/files/*',
                               'static/nautobot_ui_plugin_docker/next_sources/doc/modules/*',
                               'static/nautobot_ui_plugin_docker/next_sources/fonts/*',
                               'static/nautobot_ui_plugin_docker/next_sources/js/*',
                               'templates/nautobot_ui_plugin_docker/*']}

install_requires = \
['nautobot>=1.2.0,<2.0.0']

setup_kwargs = {
    'name': 'nautobot-ui-plugin-docker',
    'version': '0.10.11',
    'description': 'Nautobot UI Plugin',
    'long_description': '# Nautobot UI Plugin\n\nA topology visualization plugin for [Nautobot](https://github.com/nautobot/nautobot) powered by [NextUI](https://developer.cisco.com/site/neXt/) Toolkit. Tested with Nautobot 1.1.5.\n\n# Installation\n\nGeneral installation steps and considerations follow the [official guidelines](https://netbox.readthedocs.io/en/stable/plugins/).\n\n### Package Installation from PyPi\n\nAssuming you use a Virtual Environment for Nautobot:\n```\n$ source /opt/netbox/venv/bin/activate\n(venv) $ pip3 install nautobot-ui-plugin\n```\n\n### Package Installation from Source Code\nThe source code is available on [GitHub](https://github.com/iDebugAll/nextbox-ui-plugin).<br/>\nDownload and install the package. Assuming you use a Virtual Environment for Nautobot:\n```\n$ git clone https://github.com/ocalaf-unitenic/nautobot-ui-plugin/nautobot-ui-plugin\n$ cd nautobot-ui-plugin\n$ source /opt/netbox/venv/bin/activate\n(venv) $ pip3 install .\n```\n\nTo ensure NextBox UI plugin is automatically re-installed during future upgrades, create a file named `local_requirements.txt` (if not already existing) in the NetBox root directory (alongside `requirements.txt`) and list the `nautobot-ui-plugin` package:\n\n```no-highlight\n# echo nautobot-ui-plugin >> local_requirements.txt\n```\n\n### Enable the Plugin\nIn a global Netbox **configuration.py** configuration file, update or add PLUGINS parameter:\n```python\nPLUGINS = [\n    \'nautobot_ui_plugin_docker\',\n]\n```\n\nOptionally, update a PLUGINS_CONFIG parameter in **configuration.py** to rewrite default plugin behavior:\n```python\n#PLUGINS_CONFIG = {\n#    \'nautobot_ui_plugin_docker\': {\n#        \'layers_sort_order\': (\n#            ADD YOUR SETTINGS HERE\n#            layer_sort_order is a tuple\n#        ),\n#        \'icon_model_map\': {\n#            ADD YOUR SETTINGS HERE\n#            icon_model_map is a dict\n#        },\n#        \'icon_role_map\': {\n#            ADD YOUR SETTINGS HERE\n#            icon_role_map is a dict\n#        }\n#        \'undisplayed_device_role_slugs\': (\n# #          ADD YOUR SETTINGS HERE\n#            undisplayed_device_role_slugs value is a list or a tuple\n#            Listed device role slugs are hidden on initial view load,\n#            you may then hide/display any layer with a control button.\n#        ),\n#        \'undisplayed_device_tags\': (\n#           ADD YOUR SETTINGS HERE\n#           undisplayed_device_tags value is a list or a tuple of regex strings.\n#           Devices with tags matching any of listed regular expressions are hidden\n#           on initial view load, you may then hide/display any layer with a control button.\n#        ),\n#        \'select_layers_list_include_device_tags\': (\n#           ADD YOUR SETTINGS HERE\n#           select_layers_list_include_device_tags value is a list or a tuple of regex strings.\n#           Use this parameter to control tags listed in Select Layers menu.\n#           If specified, it works as allow list.\n#        ),\n#        \'select_layers_list_exclude_device_tags\': (\n#           ADD YOUR SETTINGS HERE\n#           select_layers_list_exclude_device_tags value is a list or a tuple of regex strings.\n#           Use this parameter to control tags listed in Select Layers menu.\n#           If specified, it filters out matched tags from the list, except ones mathcing \'undisplayed_device_tags\'.\n#        ),\n#        \'DISPLAY_PASSIVE_DEVICES\': True|False,\n#        \'DISPLAY_LOGICAL_MULTICABLE_LINKS\': True|False,\n#        \'DISPLAY_UNCONNECTED\': True|False,\n#        \'INITIAL_LAYOUT\': \'vertical\'|\'horizontal\'|\'auto\'\n#    }\n#}\n```\nBy default, the Plugin orders devices on a visualized topology based their roles in Netbox device attributes.<br/> This order may be controlled by \'layers_sort_order\' parameter. Default sort order includes most commonly used naming conventions:\n```\n(\n    \'undefined\',\n    \'outside\',\n    \'border\',\n    \'edge\',\n    \'edge-switch\',\n    \'edge-router\',\n    \'core\',\n    \'core-router\',\n    \'core-switch\',\n    \'distribution\',\n    \'distribution-router\',\n    \'distribution-switch\',\n    \'leaf\',\n    \'spine\',\n    \'access\',\n    \'access-switch\',\n)\n```\n\nBy default, the Plugin automatically tries to identify the device icon type based on following logic:\n1. \'icon_{icon_type}\' tag in the Nautobot Device tags.\n   Assign a tag to the device to manually control the displayed icon type (e.g. \'icon_router\' or \'icon_switch\').\n   Supported icon types:\n```\n{\n    \'switch\',\n    \'router\',\n    \'firewall\',\n    \'wlc\',\n    \'unknown\',\n    \'server\',\n    \'phone\',\n    \'nexus5000\',\n    \'ipphone\',\n    \'host\',\n    \'camera\',\n    \'accesspoint\',\n    \'groups\',\n    \'groupm\',\n    \'groupl\',\n    \'cloud\',\n    \'unlinked\',\n    \'hostgroup\',\n    \'wirelesshost\',\n}\n```\n2. If no valid \'icon_{icon_type}\' tags found, the Plugin checks the default icon to device_type mapping. You can control this behavior with \'icon_model_map\' dict. The Plugin checks for substring in a full device_type attribute. Default mapping:\n\n```\n{\n    \'CSR1000V\': \'router\',\n    \'Nexus\': \'switch\',\n    \'IOSXRv\': \'router\',\n    \'IOSv\': \'switch\',\n    \'2901\': \'router\',\n    \'2911\': \'router\',\n    \'2921\': \'router\',\n    \'2951\': \'router\',\n    \'4321\': \'router\',\n    \'4331\': \'router\',\n    \'4351\': \'router\',\n    \'4421\': \'router\',\n    \'4431\': \'router\',\n    \'4451\': \'router\',\n    \'2960\': \'switch\',\n    \'3750\': \'switch\',\n    \'3850\': \'switch\',\n    \'ASA\': \'firewall\',\n}\n```\nKeys are searched substrings. Values should be valid icon types as listed above.<br/>\n\n3. If no match found on steps 1-2, the Plugin checks the Device Role slug to Icon mapping.<br/>\nThis mapping may be defined within \'icon_role_map\' dict in Plugin parameters.<br/>\nDefault mapping already contains some general categories:\n```\n{\n    \'border\': \'router\',\n    \'edge-switch\': \'switch\',\n    \'edge-router\': \'router\',\n    \'core-router\': \'router\',\n    \'core-switch\': \'switch\',\n    \'distribution\': \'switch\',\n    \'distribution-router\': \'router\',\n    \'distribution-switch\': \'switch\',\n    \'leaf\': \'switch\',\n    \'spine\': \'switch\',\n    \'access\': \'switch\',\n    \'access-switch\': \'switch\',\n}\n```\n\n4. Default value is \'unknown\' (renders as a question mark icon).\n<br/><br/>\n\nThe Plugin can control the visibility of the layers and/or specific nodes on the topology view.<br/>\nThe visibility control is currently implemented for specific device roles, device tags, unconnected devices, and passive devices:<br/>\n\n  - Initial visibility behavior for specific device roles is controlled by \'undisplayed_device_role_slugs\' plugin parameter. Listed device role slugs are hidden on initial view load, you may then hide/display any layer with a control button on the topology view page.<br/>\n\n  - Initial visibility behavior for specific device tags is controlled by \'undisplayed_device_tags\' plugin parameter. Devices with tags matching listed tag regular expressions are hidden on initial view load, you may then hide/display any layer with a control button on the topology view page.<br/>\n  By default, the plugin lists all discovered device tags in Select Layers menu. You can use \'select_layers_list_include_device_tags\' and \'select_layers_list_exclude_device_tags\' plugin parameters to filter the included tags.<br/>\n  All three tag visibility control parameters are optional lists of regular expressions. Tags matching \'undisplayed_device_tags\' are always listed in Select Layers menu. Empty or unset \'select_layers_list_include_device_tags\' allows all discovered tags to be listed in Select layers menu. If set, \'select_layers_list_include_device_tags\' works as an allow list for matched tags. \'select_layers_list_exclude_device_tags\' filters out matched tags from the list, excpept for ones matching \'undisplayed_device_tags\'.\n\n  - Initial visibility behavior for unconnected nodes is controlled by DISPLAY_UNCONNECTED boolean plugin parameter.<br/>\n  By default, unconnected nodes are being displayed. Set DISPLAY_UNCONNECTED to False to hide them on initial topology view load.<br/>\n  A separate \'Hide/Display Unconnected\' button may then be used to hide or display those nodes.\n\n  - Initial visibility for passive devices (patch panels, PDUs) is controlled by DISPLAY_PASSIVE_DEVICES boolean plugin parameter. A device is considered passive if it has cables connected to Front and Rear Ports only and not to Interfaces.<br/>Passive devices are hidden by default. You can display them with \'Display Passive Devices\' button on the topology view page. <br/>\n  Actual multi-cable connections between the end-devices a replaced by the direct logical connection once the passive devices are hidden. This logical direct link may be displayed regardless of the passive device visibility in addition to the cabling across patch panels if you set DISPLAY_LOGICAL_MULTICABLE_LINKS plugin parameter to True. DISPLAY_LOGICAL_MULTICABLE_LINKS is set to False by default. This parameter only affects the initial logical link visibility. With hidden passive devices, it is always being displayed.<br/>\n<br/>\n\nDevice layers are ordered automatically by default. You can control this behavior with INITIAL_LAYOUT plugin parameter. Valid options are \'vertical\', \'horizontal\', and \'auto\'.<br/>\n\'auto\' layout relies on NeXt UI dataprocessor best-effort algorithms. It spreads the Nodes across the view so they would be as distant from each other as possible. You may use it if the vertical and horizontal initial layout does not work properly in your browser (this is the issue to be fixed).\n\n\n\n### Collect Static Files\nThe Plugin contains static files for topology visualization. They should be served directly by the HTTP frontend. In order to collect them from the package to the Netbox static root directory use the following command:\n```\n(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py collectstatic\n```\n\n### Apply Database Migrations\n\n> For plugin version 0.8.0 and above.\n\nApply database migrations with Django `manage.py`:\n```\n(venv) $ python3 manage.py migrate\n```\n\n### Restart Netbox\nRestart the WSGI service to apply changes:\n```\nsudo systemctl restart netbox\n```\n\n# Installation with Docker\nThe Plugin may be installed in a Netbox Docker deployment. \nThe package contains a Dockerfile for [Netbox-Community Docker](https://github.com/netbox-community/netbox-docker) extension. Latest-LDAP version is used by default as a source.<br/>\nDownload the Plugin and build from the source:\n```\n$ git clone https://github.com/ocalaf-unitenic/nautobot-ui-plugin/\n$ cd nautobot-ui-plugin\n$ docker build -t netbox-custom .\n```\nUpdate a netbox image name in **docker-compose.yml** in a Netbox Community Docker project root:\n```yaml\nservices:\n  netbox: &netbox\n    image: netbox-custom:latest\n```\nUpdate a **configuration.py**. It is stored in netbox-docker/configuration/ by default. Update or add PLUGINS parameter and PLUGINS_CONFIG parameter as described above.\n\nRebuild the running docker containers:\n```\n$ cd nautobot-compose-docker\n$ docker-compose down\n$ docker-compose up -d\n```\nNautobot Community Docker setup performs static file collection and database migrations on every startup. No manual actions are required.\n\n# Fixing Common Installation and Post-Upgrade Issues\n\nIf you are experiencing some unexpected errors or visual behaviors after the installation or upgrade, please make sure that you execute the following steps first:\n\n1. Clear your browser cache and reload the page.\n2. Re-collect static files: `(venv) $ python3 manage.py collectstatic --clear`.\n3. Re-apply database migrations: `(venv) $ python3 manage.py migrate`.\n\n# Usage\n\nOnce installed and initialized, the Plugin runs on a backend.<br/>\nThe Plugin supports a topology visualization of arbitrary sets of Sites and Regions.<br/>\n<br/>\nYou can access Topology visualizations in different ways:\n1. By clicking a custom plugin Topology button on a Site page.\n![](samples/sample_topology_button.png)\nThe Site topology visualization will open in a pop-up window:\n![](samples/sample_topology_view.png)<br/>\nNodes are draggable and clickable:\n![](samples/sample_node_tooltip_content.png)<br/>\nYou can switch between vertical and horizontal layers sort order back and forth. Default is vertical.<br/>\n\n2. Using Plugins dropdown menu item: *Plugins -> NextBox UI -> Topology Viewer*.<br/>\nUse Search form controls to pick desired Sites, Regions, or Devices.<br/>\n![](samples/sample_topology_viewer_page01.png)\n<br/>\n\n### Visibility control\n\nYou can display or hide any specific device roles on the topology view with \'Select Layer\' button:\n![](samples/sample_layer_visibility.png)<br/>\nThe list of available device roles is generated automatically based on discovered devices for a visualized site.<br/>\n<br/>\n\'Display/Hide Unconnected\' button hides or displays the devices with no links attached.<br/>\n<br/>\n\'Display/Hide Passive Devices\' buttons hides or displays the passive devices (patch pannels, PDUs, etc).<br/>\n<br/>\nIn a samples below, edge-sw01 is connected with core-rtr01 and core-rtr02 through Patch Panel A and Patch Panel B with multiple cable hops:<br/>\n![](samples/sample_patch_panels.png)<br/>\nOnce you hide the passive devices (default state), a logical direct link shows up between the edge switch and the core routers:<br/>\n![](samples/sample_hide_passive.png)<br/>\nIf DISPLAY_LOGICAL_MULTICABLE_LINKS is set to True (default is False) this logical link is displayed initially:<br/>\n![](samples/sample_display_logical_link.png)\n\n### Required Netbox User Permissions\nThe Plugin requires the following user permissions to access the topology view:\n\n  - dcim | site   | Can read site\n  - dcim | device | Can view device\n  - dcim | cable  | Can view cable\n\n  ## Contributing\n\nPull requests are welcomed and automatically built and tested against multiple version of Python and multiple version of Nautobot through TravisCI.\n\nThe project is packaged with a light development environment based on `docker-compose` to help with the local development of the project and to run the tests within TravisCI.\n\nThe project is following Network to Code software development guideline and is leveraging:\n\n- Black, Pylint, Bandit and pydocstyle for Python linting and formatting.\n- Django unit test to ensure the plugin is working properly.\n\n### Development Environment\n\nThe development environment can be used in 2 ways. First, with a local poetry environment if you wish to develop outside of Docker. Second, inside of a docker container.\n\n#### Invoke tasks\n\nThe [PyInvoke](http://www.pyinvoke.org/) library is used to provide some helper commands based on the environment.  There are a few configuration parameters which can be passed to PyInvoke to override the default configuration:\n\n- `nautobot_ver`: the version of Nautobot to use as a base for any built docker containers (default: develop-latest)\n- `project_name`: the default docker compose project name (default: aristacv-sync)\n- `python_ver`: the version of Python to use as a base for any built docker containers (default: 3.6)\n- `local`: a boolean flag indicating if invoke tasks should be run on the host or inside the docker containers (default: False, commands will be run in docker containers)\n- `compose_dir`: the full path to a directory containing the project compose files\n- `compose_files`: a list of compose files applied in order (see [Multiple Compose files](https://docs.docker.com/compose/extends/#multiple-compose-files) for more information)\n\nUsing PyInvoke these configuration options can be overridden using [several methods](http://docs.pyinvoke.org/en/stable/concepts/configuration.html).  Perhaps the simplest is simply setting an environment variable `INVOKE_ARISTACV-SYNC_VARIABLE_NAME` where `VARIABLE_NAME` is the variable you are trying to override.  The only exception is `compose_files`, because it is a list it must be overridden in a yaml file.  There is an example `invoke.yml` in this directory which can be used as a starting point.\n\n#### Local Poetry Development Environment\n\n1. Copy `development/creds.example.env` to `development/creds.env` (This file will be ignored by git and docker)\n2. Uncomment the `POSTGRES_HOST`, `REDIS_HOST`, and `NAUTOBOT_ROOT` variables in `development/creds.env`\n3. Create an invoke.yml with the following contents at the root of the repo:\n\n```shell\n---\naristacv_sync:\n  local: true\n  compose_files:\n    - "docker-compose.requirements.yml"\n```\n\n4. Run the following commands:\n\n```shell\npoetry shell\npoetry install\nexport $(cat development/dev.env | xargs)\nexport $(cat development/creds.env | xargs)\n```\n\n5. You can now run nautobot-server commands as you would from the [Nautobot documentation](https://nautobot.readthedocs.io/en/latest/) for example to start the development server:\n\n```shell\nnautobot-server runserver 0.0.0.0:8080 --insecure\n```\n\nNautobot server can now be accessed at [http://localhost:8080](http://localhost:8080).\n\n#### Docker Development Environment\n\n**NOTE: Use WSL remote developement on Windows.**\n\nThis project is managed by [Python Poetry](https://python-poetry.org/) and has a few requirements to setup your development environment:\n\n1. Install Poetry, see the [Poetry Documentation](https://python-poetry.org/docs/#installation) for your operating system.\n2. Install Docker, see the [Docker documentation](https://docs.docker.com/get-docker/) for your operating system.\n\nOnce you have Poetry and Docker installed you can run the following commands to install all other development dependencies in an isolated python virtual environment:\n\n```shell\npoetry shell\npoetry install\n```\nAnd then:\n```shell\ninvoke start\n```\nOr this build debug target that instructs invoke to follow the container logs in the running terminal\n```shell\ninvoke build debug\n```\n\nNautobot server can now be accessed at [http://localhost:8080](http://localhost:8080).\n\n### CLI Helper Commands\n\nThe project is coming with a CLI helper based on [invoke](http://www.pyinvoke.org/) to help setup the development environment. The commands are listed below in 3 categories `dev environment`, `utility` and `testing`.\n\nEach command can be executed with `invoke <command>`. Environment variables `INVOKE_ARISTACV-SYNC_PYTHON_VER` and `INVOKE_ARISTACV-SYNC_NAUTOBOT_VER` may be specified to override the default versions. Each command also has its own help `invoke <command> --help`\n\n#### Docker dev environment\n\n```no-highlight\n  build            Build all docker images.\n  debug            Start Nautobot and its dependencies in debug mode.\n  destroy          Destroy all containers and volumes.\n  restart          Restart Nautobot and its dependencies.\n  start            Start Nautobot and its dependencies in detached mode.\n  stop             Stop Nautobot and its dependencies.\n```\n\n#### Utility\n\n```no-highlight\n  cli              Launch a bash shell inside the running Nautobot container.\n  create-user      Create a new user in django (default: admin), will prompt for password.\n  makemigrations   Run Make Migration in Django.\n  nbshell          Launch a nbshell session.\n```\n\n#### Testing\n\n```no-highlight\n  bandit           Run bandit to validate basic static code security analysis.\n  black            Run black to check that Python files adhere to its style standards.\n  flake8           This will run flake8 for the specified name and Python version.\n  pydocstyle       Run pydocstyle to validate docstring formatting adheres to NTC defined standards.\n  pylint           Run pylint code analysis.\n  tests            Run all tests for this plugin.\n  unittest         Run Django unit tests for the plugin.\n```\n\n## Questions\n\nFor any questions or comments, please check the [FAQ](FAQ.md) first and feel free to swing by the [Network to Code slack channel](https://networktocode.slack.com/) (channel #networktocode).\nSign up [here](http://slack.networktocode.com/)\n\n',
    'author': 'Oscar Calaf',
    'author_email': 'ocalaf@unitecnic.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/ocalaf-unitenic/nautobot-ui-plugin-docker',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
