# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from poolgrpc.compiled import auctioneer_pb2 as poolgrpc_dot_compiled_dot_auctioneer__pb2
from poolgrpc.compiled import trader_pb2 as poolgrpc_dot_compiled_dot_trader__pb2


class TraderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInfo = channel.unary_unary(
                '/poolrpc.Trader/GetInfo',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.GetInfoResponse.FromString,
                )
        self.StopDaemon = channel.unary_unary(
                '/poolrpc.Trader/StopDaemon',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.StopDaemonRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.StopDaemonResponse.FromString,
                )
        self.QuoteAccount = channel.unary_unary(
                '/poolrpc.Trader/QuoteAccount',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.QuoteAccountRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.QuoteAccountResponse.FromString,
                )
        self.InitAccount = channel.unary_unary(
                '/poolrpc.Trader/InitAccount',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.InitAccountRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.Account.FromString,
                )
        self.ListAccounts = channel.unary_unary(
                '/poolrpc.Trader/ListAccounts',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.ListAccountsRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.ListAccountsResponse.FromString,
                )
        self.CloseAccount = channel.unary_unary(
                '/poolrpc.Trader/CloseAccount',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.CloseAccountRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.CloseAccountResponse.FromString,
                )
        self.WithdrawAccount = channel.unary_unary(
                '/poolrpc.Trader/WithdrawAccount',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.WithdrawAccountRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.WithdrawAccountResponse.FromString,
                )
        self.DepositAccount = channel.unary_unary(
                '/poolrpc.Trader/DepositAccount',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.DepositAccountRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.DepositAccountResponse.FromString,
                )
        self.RenewAccount = channel.unary_unary(
                '/poolrpc.Trader/RenewAccount',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.RenewAccountRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.RenewAccountResponse.FromString,
                )
        self.BumpAccountFee = channel.unary_unary(
                '/poolrpc.Trader/BumpAccountFee',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.BumpAccountFeeRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.BumpAccountFeeResponse.FromString,
                )
        self.RecoverAccounts = channel.unary_unary(
                '/poolrpc.Trader/RecoverAccounts',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.RecoverAccountsRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.RecoverAccountsResponse.FromString,
                )
        self.SubmitOrder = channel.unary_unary(
                '/poolrpc.Trader/SubmitOrder',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.SubmitOrderRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.SubmitOrderResponse.FromString,
                )
        self.ListOrders = channel.unary_unary(
                '/poolrpc.Trader/ListOrders',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.ListOrdersRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.ListOrdersResponse.FromString,
                )
        self.CancelOrder = channel.unary_unary(
                '/poolrpc.Trader/CancelOrder',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.CancelOrderResponse.FromString,
                )
        self.QuoteOrder = channel.unary_unary(
                '/poolrpc.Trader/QuoteOrder',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.QuoteOrderRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.QuoteOrderResponse.FromString,
                )
        self.AuctionFee = channel.unary_unary(
                '/poolrpc.Trader/AuctionFee',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.AuctionFeeRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.AuctionFeeResponse.FromString,
                )
        self.LeaseDurations = channel.unary_unary(
                '/poolrpc.Trader/LeaseDurations',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.LeaseDurationRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.LeaseDurationResponse.FromString,
                )
        self.NextBatchInfo = channel.unary_unary(
                '/poolrpc.Trader/NextBatchInfo',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.NextBatchInfoRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.NextBatchInfoResponse.FromString,
                )
        self.BatchSnapshot = channel.unary_unary(
                '/poolrpc.Trader/BatchSnapshot',
                request_serializer=poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotResponse.FromString,
                )
        self.GetLsatTokens = channel.unary_unary(
                '/poolrpc.Trader/GetLsatTokens',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.TokensRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.TokensResponse.FromString,
                )
        self.Leases = channel.unary_unary(
                '/poolrpc.Trader/Leases',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.LeasesRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.LeasesResponse.FromString,
                )
        self.NodeRatings = channel.unary_unary(
                '/poolrpc.Trader/NodeRatings',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.NodeRatingRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.NodeRatingResponse.FromString,
                )
        self.BatchSnapshots = channel.unary_unary(
                '/poolrpc.Trader/BatchSnapshots',
                request_serializer=poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotsRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotsResponse.FromString,
                )
        self.OfferSidecar = channel.unary_unary(
                '/poolrpc.Trader/OfferSidecar',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.OfferSidecarRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.FromString,
                )
        self.RegisterSidecar = channel.unary_unary(
                '/poolrpc.Trader/RegisterSidecar',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.RegisterSidecarRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.FromString,
                )
        self.ExpectSidecarChannel = channel.unary_unary(
                '/poolrpc.Trader/ExpectSidecarChannel',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.ExpectSidecarChannelRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.ExpectSidecarChannelResponse.FromString,
                )
        self.DecodeSidecarTicket = channel.unary_unary(
                '/poolrpc.Trader/DecodeSidecarTicket',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.DecodedSidecarTicket.FromString,
                )
        self.ListSidecars = channel.unary_unary(
                '/poolrpc.Trader/ListSidecars',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.ListSidecarsRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.ListSidecarsResponse.FromString,
                )
        self.CancelSidecar = channel.unary_unary(
                '/poolrpc.Trader/CancelSidecar',
                request_serializer=poolgrpc_dot_compiled_dot_trader__pb2.CancelSidecarRequest.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.CancelSidecarResponse.FromString,
                )


class TraderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetInfo(self, request, context):
        """pool: `getinfo`
        GetInfo returns general information about the state of the Pool trader
        daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopDaemon(self, request, context):
        """pool: `stop`
        Stop gracefully shuts down the Pool trader daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuoteAccount(self, request, context):
        """
        QuoteAccount gets a fee quote to fund an account of the given size with the
        given confirmation target. If the connected lnd wallet doesn't have enough
        balance to fund an account of the requested size, an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitAccount(self, request, context):
        """pool: `accounts new`
        InitAccount creates a new account with the requested size and expiration,
        funding it from the wallet of the connected lnd node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccounts(self, request, context):
        """pool: `accounts list`
        ListAccounts returns a list of all accounts known to the trader daemon and
        their current state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseAccount(self, request, context):
        """pool: `accounts close`
        CloseAccount closes an account and returns the funds locked in that account
        to the connected lnd node's wallet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawAccount(self, request, context):
        """pool: `accounts withdraw`
        WithdrawAccount splits off parts of the account balance into the specified
        outputs while recreating the account with a reduced balance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DepositAccount(self, request, context):
        """pool: `accounts deposit`
        DepositAccount adds more funds from the connected lnd node's wallet to an
        account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenewAccount(self, request, context):
        """pool: `accounts renew`
        RenewAccount renews the expiration of an account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BumpAccountFee(self, request, context):
        """pool: `accounts bumpfee`
        BumpAccountFee attempts to bump the fee of an account's transaction through
        child-pays-for-parent (CPFP). Since the CPFP is performed through the
        backing lnd node, the account transaction must contain an output under its
        control for a successful bump. If a CPFP has already been performed for an
        account, and this RPC is invoked again, then a replacing transaction (RBF)
        of the child will be broadcast.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecoverAccounts(self, request, context):
        """pool: `accounts recover`
        RecoverAccounts queries the auction server for this trader daemon's accounts
        in case we lost our local account database.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitOrder(self, request, context):
        """pool: `orders submit`
        SubmitOrder creates a new ask or bid order and submits for the given account
        and submits it to the auction server for matching.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOrders(self, request, context):
        """pool: `orders list`
        ListOrders returns a list of all active and archived orders that are
        currently known to the trader daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """pool: `orders cancel`
        CancelOrder cancels an active order with the auction server to remove it
        from future matching.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuoteOrder(self, request, context):
        """
        QuoteOrder calculates the premium, execution fees and max batch fee rate for
        an order based on the given order parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuctionFee(self, request, context):
        """pool: `auction fee`
        AuctionFee returns the current auction order execution fee specified by the
        auction server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaseDurations(self, request, context):
        """pool: `auction leasedurations`
        LeaseDurations returns the current set of valid lease duration in the
        market as is, and also information w.r.t if the market is currently active.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextBatchInfo(self, request, context):
        """pool: `auction nextbatchinfo`
        NextBatchInfo returns information about the next batch the auctioneer will
        perform.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchSnapshot(self, request, context):
        """pool: `auction snapshot`
        BatchSnapshot returns the snapshot of a past batch identified by its ID.
        If no ID is provided, the snapshot of the last finalized batch is returned.
        Deprecated, use BatchSnapshots instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLsatTokens(self, request, context):
        """pool: `listauth`
        GetLsatTokens returns all LSAT tokens the daemon ever paid for.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Leases(self, request, context):
        """pool: `auction leases`
        Leases returns the list of channels that were either purchased or sold by
        the trader within the auction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeRatings(self, request, context):
        """pool: `auction ratings`
        Returns the Node Tier information for this target Lightning node, and other
        related ranking information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchSnapshots(self, request, context):
        """pool: `auction snapshot`
        BatchSnapshots returns a list of batch snapshots starting at the start batch
        ID and going back through the history of batches, returning at most the
        number of specified batches. A maximum of 100 snapshots can be queried in
        one call. If no start batch ID is provided, the most recent finalized batch
        is used as the starting point to go back from.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OfferSidecar(self, request, context):
        """pool: `sidecar offer`
        OfferSidecar is step 1/4 of the sidecar negotiation between the provider
        (the trader submitting the bid order) and the recipient (the trader
        receiving the sidecar channel).
        This step must be run by the provider. The result is a sidecar ticket with
        an offer to lease a sidecar channel for the recipient. The offer will be
        signed with the provider's lnd node public key. The ticket returned by this
        call will have the state "offered".
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterSidecar(self, request, context):
        """pool: `sidecar register`
        RegisterSidecarRequest is step 2/4 of the sidecar negotiation between the
        provider (the trader submitting the bid order) and the recipient (the trader
        receiving the sidecar channel).
        This step must be run by the recipient. The result is a sidecar ticket with
        the recipient's node information and channel funding multisig pubkey filled
        in. The ticket returned by this call will have the state "registered".
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpectSidecarChannel(self, request, context):
        """pool: `sidecar expectchannel`
        ExpectSidecarChannel is step 4/4 of the sidecar negotiation between the
        provider (the trader submitting the bid order) and the recipient (the trader
        receiving the sidecar channel).
        This step must be run by the recipient once the provider has submitted the
        bid order for the sidecar channel. From this point onwards the Pool trader
        daemon of both the provider as well as the recipient need to be online to
        receive and react to match making events from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodeSidecarTicket(self, request, context):
        """pool: `sidecar printticket`
        Decodes the base58 encoded sidecar ticket into its individual data fields
        for a more human-readable representation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSidecars(self, request, context):
        """pool: `sidecar list`
        ListSidecars lists all sidecar tickets currently in the local database. This
        includes tickets offered by our node as well as tickets that our node is the
        recipient of. Optionally a ticket ID can be provided to filter the tickets.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelSidecar(self, request, context):
        """pool: `sidecar cancel`
        CancelSidecar cancels the execution of a specific sidecar ticket. Depending
        on the state of the sidecar ticket its associated bid order might be
        canceled as well (if this ticket was offered by our node).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TraderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.GetInfoRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.GetInfoResponse.SerializeToString,
            ),
            'StopDaemon': grpc.unary_unary_rpc_method_handler(
                    servicer.StopDaemon,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.StopDaemonRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.StopDaemonResponse.SerializeToString,
            ),
            'QuoteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.QuoteAccount,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.QuoteAccountRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.QuoteAccountResponse.SerializeToString,
            ),
            'InitAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.InitAccount,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.InitAccountRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.Account.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.ListAccountsRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.ListAccountsResponse.SerializeToString,
            ),
            'CloseAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseAccount,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.CloseAccountRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.CloseAccountResponse.SerializeToString,
            ),
            'WithdrawAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawAccount,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.WithdrawAccountRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.WithdrawAccountResponse.SerializeToString,
            ),
            'DepositAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DepositAccount,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.DepositAccountRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.DepositAccountResponse.SerializeToString,
            ),
            'RenewAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.RenewAccount,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.RenewAccountRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.RenewAccountResponse.SerializeToString,
            ),
            'BumpAccountFee': grpc.unary_unary_rpc_method_handler(
                    servicer.BumpAccountFee,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.BumpAccountFeeRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.BumpAccountFeeResponse.SerializeToString,
            ),
            'RecoverAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoverAccounts,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.RecoverAccountsRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.RecoverAccountsResponse.SerializeToString,
            ),
            'SubmitOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitOrder,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.SubmitOrderRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.SubmitOrderResponse.SerializeToString,
            ),
            'ListOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOrders,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.ListOrdersRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.ListOrdersResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.CancelOrderRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.CancelOrderResponse.SerializeToString,
            ),
            'QuoteOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.QuoteOrder,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.QuoteOrderRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.QuoteOrderResponse.SerializeToString,
            ),
            'AuctionFee': grpc.unary_unary_rpc_method_handler(
                    servicer.AuctionFee,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.AuctionFeeRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.AuctionFeeResponse.SerializeToString,
            ),
            'LeaseDurations': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaseDurations,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.LeaseDurationRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.LeaseDurationResponse.SerializeToString,
            ),
            'NextBatchInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.NextBatchInfo,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.NextBatchInfoRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.NextBatchInfoResponse.SerializeToString,
            ),
            'BatchSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchSnapshot,
                    request_deserializer=poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotResponse.SerializeToString,
            ),
            'GetLsatTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLsatTokens,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.TokensRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.TokensResponse.SerializeToString,
            ),
            'Leases': grpc.unary_unary_rpc_method_handler(
                    servicer.Leases,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.LeasesRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.LeasesResponse.SerializeToString,
            ),
            'NodeRatings': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeRatings,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.NodeRatingRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.NodeRatingResponse.SerializeToString,
            ),
            'BatchSnapshots': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchSnapshots,
                    request_deserializer=poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotsRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotsResponse.SerializeToString,
            ),
            'OfferSidecar': grpc.unary_unary_rpc_method_handler(
                    servicer.OfferSidecar,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.OfferSidecarRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.SerializeToString,
            ),
            'RegisterSidecar': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSidecar,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.RegisterSidecarRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.SerializeToString,
            ),
            'ExpectSidecarChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpectSidecarChannel,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.ExpectSidecarChannelRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.ExpectSidecarChannelResponse.SerializeToString,
            ),
            'DecodeSidecarTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeSidecarTicket,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.DecodedSidecarTicket.SerializeToString,
            ),
            'ListSidecars': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSidecars,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.ListSidecarsRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.ListSidecarsResponse.SerializeToString,
            ),
            'CancelSidecar': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelSidecar,
                    request_deserializer=poolgrpc_dot_compiled_dot_trader__pb2.CancelSidecarRequest.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_trader__pb2.CancelSidecarResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poolrpc.Trader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Trader(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/GetInfo',
            poolgrpc_dot_compiled_dot_trader__pb2.GetInfoRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.GetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopDaemon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/StopDaemon',
            poolgrpc_dot_compiled_dot_trader__pb2.StopDaemonRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.StopDaemonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuoteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/QuoteAccount',
            poolgrpc_dot_compiled_dot_trader__pb2.QuoteAccountRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.QuoteAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/InitAccount',
            poolgrpc_dot_compiled_dot_trader__pb2.InitAccountRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.Account.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/ListAccounts',
            poolgrpc_dot_compiled_dot_trader__pb2.ListAccountsRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.ListAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/CloseAccount',
            poolgrpc_dot_compiled_dot_trader__pb2.CloseAccountRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.CloseAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/WithdrawAccount',
            poolgrpc_dot_compiled_dot_trader__pb2.WithdrawAccountRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.WithdrawAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DepositAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/DepositAccount',
            poolgrpc_dot_compiled_dot_trader__pb2.DepositAccountRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.DepositAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenewAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/RenewAccount',
            poolgrpc_dot_compiled_dot_trader__pb2.RenewAccountRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.RenewAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BumpAccountFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/BumpAccountFee',
            poolgrpc_dot_compiled_dot_trader__pb2.BumpAccountFeeRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.BumpAccountFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecoverAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/RecoverAccounts',
            poolgrpc_dot_compiled_dot_trader__pb2.RecoverAccountsRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.RecoverAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/SubmitOrder',
            poolgrpc_dot_compiled_dot_trader__pb2.SubmitOrderRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.SubmitOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/ListOrders',
            poolgrpc_dot_compiled_dot_trader__pb2.ListOrdersRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.ListOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/CancelOrder',
            poolgrpc_dot_compiled_dot_trader__pb2.CancelOrderRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.CancelOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuoteOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/QuoteOrder',
            poolgrpc_dot_compiled_dot_trader__pb2.QuoteOrderRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.QuoteOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuctionFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/AuctionFee',
            poolgrpc_dot_compiled_dot_trader__pb2.AuctionFeeRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.AuctionFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaseDurations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/LeaseDurations',
            poolgrpc_dot_compiled_dot_trader__pb2.LeaseDurationRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.LeaseDurationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NextBatchInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/NextBatchInfo',
            poolgrpc_dot_compiled_dot_trader__pb2.NextBatchInfoRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.NextBatchInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/BatchSnapshot',
            poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLsatTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/GetLsatTokens',
            poolgrpc_dot_compiled_dot_trader__pb2.TokensRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.TokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Leases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/Leases',
            poolgrpc_dot_compiled_dot_trader__pb2.LeasesRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.LeasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeRatings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/NodeRatings',
            poolgrpc_dot_compiled_dot_trader__pb2.NodeRatingRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.NodeRatingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchSnapshots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/BatchSnapshots',
            poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotsRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_auctioneer__pb2.BatchSnapshotsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OfferSidecar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/OfferSidecar',
            poolgrpc_dot_compiled_dot_trader__pb2.OfferSidecarRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterSidecar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/RegisterSidecar',
            poolgrpc_dot_compiled_dot_trader__pb2.RegisterSidecarRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpectSidecarChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/ExpectSidecarChannel',
            poolgrpc_dot_compiled_dot_trader__pb2.ExpectSidecarChannelRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.ExpectSidecarChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodeSidecarTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/DecodeSidecarTicket',
            poolgrpc_dot_compiled_dot_trader__pb2.SidecarTicket.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.DecodedSidecarTicket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSidecars(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/ListSidecars',
            poolgrpc_dot_compiled_dot_trader__pb2.ListSidecarsRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.ListSidecarsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelSidecar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.Trader/CancelSidecar',
            poolgrpc_dot_compiled_dot_trader__pb2.CancelSidecarRequest.SerializeToString,
            poolgrpc_dot_compiled_dot_trader__pb2.CancelSidecarResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
