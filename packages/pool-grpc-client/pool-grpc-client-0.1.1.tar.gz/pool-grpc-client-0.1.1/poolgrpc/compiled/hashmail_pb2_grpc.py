# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from poolgrpc.compiled import hashmail_pb2 as poolgrpc_dot_compiled_dot_hashmail__pb2


class HashMailStub(object):
    """HashMail exposes a simple synchronous network stream that can be used for
    various types of synchronization and coordination. The service allows
    authenticated users to create a simplex stream call a cipher box. Once the
    stream is created, any user that knows of the stream ID can read/write from
    the stream, but only a single user can be on either side at a time.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewCipherBox = channel.unary_unary(
                '/poolrpc.HashMail/NewCipherBox',
                request_serializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxAuth.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherInitResp.FromString,
                )
        self.DelCipherBox = channel.unary_unary(
                '/poolrpc.HashMail/DelCipherBox',
                request_serializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxAuth.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_hashmail__pb2.DelCipherBoxResp.FromString,
                )
        self.SendStream = channel.stream_unary(
                '/poolrpc.HashMail/SendStream',
                request_serializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBox.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxDesc.FromString,
                )
        self.RecvStream = channel.unary_stream(
                '/poolrpc.HashMail/RecvStream',
                request_serializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxDesc.SerializeToString,
                response_deserializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBox.FromString,
                )


class HashMailServicer(object):
    """HashMail exposes a simple synchronous network stream that can be used for
    various types of synchronization and coordination. The service allows
    authenticated users to create a simplex stream call a cipher box. Once the
    stream is created, any user that knows of the stream ID can read/write from
    the stream, but only a single user can be on either side at a time.
    """

    def NewCipherBox(self, request, context):
        """
        NewCipherBox creates a new cipher box pipe/stream given a valid
        authentication mechanism. If the authentication mechanism has been revoked,
        or needs to be changed, then a CipherChallenge message is returned.
        Otherwise the method will either be accepted or rejected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelCipherBox(self, request, context):
        """
        DelCipherBox attempts to tear down an existing cipher box pipe. The same
        authentication mechanism used to initially create the stream MUST be
        specified.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendStream(self, request_iterator, context):
        """
        SendStream opens up the write side of the passed CipherBox pipe. Writes
        will be non-blocking up to the buffer size of the pipe. Beyond that writes
        will block until completed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecvStream(self, request, context):
        """
        RecvStream opens up the read side of the passed CipherBox pipe. This method
        will block until a full message has been read as this is a message based
        pipe/stream abstraction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HashMailServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewCipherBox': grpc.unary_unary_rpc_method_handler(
                    servicer.NewCipherBox,
                    request_deserializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxAuth.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherInitResp.SerializeToString,
            ),
            'DelCipherBox': grpc.unary_unary_rpc_method_handler(
                    servicer.DelCipherBox,
                    request_deserializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxAuth.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_hashmail__pb2.DelCipherBoxResp.SerializeToString,
            ),
            'SendStream': grpc.stream_unary_rpc_method_handler(
                    servicer.SendStream,
                    request_deserializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBox.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxDesc.SerializeToString,
            ),
            'RecvStream': grpc.unary_stream_rpc_method_handler(
                    servicer.RecvStream,
                    request_deserializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxDesc.FromString,
                    response_serializer=poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBox.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poolrpc.HashMail', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HashMail(object):
    """HashMail exposes a simple synchronous network stream that can be used for
    various types of synchronization and coordination. The service allows
    authenticated users to create a simplex stream call a cipher box. Once the
    stream is created, any user that knows of the stream ID can read/write from
    the stream, but only a single user can be on either side at a time.
    """

    @staticmethod
    def NewCipherBox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.HashMail/NewCipherBox',
            poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxAuth.SerializeToString,
            poolgrpc_dot_compiled_dot_hashmail__pb2.CipherInitResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelCipherBox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poolrpc.HashMail/DelCipherBox',
            poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxAuth.SerializeToString,
            poolgrpc_dot_compiled_dot_hashmail__pb2.DelCipherBoxResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/poolrpc.HashMail/SendStream',
            poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBox.SerializeToString,
            poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxDesc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecvStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/poolrpc.HashMail/RecvStream',
            poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBoxDesc.SerializeToString,
            poolgrpc_dot_compiled_dot_hashmail__pb2.CipherBox.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
