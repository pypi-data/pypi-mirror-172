{"version":3,"file":"static/js/28.1d6068d7.chunk.js","mappings":"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","sources":["../../core/src/ui/VirtualizedTable.tsx","../../core/src/workspace/VirtualizedJobRow.tsx","../../core/src/workspace/VirtualizedScheduleRow.tsx","../../core/src/workspace/VirtualizedSensorRow.tsx","../../core/src/workspace/VirtualizedWorkspaceTable.tsx"],"sourcesContent":["import {Box, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const HeaderCell: React.FC = ({children}) => (\n  <Box\n    padding={{vertical: 8, horizontal: 24}}\n    border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n    style={{whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden'}}\n  >\n    {children}\n  </Box>\n);\n\nexport const RowCell: React.FC = ({children}) => (\n  <Box\n    padding={{horizontal: 24, vertical: 12}}\n    flex={{direction: 'column', justifyContent: 'flex-start'}}\n    style={{color: Colors.Gray500, overflow: 'hidden'}}\n    border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n  >\n    {children}\n  </Box>\n);\n\nexport const Container = styled.div`\n  height: 100%;\n  overflow: auto;\n`;\n\ntype InnerProps = {\n  $totalHeight: number;\n};\n\nexport const Inner = styled.div.attrs<InnerProps>(({$totalHeight}) => ({\n  style: {\n    height: `${$totalHeight}px`,\n  },\n}))<InnerProps>`\n  position: relative;\n  width: 100%;\n`;\n\ntype RowProps = {$height: number; $start: number};\n\nexport const Row = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/SingleJobQuery';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const {schedules, sensors} = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const {schedules, sensors} = data.pipelineOrError;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [data]);\n\n  const latestRuns = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const runs = data.pipelineOrError.runs;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <Link\n            to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}\n            style={{maxWidth: '100%', fontWeight: 500}}\n          >\n            <MiddleTruncate text={name} />\n          </Link>\n          <div\n            style={{\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            <Caption\n              style={{\n                color: Colors.Gray500,\n                whiteSpace: 'nowrap',\n              }}\n            >\n              {data?.pipelineOrError.__typename === 'Pipeline'\n                ? data.pipelineOrError.description\n                : ''}\n            </Caption>\n          </div>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleOrSensorTag\n                schedules={schedules}\n                sensors={sensors}\n                repoAddress={repoAddress}\n              />\n              {/* {schedules.length ? <NextTick schedules={schedules} /> : null} */}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <LastRunSummary run={latestRuns[0]} showButton={false} showHover name={name} />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <div>\n            <JobMenu job={{isJob, name, runs: latestRuns}} repoAddress={repoAddress} />\n          </div>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: 34% 30% 20% 8% 8%;\n  height: 100%;\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Caption,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {ScheduleSwitch, SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {MenuLink} from '../ui/MenuLink';\nimport {Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleScheduleQuery, SingleScheduleQueryVariables} from './types/SingleScheduleQuery';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {name, repoAddress, start, height} = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySchedule, queryResult] = useLazyQuery<\n    SingleScheduleQuery,\n    SingleScheduleQueryVariables\n  >(SINGLE_SCHEDULE_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useDelayedRowQuery(querySchedule);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {scheduleData ? (\n              <Caption>\n                <PipelineReference\n                  showIcon\n                  size=\"small\"\n                  pipelineName={scheduleData.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={isJob}\n                />\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <div>\n                <Tooltip position=\"top\" content={scheduleData.cronSchedule}>\n                  <span style={{color: Colors.Dark}}>\n                    {humanCronString(\n                      scheduleData.cronSchedule,\n                      scheduleData.executionTimezone || 'UTC',\n                    )}\n                  </span>\n                </Tooltip>\n              </div>\n              <Caption>\n                Next tick:&nbsp;\n                {scheduleData.scheduleState.nextTick &&\n                scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                  <TimestampDisplay\n                    timestamp={scheduleData.scheduleState.nextTick.timestamp}\n                    timezone={scheduleData.executionTimezone}\n                    timeFormat={{showSeconds: false, showTimezone: true}}\n                  />\n                ) : (\n                  'None'\n                )}\n              </Caption>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState.ticks.length ? (\n            <div>\n              <TickTag\n                tick={scheduleData.scheduleState.ticks[0]}\n                instigationType={InstigationType.SCHEDULE}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs.length > 0 ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: 76px 28% 30% 10% 20% 10%;\n  height: 100%;\n`;\n\nconst SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SensorSwitch, SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {InstigationType} from '../types/globalTypes';\nimport {Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/SingleSensorQuery';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {name, repoAddress, start, height} = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySensor, queryResult] = useLazyQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(querySensor);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {sensorData?.targets && sensorData.targets.length ? (\n              <Caption>\n                <Box flex={{direction: 'column', gap: 2}}>\n                  {sensorData.targets.map((target) => (\n                    <PipelineReference\n                      key={target.pipelineName}\n                      showIcon\n                      size=\"small\"\n                      pipelineName={target.pipelineName}\n                      pipelineHrefContext={repoAddress}\n                      isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                    />\n                  ))}\n                </Box>\n              </Caption>\n            ) : null}\n            {sensorData?.metadata.assetKeys && sensorData.metadata.assetKeys.length ? (\n              <Caption>\n                <Box flex={{direction: 'column', gap: 2}}>\n                  {sensorData.metadata.assetKeys.map((key) => (\n                    <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                  ))}\n                </Box>\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div>{humanizeSensorInterval(sensorData.minIntervalSeconds)}</div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState.ticks.length ? (\n            <div>\n              <TickTag\n                tick={sensorData.sensorState.ticks[0]}\n                instigationType={InstigationType.SENSOR}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs.length > 0 ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: 76px 38% 30% 10% 20%;\n  height: 100%;\n`;\n\nconst SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${SENSOR_SWITCH_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {LazyQueryExecFunction, QueryResult} from '@apollo/client';\nimport {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {Row} from '../ui/VirtualizedTable';\n\nimport {RepoAddress} from './types';\n\nexport const RepoRow: React.FC<{\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n  showLocation: boolean;\n  rightElement: React.ReactNode;\n  expanded: boolean;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}> = ({\n  repoAddress,\n  height,\n  start,\n  expanded,\n  onToggle,\n  onToggleAll,\n  showLocation,\n  rightElement,\n}) => {\n  return (\n    <Row $height={height} $start={start}>\n      <RepoSectionHeader\n        repoName={repoAddress.name}\n        repoLocation={repoAddress.location}\n        expanded={expanded}\n        onClick={(e: React.MouseEvent) =>\n          e.getModifierState('Shift') ? onToggleAll(!expanded) : onToggle(repoAddress)\n        }\n        showLocation={showLocation}\n        rightElement={rightElement}\n      />\n    </Row>\n  );\n};\n\nexport const LoadingOrNone: React.FC<{queryResult: QueryResult<any, any>}> = ({queryResult}) => {\n  const {called, loading, data} = queryResult;\n  return (\n    <div style={{color: Colors.Gray500}}>{!called || (loading && !data) ? 'Loading' : 'None'}</div>\n  );\n};\n\nconst JOB_QUERY_DELAY = 100;\n\nexport const useDelayedRowQuery = <Q, V>(lazyQueryFn: LazyQueryExecFunction<Q, V>) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      lazyQueryFn();\n    }, JOB_QUERY_DELAY);\n\n    return () => clearTimeout(timer);\n  }, [lazyQueryFn]);\n};\n"],"names":["HeaderCell","children","padding","vertical","horizontal","border","side","width","color","Colors","style","whiteSpace","textOverflow","overflow","RowCell","flex","direction","justifyContent","Container","styled","Inner","$totalHeight","height","Row","$height","$start","transform","VirtualizedJobRow","props","name","isJob","repoAddress","start","useLazyQuery","SINGLE_JOB_QUERY","fetchPolicy","variables","selector","buildPipelineSelector","queryJob","queryResult","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","React","pipelineOrError","__typename","schedules","sensors","latestRuns","runs","length","RowGrid","to","workspacePathFromAddress","maxWidth","fontWeight","text","description","alignItems","gap","run","showButton","showHover","jobName","reverse","fade","job","Box","gql","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","VirtualizedScheduleRow","repo","useRepository","SINGLE_SCHEDULE_QUERY","repositoryName","repositoryLocationName","location","scheduleName","notifyOnNetworkStatusChange","querySchedule","scheduleData","scheduleOrError","isThisThingAJob","pipelineName","schedule","errorDisplay","scheduleState","status","runningCount","showIcon","size","pipelineHrefContext","position","content","cronSchedule","humanCronString","executionTimezone","nextTick","InstigationStatus","timestamp","timezone","timeFormat","showSeconds","showTimezone","ticks","tick","instigationType","InstigationType","partitionSet","icon","target","TICK_TAG_FRAGMENT","VirtualizedSensorRow","SINGLE_SENSOR_QUERY","sensorName","querySensor","sensorData","sensorOrError","sensor","targets","map","metadata","assetKeys","key","path","join","humanizeSensorInterval","minIntervalSeconds","sensorState","RepoRow","expanded","onToggle","onToggleAll","showLocation","rightElement","repoName","repoLocation","onClick","e","getModifierState","LoadingOrNone","called","loading","lazyQueryFn","timer","setTimeout","clearTimeout"],"sourceRoot":""}