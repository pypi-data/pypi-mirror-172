import datetime
import json
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from pathlib import Path

import jwt
from jinja2 import Template

from hadata.user import MongoUser
from hareqres.jwtbearer import JWT_SECRET, JWT_ALGORITHM
from hareqres.jwtbearer import encode_jwt
from hareqres.user import User
from hautils.logger import logger


def email_token(receiver):
    """
    The email_token function takes a receiver email address as an argument and returns a token.
    The token is created by encoding the receiver email address in a JWT payload, which expires after 48 hours.

    :param receiver: Send the email to the user
    :return: A token that is a jwt
    :doc-author: Trelent
    """
    logger.info("email token called with %s" % (receiver,))
    payload = {
        "email": receiver,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(days=2)
    }
    logger.info("token creation %s" % (payload,))
    token = encode_jwt(payload)
    logger.info("token created %s" % (token,))
    return token


def send_email(receiver):
    logger.info("called send email with %s" % (receiver,))
    sender = "noreply@hiacuity.com"
    report_file = open(Path("templates/email.html"))
    template = Template(report_file.read())

    msg = MIMEMultipart('alternative')
    msg['Subject'] = "HiAcuity Account Verification"
    msg['From'] = sender
    msg['To'] = receiver

    token = email_token(receiver)

    text = "Thank you for registering with HiAcuity!" + \
           "\nCopy and paste the following link on a browser window to activate your account.:" + \
           "\nhttps://dev.hiacuity.com/verify/" + token
    html = template.render(token=token)

    part1 = MIMEText(text, 'plain')
    part2 = MIMEText(html, 'html')

    msg.attach(part1)
    msg.attach(part2)

    s = smtplib.SMTP_SSL('email-smtp.ap-southeast-1.amazonaws.com', 465)
    s.ehlo()
    s.login("AKIA5CLBR5JUUQRFHA77", "BJz4vVxAAU4gM9oRba3z2ccnKAMjG7+yXbpOi0y6COYp")
    s.sendmail(sender, receiver, msg.as_string())
    s.quit()


async def send_email_2(instance: MongoUser):
    """
    The send_email_2 function sends an email to the user with a link to verify their account.
    The function takes in the receiver's email address and instance of User class as parameters.
    It then opens up a template file containing HTML code for the body of an email, which is rendered using Jinja2 templating engine.
    The token variable contains a unique string that is generated by calling the generate_token() function on User class, which generates and returns a random string consisting of uppercase letters and digits (the length can be specified).
    This token is then used in place of {{token}} tag in HTML template file.

    :param receiver: Specify the receiver of the email
    :param instance:User: Pass the user information to the email template
    :return: None
    :doc-author: Trelent
    """
    logger.info("called send email 2 with %s" % (instance.email,))
    sender = "noreply@hiacuity.com"
    report_file = open(Path("templates/email_2.html"))
    template = Template(report_file.read())

    msg = MIMEMultipart('alternative')
    msg['Subject'] = "HiAcuity Account Verification"
    msg['From'] = sender
    msg['To'] = instance.email

    token = email_token(instance.email)

    text = "Hi" + instance.first_name + "\nYou have been invited!. Below you will find your account password and also the link to verify your account." + \
           "\nTemporary password:" + instance.clear_password + "\nCopy and paste the following link on a browser window to activate your account." + \
           "\nhttps://dev.hiacuity.com/verify/" + token + "/" + instance.email + "/" + instance.first_name + "/" + \
           instance.last_name

    html = template.render(token=token,
                           password=instance.clear_password,
                           first_name=instance.first_name,
                           last_name=instance.last_name,
                           email=instance.email)

    # Record the MIME types of both parts - text/plain and text/html.
    part1 = MIMEText(text, 'plain')
    part2 = MIMEText(html, 'html')

    msg.attach(part1)
    msg.attach(part2)

    s = smtplib.SMTP_SSL('email-smtp.ap-southeast-1.amazonaws.com', 465)
    s.ehlo()
    s.login("AKIA5CLBR5JUUQRFHA77", "BJz4vVxAAU4gM9oRba3z2ccnKAMjG7+yXbpOi0y6COYp")
    s.sendmail(sender, instance.email, msg.as_string())
    s.quit()


async def verify_token(token: str):
    """
    The verify_token function takes a token as an argument and returns the user object associated with that token.
    The function uses the jwt library to decode the token, then loads it into a json object. The json object is then
    used to query MongoDB for the user's document, which is returned.

    :param token:str: Pass the token that is being verified
    :return: A dictionary of the user's information
    :doc-author: Trelent
    """
    payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
    user = json.loads(MongoUser.objects(email=payload.get("email")).to_json())
    selected_user = user[0]
    return selected_user
