#* This is a bit of a hack to get this to run in RStudio using argparse. The vector tmp_args should be a comma-separated list of the
#* arguments you'd give on the command line.
#* To compare to ipython: %run myscript a, b would become tmp_args=c('a', 'b')
#* DON'T FORGET TO COMMENT OUT LINE 51 TO RUN AS A SCRIPT!!!
tmp_args=c('/Users/samvaughan/Science/Hector/full_simulations/Testing_Distortion_Correction/DistortionCorrected/DC_tile_000.fld',
'GAMA_G12_',
'--out-dir',
'/Users/samvaughan/Science/Hector/full_simulations/Testing_Distortion_Correction/Configuration/',
'--plot', '--run_local')
source('~/Science/Hector/Tiling/Caros_Code/HECTOR_ClusterFieldsTest.R', echo=TRUE)
tile_data=read.table(file=paste(fieldsfolder,f, sep='/'), header=TRUE, sep=',', skip=8, check.names = TRUE)
gdata=read.table(file=paste(fieldsfolder,g, sep='/'), header=TRUE, skip=8, check.names = TRUE)
tile_data
file=paste(fieldsfolder,g, sep='/')
file
read.table(file=paste(fieldsfolder,g, sep='/'), header=TRUE, skip=8)
gdata=read.table(file=paste(fieldsfolder,g, sep='/'), header=TRUE, skip=8, sep=',', check.names = TRUE)
read_yaml
library(yaml)
read_yaml("/Users/samvaughan/Science/Hector/HectorObservationPipeline/ConfigFiles/example_config.yaml")
a = read_yaml("/Users/samvaughan/Science/Hector/HectorObservationPipeline/ConfigFiles/example_config.yaml")
a
a$Hector_FOV_inner_radius
Sys.getenv('HOME')
paste(Sys.getenv('HECTOROBSPIPELINE_LOC'),"constants/HECTOR_CONSTANTS.yaml", '/')
Sys.getenv('HECTOROBSPIPELINE_LOC')
paste(Sys.getenv('HOME'),"constants/HECTOR_CONSTANTS.yaml", '/')
paste(Sys.getenv('HOME'),"constants/HECTOR_CONSTANTS.yaml", sep='/')
Sys
sys
Sys.getenv()
library(Sys)
library(sys)
Sys.getenv()
debugSource('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
debugSource('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
pos=final_config$pos
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
IDs
fdata
tile_data
basename(SAMIFields_Targets)
file=paste(fieldsfolder,f, sep='/')
file
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
file=paste(fieldsfolder,f, sep='/')
file
tile_data
file
fdata
IDs
tile_data
tile_data[-1]
View(tile_data)
g=paste('guide_',f,sep='')
gdata=read.table(file=paste(fieldsfolder,g, sep='/'), header=TRUE, skip=8, sep=',', check.names = TRUE)
fcentre=as.numeric(strsplit(readLines(paste(fieldsfolder,f, sep='/'), n=2)[2], split=' ')[[1]][c(2,3)])
fcentre
fdata=rbind(tile_data[,c('ID','MagnetX','MagnetY','mag','type')],gdata[,c('ID','MagnetX','MagnetY','mag','type')])
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
tile_data[,c('ID','MagnetX','MagnetY','mag','type')]
gdata[,c('ID','MagnetX','MagnetY','mag','type')]
gdata
gdata
g
file=paste(fieldsfolder,g, sep='/')
file
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
tile_data
fdata
tile_data[,c('ID','MagnetX','MagnetY','mag','type')],gdata[,c('ID','MagnetX','MagnetY','mag','type')])
tile_data[,c('ID','MagnetX','MagnetY','mag','type')],gdata[,c('ID','MagnetX','MagnetY','mag','type')]
tile_data[,c('ID','MagnetX','MagnetY','mag','type')],gdata[,c('ID','MagnetX','MagnetY','mag','type')]
rbind(tile_data[,c('ID','MagnetX','MagnetY','mag','type')],gdata[,c('ID','MagnetX','MagnetY','mag','type')])
tile_data[,c('ID','MagnetX','MagnetY','mag','type')]
fdata[, 'ID']
tile_data
tile_data[,c('ID','MagnetX','MagnetY','mag','type')]
a = tile_data[,c('ID','MagnetX','MagnetY','mag','type')]
View(a)
a$ID
grep("Sky", a$ID)
a[,grep("Sky", a$ID)]
a[grep("Sky", a$ID),]
sky_fibre_data = tile_data[grep("Sky", tile_data$ID),]
View(sky_fibre_data)
grep("Sky", tile_data$ID)
tile_data
grep("Sky", tile_data$ID)
tile_data[!sky_fibre_rows,]
sky_fibre_rows = grep("Sky", tile_data$ID)
tile_data[!sky_fibre_rows,]
length
length(tile_data)
tile_data
type
View(tile_data)
View(tile_data)
nrow(tile_data)
range(nrow(tile_data))
nrow(tile_data)
seq(122)
sky_fibre_rows
seq(122) - sky_fibre_rows
seq(122) %in% sky_fibre_rows
!(seq(122) %in% sky_fibre_rows)
not_sky_fibre_rows
sky_fibre_rows = grep("Sky", tile_data$ID)
not_sky_fibre_rows = !(seq(nrows(tile_data)) %in% sky_fibre_rows)
sky_fibre_data = tile_data[sky_fibre_rows,]
nrow(tile_data)
not_sky_fibre_rows = !(seq(nrow(tile_data)) %in% sky_fibre_rows)
not_sky_fibre_rows
seq(nrow(tile_data)[not_sky_fibre_rows]
seq(nrow(tile_data))[not_sky_fibre_rows]
row_numbers = seq(nrow(tile_data))
sky_fibre_rows = grep("Sky", tile_data$ID)
not_sky_fibre_rows = row_numbers[!(row_numbers %in% sky_fibre_rows)]
not_sky_fibre_rows
# Peel off the sky fibres
row_numbers = seq(nrow(tile_data))
sky_fibre_rows = grep("Sky", tile_data$ID)
not_sky_fibre_rows = row_numbers[!(row_numbers %in% sky_fibre_rows)]
sky_fibre_data = tile_data[sky_fibre_rows,]
#Combining guides and targets:
#* I've changed these column headings to match the outputs of my tiling code
fdata=rbind(tile_data[not_sky_fibre_rows,c('ID','MagnetX','MagnetY','mag','type')],gdata[,c('ID','MagnetX','MagnetY','mag','type')])
fdata
gdata
fdata=rbind(tile_data[not_sky_fibre_rows,c('ID','MagnetX','MagnetY','mag','type')],gdata[,c('ID','MagnetX','MagnetY','mag','type')])
gdata$ID
sapply(gdata, class)
class(tile_data$ID)
class(gdata$ID)
nlevels(tile_data$ID)
str?
?str
list(tile_data$ID)
class(list(tile_data$ID))
class(tile_data$ID)
tile_data=read.table(file=paste(fieldsfolder,f, sep='/'), header=TRUE, sep=',', skip=8, check.names = TRUE, stringsAsFactors=FALSE)
g=paste('guide_',f,sep='')
tile_data
tile_data$ID
class(tile_data$ID)
fieldsfolder = dirname(SAMIFields_Targets)
f = basename(SAMIFields_Targets)
tile_data=read.table(file=paste(fieldsfolder,f, sep='/'), header=TRUE, sep=',', skip=8, check.names = TRUE, stringsAsFactors = FALSE)
g=paste('guide_',f,sep='')
gdata=read.table(file=paste(fieldsfolder,g, sep='/'), header=TRUE, skip=8, sep=',', check.names = TRUE, colClasses = c("ID"="character"))
gdata
gdata$ID
class(gdata$ID)
fdata=rbind(tile_data[not_sky_fibre_rows,c('ID','MagnetX','MagnetY','mag','type')],gdata[,c('ID','MagnetX','MagnetY','mag','type')])
fdata
match(rownames(pos),rownames(fdata)
match(rownames(pos),rownames(fdata))
pos
IDs
tile_data$ID %in% IDs
sky_fibre_data
sky_fibre_IDs = tile_data[sky_fibre_rows, 'ID']
sky_fibre_IDs
tile_data$ID
tile_data$ID %in% sky_fibre_IDs
(tile_data$ID %in% IDs) | (tile_data$ID %in% sky_fibre_IDs)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
selected_objects
IDs
sky_fibre_IDs
tile_data$ID %in% sky_fibre_IDs
(tile_data$ID %in% IDs) | (tile_data$ID %in% sky_fibre_IDs)
subset_of_IDs_for_saving
tile_data[subset_of_IDs_for_saving,]
nrows(tile_data[subset_of_IDs_for_saving,])
nrow(tile_data[subset_of_IDs_for_saving,])
selected_objects = tile_data[subset_of_IDs_for_saving,]
galaxy_out_name = paste(out_dir,'HECTORConfig_Hexa_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.txt', sep='')
guide_out_name = paste(out_dir,'HECTORConfig_Guides_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.txt', sep='')
print(paste('********************************************'))
print(paste('Writing outputs to ', galaxy_out_name, sep=''))
print(paste('********************************************'))
write.table(cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects),file=galaxy_out_name, row.names=TRUE)
write.table(cbind(probe=c(1:length(gangs)),gpos,grads,gangs,gazAngs,gangs_gazAng),file=guide_out_name, row.names=FALSE)
if (visualise) {
plot_configured_field(pos=pos,angs=angs,gpos=gpos,gangs=gangs, fieldflags=final_config$flags, aspdf=FALSE)
}
plot_filename = filename=paste(out_dir,'/HECTORConfig_',addition_to_fname, substr(f, start=1,stop=nchar(f)-4), '.pdf', sep='')
plot_configured_field(filename=plot_filename,pos=pos,angs=angs,gpos=gpos,gangs=gangs, fieldflags=final_config$flags, aspdf=TRUE)
angs
cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects)
IDs
length(IDs)
length(pos)
length(selected_objects)
angs_azAng
selected_objects
write.table(cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects),file=galaxy_out_name, row.names=TRUE)
IDs
length(IDs)
length(angs_azAng)
probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng)
cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng))
cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng)
(tile_data$ID %in% IDs)
sum(tile_data$ID %in% IDs)
tile_data[(tile_data$ID %in% sky_fibre_IDs),]
sky_fibre_filler_list = rep(NA, nrow(sky_fibre_data))
sky_fibre_filler_list
sky_fibre_data$ID
pos
sky_fibre_data$x
sky_fibre_data$MagnetX
sky_fibre_data$MagnetX / 1000.0
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
sky_fibre_filler_list
length(sky_fibre_filler_list)
sky_fibre_data
length(sky_fibre_data)
nrows(sky_fibre_data)
nrow(sky_fibre_data)
length(sky_fibre_data$ID)
length(sky_fibre_data$MagnetX / 1000.0)
length(sky_fibre_filler_list)
cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID)
cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list)
cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list)
cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
sky_fibre_data
target_table = cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects)
#* Get the IDs of things which have been tiled, and save these
#* IDs=IDs[rownames(pos),] <<- This is wrong!
IDs=IDs[match(rownames(pos),rownames(fdata)),]
# This gets the rest of the columns from the tile too for us to save
subset_of_IDs_for_saving = (tile_data$ID %in% IDs)
#selected_objects = tile_data[tile_data$ID %in% IDs,]
selected_objects = tile_data[subset_of_IDs_for_saving,]
# Now make the skyfibre rows
sky_fibre_data = tile_data[(tile_data$ID %in% sky_fibre_IDs),]
sky_fibre_filler_list = rep(NA, nrow(sky_fibre_data))
target_table = cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
selected_objects
length(selected_objects)
nrow(selected_objects)
nrow(sky_fibre_data)
length(sky_fibre_filler_list)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$Magnety / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list)
sky_fibre_table
nrow(sky_fibre_table)
length(sky_fibre_table)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
target_table
sky_fibre_table
ncol(sky_fibre_table)
ncol(target_table)
# Now make the tables
target_table = cbind(probe=c(1:length(angs)),IDs,pos,rads,angs,azAngs,angs_azAng,selected_objects)
sky_fibre_table = cbind(probe=sky_fibre_filler_list,
IDs=sky_fibre_data$ID,
x=sky_fibre_data$MagnetX / 1000.0,
y=sky_fibre_data$MagnetY / 1000.0,
rads=sky_fibre_filler_list,
angs=sky_fibre_filler_list,
azAngs=sky_fibre_filler_list,
angs_azAng=sky_fibre_filler_list,
sky_fibre_data)
final_table = rbind(target_table, sky_fibre_table)
final_table
View(final_table)
tile_data
as.numeric(rownames(tile_data))
rownames(tile_data)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
final_table
galaxy_out_name
write.table(final_table,file=galaxy_out_name, row.names=TRUE)
write.table(final_table,file=galaxy_out_name, row.names=TRUE)
galaxy_out_name
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
!subl /Users/samvaughan/Desktop/HECTORConfig_Hexa_GAMA_G12_DC_tile_000.txt
tile_data['fraction_plate_radius_X']
max(tile_data['fraction_plate_radius_X'])
min(tile_data['fraction_plate_radius_X'])
min(tile_data['fraction_plate_radius_Y'])
max(tile_data['fraction_plate_radius_Y'])
tile_data['MagnetX']
fov
tile_data['MagnetX']/1000
tile_data[, 'fraction_plate_radius_X'] = tile_data['MagnetX']/1000/(fov/2)
max(tile_data['fraction_plate_radius_Y'])
(fov/2)
tile_data['MagnetX']/1000/(fov/2)
# Add in the fraction of the plate radius for debugging
tile_data[, 'fraction_plate_radius_X'] = tile_data['MagnetX']/1000/(fov/2)
tile_data[, 'fraction_plate_radius_Y'] = tile_data['MagnetY']/1000/(fov/2)
max(tile_data[, 'fraction_plate_radius_Y'])
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
final_table
final_table[, 'fraction_plate_radius_X']
max(final_table[, 'fraction_plate_radius_X'])
min(final_table[, 'fraction_plate_radius_X'])
max(final_table[, 'fraction_plate_radius_Y'])
min(final_table[, 'fraction_plate_radius_Y'])
setwd("~/Science/Hector/HectorObservationPipeline/hop/configuration")
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
source('~/Science/Hector/HectorObservationPipeline/hop/configuration/HECTOR_ClusterFieldsTest.R', echo=TRUE)
angs
final_table
View(final_table)
galaxy_out_name
addition_to_fname
