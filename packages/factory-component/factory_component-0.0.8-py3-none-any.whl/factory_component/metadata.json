{
  "src/lib/components/Example.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Example",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A label that will be printed when this component is rendered."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Rnd.react.js": {
    "description": "A resizable and draggable component",
    "displayName": "Rnd",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "element"
            },
            {
              "name": "array"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      },
      "default": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "y": {
                  "name": "number",
                  "required": false
                },
                "x": {
                  "name": "number",
                  "required": false
                },
                "width": {
                  "name": "union",
                  "value": [
                    {
                      "name": "number"
                    },
                    {
                      "name": "string"
                    }
                  ],
                  "required": false
                },
                "height": {
                  "name": "union",
                  "value": [
                    {
                      "name": "number"
                    },
                    {
                      "name": "string"
                    }
                  ],
                  "required": false
                }
              }
            },
            {
              "name": "shape",
              "value": {
                "y": {
                  "name": "number",
                  "required": false
                },
                "x": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": true,
        "description": "`default: { x: number; y: number; width?: number | string; height?: number | string; };`\n\nThe width and height property is used to set the default size of the component. For example, you can set 300, '300px', 50%. If omitted, set 'auto'.\nThe x and y property is used to set the default position of the component."
      },
      "size": {
        "type": {
          "name": "shape",
          "value": {
            "width": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "required": false
            },
            "height": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "required": false
            }
          }
        },
        "required": false,
        "description": "`size?: { width: (number | string), height: (number | string) };`\n\nThe size property is used to set size of the component. For example, you can set 300, '300px', 50%.\nUse size if you need to control size state by yourself."
      },
      "position": {
        "type": {
          "name": "shape",
          "value": {
            "x": {
              "name": "number",
              "required": false
            },
            "y": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "`position?: { x: number, y: number };`\n\nThe position property is used to set position of the component. Use position if you need to control size state by yourself."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`className?: string;`\n\nThe className property is used to set the custom className of the component."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "`style?: { [key: string]: string };`\n\nThe style property is used to set the custom style of the component."
      },
      "minWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "`minWidth?: number | string;`\n\nThe minWidth property is used to set the minimum width of the component. For example, you can set 300, '300px', 50%."
      },
      "minHeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "`minHeight?: number | string;`\n\nThe minHeight property is used to set the minimum height of the component. For example, you can set 300, '300px', 50%."
      },
      "maxWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "`maxWidth?: number | string;`\n\nThe maxWidth property is used to set the maximum width of the component. For example, you can set 300, '300px', 50%."
      },
      "maxHeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "`maxHeight?: number | string;`\n\nThe maxHeight property is used to set the maximum height of the component. For example, you can set 300, '300px', 50%."
      },
      "resizeGrid": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`resizeGrid?: [number, number];`\n\nThe resizeGrid property is used to specify the increments that resizing should snap to. Defaults to [1, 1]."
      },
      "dragGrid": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`dragGrid?: [number, number];`\n\nThe dragGrid property is used to specify the increments that moving should snap to. Defaults to [1, 1]."
      },
      "lockAspectRatio": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "`lockAspectRatio?: boolean | number;`\n\nThe lockAspectRatio property is used to lock aspect ratio. Set to true to lock the aspect ratio based on the initial size. Set to a numeric value to lock a specific aspect ratio (such as 16/9). If set to numeric, make sure to set initial height/width to values with correct aspect ratio. If omitted, set false."
      },
      "lockAspectRatioExtraWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`lockAspectRatioExtraWidth?: number;`\n\nThe lockAspectRatioExtraWidth property enables a resizable component to maintain an aspect ratio plus extra width. For instance, a video could be displayed 16:9 with a 50px side bar. If omitted, set 0."
      },
      "scale": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`scale?: number;`\nSpecifies the scale of the canvas you are dragging or resizing this element on. This allows you to, for example, get the correct drag / resize deltas while you are zoomed in or out via a transform or matrix in the parent of this element. If omitted, set 1."
      },
      "lockAspectRatioExtraHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`lockAspectRatioExtraHeight?: number;`\n\nThe lockAspectRatioExtraHeight property enables a resizable component to maintain an aspect ratio plus extra height. For instance, a video could be displayed 16:9 with a 50px header bar. If omitted, set 0."
      },
      "dragHandleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`dragHandleClassName?: string;`\n\nSpecifies a selector to be used as the handle that initiates drag. Example: handle."
      },
      "resizeHandleStyles": {
        "type": {
          "name": "shape",
          "value": {
            "bottom": {
              "name": "object",
              "required": false
            },
            "bottomLeft": {
              "name": "object",
              "required": false
            },
            "bottomRight": {
              "name": "object",
              "required": false
            },
            "left": {
              "name": "object",
              "required": false
            },
            "right": {
              "name": "object",
              "required": false
            },
            "top": {
              "name": "object",
              "required": false
            },
            "topLeft": {
              "name": "object",
              "required": false
            },
            "topRight": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "`resizeHandleStyles?: HandleStyles;`\n\nThe resizeHandleStyles property is used to override the style of one or more resize handles. Only the axis you specify will have its handle style replaced. If you specify a value for right it will completely replace the styles for the right resize handle, but other handle will still use the default styles.\n\n```\nexport type HandleStyles = {\n  bottom?: React.CSSProperties,\n  bottomLeft?: React.CSSProperties,\n  bottomRight?: React.CSSProperties,\n  left?: React.CSSProperties,\n  right?: React.CSSProperties,\n  top?: React.CSSProperties,\n  topLeft?: React.CSSProperties,\n  topRight?: React.CSSProperties\n}\n```"
      },
      "resizeHandleClasses": {
        "type": {
          "name": "shape",
          "value": {
            "bottom": {
              "name": "string",
              "required": false
            },
            "bottomLeft": {
              "name": "string",
              "required": false
            },
            "bottomRight": {
              "name": "string",
              "required": false
            },
            "left": {
              "name": "string",
              "required": false
            },
            "right": {
              "name": "string",
              "required": false
            },
            "top": {
              "name": "string",
              "required": false
            },
            "topLeft": {
              "name": "string",
              "required": false
            },
            "topRight": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "`resizeHandleClasses?: HandleClasses;`\n\nThe resizeHandleClasses property is used to set the className of one or more resize handles.\n\n```\ntype HandleClasses = {\n  bottom?: string;\n  bottomLeft?: string;\n  bottomRight?: string;\n  left?: string;\n  right?: string;\n  top?: string;\n  topLeft?: string;\n  topRight?: string;\n}\n```"
      },
      "resizeHandleComponent": {
        "type": {
          "name": "shape",
          "value": {
            "top": {
              "name": "element",
              "required": false
            },
            "right": {
              "name": "element",
              "required": false
            },
            "bottom": {
              "name": "element",
              "required": false
            },
            "left": {
              "name": "element",
              "required": false
            },
            "topRight": {
              "name": "element",
              "required": false
            },
            "bottomRight": {
              "name": "element",
              "required": false
            },
            "bottomLeft": {
              "name": "element",
              "required": false
            },
            "topLeft": {
              "name": "element",
              "required": false
            }
          }
        },
        "required": false,
        "description": "`resizeHandleComponent?: HandleCompoent;`\n\nThe resizeHandleComponent allows you to pass a custom React component as the resize handle.\n\n```\ntype HandleComponent = {\n  top?: React.ReactElement<any>;\n  right?: React.ReactElement<any>;\n  bottom?: React.ReactElement<any>;\n  left?: React.ReactElement<any>;\n  topRight?: React.ReactElement<any>;\n  bottomRight?: React.ReactElement<any>;\n  bottomLeft?: React.ReactElement<any>;\n  topLeft?: React.ReactElement<any>;\n}\n```"
      },
      "resizeHandleWrapperClass": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`resizeHandleWrapperClass?: string;`\n\nThe resizeHandleWrapperClass property is used to set css class name of resize handle wrapper(span) element."
      },
      "resizeHandleWrapperStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "`resizeHandleWrapperStyle?: Style;`\n\nThe resizeHandleWrapperStyle property is used to set css class name of resize handle wrapper(span) element."
      },
      "enableResizing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "bottom": {
                  "name": "bool",
                  "required": false
                },
                "bottomLeft": {
                  "name": "bool",
                  "required": false
                },
                "bottomRight": {
                  "name": "bool",
                  "required": false
                },
                "left": {
                  "name": "bool",
                  "required": false
                },
                "right": {
                  "name": "bool",
                  "required": false
                },
                "top": {
                  "name": "bool",
                  "required": false
                },
                "topLeft": {
                  "name": "bool",
                  "required": false
                },
                "topRight": {
                  "name": "bool",
                  "required": false
                }
              }
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "`enableResizing?: ?Enable;`\n\nThe enableResizing property is used to set the resizable permission of the component.\nThe permission of top, right, bottom, left, topRight, bottomRight, bottomLeft, topLeft direction resizing. If omitted, all resizer are enabled. If you want to permit only right direction resizing, set { top:false, right:true, bottom:false, left:false, topRight:false, bottomRight:false, bottomLeft:false, topLeft:false }.\n\n```\nexport type Enable = {\n  bottom?: boolean;\n  bottomLeft?: boolean;\n  bottomRight?: boolean;\n  left?: boolean;\n  right?: boolean;\n  top?: boolean;\n  topLeft?: boolean;\n  topRight?: boolean;\n} | boolean\n```"
      },
      "disableDragging": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "`disableDragging?: boolean;`\n\nThe disableDragging property disables dragging completely."
      },
      "cancel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`cancel?: string;`\n\nThe cancel property disables specifies a selector to be used to prevent drag initialization (e.g. .body)."
      },
      "dragAxis": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'x'",
              "computed": false
            },
            {
              "value": "'y'",
              "computed": false
            },
            {
              "value": "'both'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "`dragAxis?: 'x' | 'y' | 'both' | 'none'`\n\nThe direction of allowed movement (dragging) allowed ('x','y','both','none')."
      },
      "bounds": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`bounds?: string;`\n\nSpecifies movement boundaries. Accepted values:\n- `parent` restricts movement within the node's offsetParent (nearest node with position relative or absolute)\n- `window`, `body`, or\n- Selector, like `.fooClassName`."
      },
      "enableUserSelectHack": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/lib/components/TextEditor.react.js": {
    "description": "",
    "displayName": "TextEditor",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "defaultValue\n\nDefault value of the current model"
      },
      "defaultLanguage": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "defaultLanguage\n\nlanguage of the current model",
        "defaultValue": {
          "value": "'python'",
          "computed": false
        }
      },
      "defaultPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "defaultPath\n\nDefault path of the current model. Will be passed as the third argument to .createModel method - monaco.editor.createModel(..., ..., monaco.Uri.parse(defaultPath))"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "value\n\nValue of the current model"
      },
      "language": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "language\n\nLanguage of the current model (all languages that are supported by monaco-editor)"
      },
      "path": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "path\n\nPath of the current model. Will be passed as the third argument to .createModel method - monaco.editor.createModel(..., ..., monaco.Uri.parse(defaultPath))"
      },
      "theme": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"light\"",
              "computed": false
            },
            {
              "value": "\"vs-dark\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "theme\n\nThe theme for the monaco. Available options \"vs-dark\" | \"light\". Define new themes by monaco.editor.defineTheme",
        "defaultValue": {
          "value": "'light'",
          "computed": false
        }
      },
      "line": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "line\n\nThe line to jump on it"
      },
      "loading": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "element"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "loading\n\nThe loading screen before the editor will be mounted",
        "defaultValue": {
          "value": "'Loading...'",
          "computed": false
        }
      },
      "options": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "options\n\nIStandaloneEditorConstructionOptions",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "overrideServices": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "overrideServices\n\nIEditorOverrideServices",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "saveViewState": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "saveViewState\n\nIndicator whether to save the models' view states between model changes or not",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "keepCurrentModel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "keepCurrentModel\n\nIndicator whether to dispose the current model when the Editor is unmounted or not",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width\n\nunion: Width of the editor wrapper",
        "defaultValue": {
          "value": "'100%'",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "height\n\nunion: Height of the editor wrapper",
        "defaultValue": {
          "value": "'100%'",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className\n\nClass name for the editor container"
      },
      "wrapperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "wrapperProps\n\nProps applied to the wrapper element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  }
}