# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AviatrixAppDomainSelector',
    'AviatrixAppDomainSelectorMatchExpression',
    'AviatrixAwsTgwSecurityDomain',
    'AviatrixAwsTgwSecurityDomainAttachedVpc',
    'AviatrixAwsTgwVpnConnVpnTunnelData',
    'AviatrixFirenetFirewallInstanceAssociation',
    'AviatrixFirewallPolicy',
    'AviatrixFirewallTagCidrList',
    'AviatrixFqdnDomainName',
    'AviatrixFqdnGwFilterTagList',
    'AviatrixGatewayDnatConnectionPolicy',
    'AviatrixGatewayDnatDnatPolicy',
    'AviatrixGatewayDnatInterfacePolicy',
    'AviatrixGatewaySnatConnectionPolicy',
    'AviatrixGatewaySnatInterfacePolicy',
    'AviatrixGatewaySnatSnatPolicy',
    'AviatrixMicrosegPolicyListPolicy',
    'AviatrixMicrosegPolicyListPolicyPortRange',
    'AviatrixPrivateModeLbProxy',
    'AviatrixSite2CloudCaCertTagCaCertificate',
    'AviatrixTransitGatewayBgpLanInterface',
    'AviatrixTransitGatewayHaBgpLanInterface',
    'AviatrixVpcPrivateSubnet',
    'AviatrixVpcPublicSubnet',
    'AviatrixVpcSubnet',
    'AviatrixVpnProfilePolicy',
    'GetAviatrixDeviceInterfacesWanInterfaceResult',
    'GetAviatrixFirenetFirewallInstanceAssociationResult',
    'GetAviatrixFirewallInstanceImagesFirewallImageResult',
    'GetAviatrixFirewallPolicyResult',
    'GetAviatrixNetworkDomainsNetworkDomainResult',
    'GetAviatrixTransitGatewayBgpLanInterfaceResult',
    'GetAviatrixTransitGatewayHaBgpLanInterfaceResult',
    'GetAviatrixTransitGatewaysGatewayListResult',
    'GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceResult',
    'GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceResult',
    'GetAviatrixVpcPrivateSubnetResult',
    'GetAviatrixVpcPublicSubnetResult',
    'GetAviatrixVpcSubnetResult',
    'GetAviatrixVpcTrackerVpcListResult',
    'GetAviatrixVpcTrackerVpcListSubnetResult',
]

@pulumi.output_type
class AviatrixAppDomainSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAppDomainSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAppDomainSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAppDomainSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Sequence['outputs.AviatrixAppDomainSelectorMatchExpression']):
        pulumi.set(__self__, "match_expressions", match_expressions)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Sequence['outputs.AviatrixAppDomainSelectorMatchExpression']:
        return pulumi.get(self, "match_expressions")


@pulumi.output_type
class AviatrixAppDomainSelectorMatchExpression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "accountName":
            suggest = "account_name"
        elif key == "resId":
            suggest = "res_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAppDomainSelectorMatchExpression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAppDomainSelectorMatchExpression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAppDomainSelectorMatchExpression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 account_name: Optional[str] = None,
                 cidr: Optional[str] = None,
                 region: Optional[str] = None,
                 res_id: Optional[str] = None,
                 tags: Optional[Mapping[str, str]] = None,
                 type: Optional[str] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if res_id is not None:
            pulumi.set(__self__, "res_id", res_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resId")
    def res_id(self) -> Optional[str]:
        return pulumi.get(self, "res_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class AviatrixAwsTgwSecurityDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityDomainName":
            suggest = "security_domain_name"
        elif key == "attachedVpcs":
            suggest = "attached_vpcs"
        elif key == "aviatrixFirewall":
            suggest = "aviatrix_firewall"
        elif key == "connectedDomains":
            suggest = "connected_domains"
        elif key == "nativeEgress":
            suggest = "native_egress"
        elif key == "nativeFirewall":
            suggest = "native_firewall"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAwsTgwSecurityDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAwsTgwSecurityDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAwsTgwSecurityDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_domain_name: str,
                 attached_vpcs: Optional[Sequence['outputs.AviatrixAwsTgwSecurityDomainAttachedVpc']] = None,
                 aviatrix_firewall: Optional[bool] = None,
                 connected_domains: Optional[Sequence[str]] = None,
                 native_egress: Optional[bool] = None,
                 native_firewall: Optional[bool] = None):
        pulumi.set(__self__, "security_domain_name", security_domain_name)
        if attached_vpcs is not None:
            pulumi.set(__self__, "attached_vpcs", attached_vpcs)
        if aviatrix_firewall is not None:
            pulumi.set(__self__, "aviatrix_firewall", aviatrix_firewall)
        if connected_domains is not None:
            pulumi.set(__self__, "connected_domains", connected_domains)
        if native_egress is not None:
            pulumi.set(__self__, "native_egress", native_egress)
        if native_firewall is not None:
            pulumi.set(__self__, "native_firewall", native_firewall)

    @property
    @pulumi.getter(name="securityDomainName")
    def security_domain_name(self) -> str:
        return pulumi.get(self, "security_domain_name")

    @property
    @pulumi.getter(name="attachedVpcs")
    def attached_vpcs(self) -> Optional[Sequence['outputs.AviatrixAwsTgwSecurityDomainAttachedVpc']]:
        return pulumi.get(self, "attached_vpcs")

    @property
    @pulumi.getter(name="aviatrixFirewall")
    def aviatrix_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "aviatrix_firewall")

    @property
    @pulumi.getter(name="connectedDomains")
    def connected_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "connected_domains")

    @property
    @pulumi.getter(name="nativeEgress")
    def native_egress(self) -> Optional[bool]:
        return pulumi.get(self, "native_egress")

    @property
    @pulumi.getter(name="nativeFirewall")
    def native_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "native_firewall")


@pulumi.output_type
class AviatrixAwsTgwSecurityDomainAttachedVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcAccountName":
            suggest = "vpc_account_name"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "vpcRegion":
            suggest = "vpc_region"
        elif key == "customizedRouteAdvertisement":
            suggest = "customized_route_advertisement"
        elif key == "customizedRoutes":
            suggest = "customized_routes"
        elif key == "disableLocalRoutePropagation":
            suggest = "disable_local_route_propagation"
        elif key == "routeTables":
            suggest = "route_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAwsTgwSecurityDomainAttachedVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAwsTgwSecurityDomainAttachedVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAwsTgwSecurityDomainAttachedVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_account_name: str,
                 vpc_id: str,
                 vpc_region: str,
                 customized_route_advertisement: Optional[str] = None,
                 customized_routes: Optional[str] = None,
                 disable_local_route_propagation: Optional[bool] = None,
                 route_tables: Optional[str] = None,
                 subnets: Optional[str] = None):
        pulumi.set(__self__, "vpc_account_name", vpc_account_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_region", vpc_region)
        if customized_route_advertisement is not None:
            pulumi.set(__self__, "customized_route_advertisement", customized_route_advertisement)
        if customized_routes is not None:
            pulumi.set(__self__, "customized_routes", customized_routes)
        if disable_local_route_propagation is not None:
            pulumi.set(__self__, "disable_local_route_propagation", disable_local_route_propagation)
        if route_tables is not None:
            pulumi.set(__self__, "route_tables", route_tables)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="vpcAccountName")
    def vpc_account_name(self) -> str:
        return pulumi.get(self, "vpc_account_name")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcRegion")
    def vpc_region(self) -> str:
        return pulumi.get(self, "vpc_region")

    @property
    @pulumi.getter(name="customizedRouteAdvertisement")
    def customized_route_advertisement(self) -> Optional[str]:
        return pulumi.get(self, "customized_route_advertisement")

    @property
    @pulumi.getter(name="customizedRoutes")
    def customized_routes(self) -> Optional[str]:
        return pulumi.get(self, "customized_routes")

    @property
    @pulumi.getter(name="disableLocalRoutePropagation")
    def disable_local_route_propagation(self) -> Optional[bool]:
        return pulumi.get(self, "disable_local_route_propagation")

    @property
    @pulumi.getter(name="routeTables")
    def route_tables(self) -> Optional[str]:
        return pulumi.get(self, "route_tables")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[str]:
        return pulumi.get(self, "subnets")


@pulumi.output_type
class AviatrixAwsTgwVpnConnVpnTunnelData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastStatusChangeTime":
            suggest = "last_status_change_time"
        elif key == "routeCount":
            suggest = "route_count"
        elif key == "statusMessage":
            suggest = "status_message"
        elif key == "tgwAsn":
            suggest = "tgw_asn"
        elif key == "tunnelName":
            suggest = "tunnel_name"
        elif key == "vpnInsideAddress":
            suggest = "vpn_inside_address"
        elif key == "vpnOutsideAddress":
            suggest = "vpn_outside_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixAwsTgwVpnConnVpnTunnelData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixAwsTgwVpnConnVpnTunnelData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixAwsTgwVpnConnVpnTunnelData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_status_change_time: Optional[str] = None,
                 route_count: Optional[int] = None,
                 status: Optional[str] = None,
                 status_message: Optional[str] = None,
                 tgw_asn: Optional[str] = None,
                 tunnel_name: Optional[str] = None,
                 vpn_inside_address: Optional[str] = None,
                 vpn_outside_address: Optional[str] = None):
        if last_status_change_time is not None:
            pulumi.set(__self__, "last_status_change_time", last_status_change_time)
        if route_count is not None:
            pulumi.set(__self__, "route_count", route_count)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if tgw_asn is not None:
            pulumi.set(__self__, "tgw_asn", tgw_asn)
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)
        if vpn_inside_address is not None:
            pulumi.set(__self__, "vpn_inside_address", vpn_inside_address)
        if vpn_outside_address is not None:
            pulumi.set(__self__, "vpn_outside_address", vpn_outside_address)

    @property
    @pulumi.getter(name="lastStatusChangeTime")
    def last_status_change_time(self) -> Optional[str]:
        return pulumi.get(self, "last_status_change_time")

    @property
    @pulumi.getter(name="routeCount")
    def route_count(self) -> Optional[int]:
        return pulumi.get(self, "route_count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="tgwAsn")
    def tgw_asn(self) -> Optional[str]:
        return pulumi.get(self, "tgw_asn")

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_name")

    @property
    @pulumi.getter(name="vpnInsideAddress")
    def vpn_inside_address(self) -> Optional[str]:
        return pulumi.get(self, "vpn_inside_address")

    @property
    @pulumi.getter(name="vpnOutsideAddress")
    def vpn_outside_address(self) -> Optional[str]:
        return pulumi.get(self, "vpn_outside_address")


@pulumi.output_type
class AviatrixFirenetFirewallInstanceAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firenetGwName":
            suggest = "firenet_gw_name"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "egressInterface":
            suggest = "egress_interface"
        elif key == "firewallName":
            suggest = "firewall_name"
        elif key == "lanInterface":
            suggest = "lan_interface"
        elif key == "managementInterface":
            suggest = "management_interface"
        elif key == "vendorType":
            suggest = "vendor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixFirenetFirewallInstanceAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixFirenetFirewallInstanceAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixFirenetFirewallInstanceAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 firenet_gw_name: str,
                 instance_id: str,
                 attached: Optional[bool] = None,
                 egress_interface: Optional[str] = None,
                 firewall_name: Optional[str] = None,
                 lan_interface: Optional[str] = None,
                 management_interface: Optional[str] = None,
                 vendor_type: Optional[str] = None):
        pulumi.set(__self__, "firenet_gw_name", firenet_gw_name)
        pulumi.set(__self__, "instance_id", instance_id)
        if attached is not None:
            pulumi.set(__self__, "attached", attached)
        if egress_interface is not None:
            pulumi.set(__self__, "egress_interface", egress_interface)
        if firewall_name is not None:
            pulumi.set(__self__, "firewall_name", firewall_name)
        if lan_interface is not None:
            pulumi.set(__self__, "lan_interface", lan_interface)
        if management_interface is not None:
            pulumi.set(__self__, "management_interface", management_interface)
        if vendor_type is not None:
            pulumi.set(__self__, "vendor_type", vendor_type)

    @property
    @pulumi.getter(name="firenetGwName")
    def firenet_gw_name(self) -> str:
        return pulumi.get(self, "firenet_gw_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def attached(self) -> Optional[bool]:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter(name="egressInterface")
    def egress_interface(self) -> Optional[str]:
        return pulumi.get(self, "egress_interface")

    @property
    @pulumi.getter(name="firewallName")
    def firewall_name(self) -> Optional[str]:
        return pulumi.get(self, "firewall_name")

    @property
    @pulumi.getter(name="lanInterface")
    def lan_interface(self) -> Optional[str]:
        return pulumi.get(self, "lan_interface")

    @property
    @pulumi.getter(name="managementInterface")
    def management_interface(self) -> Optional[str]:
        return pulumi.get(self, "management_interface")

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> Optional[str]:
        return pulumi.get(self, "vendor_type")


@pulumi.output_type
class AviatrixFirewallPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIp":
            suggest = "dst_ip"
        elif key == "srcIp":
            suggest = "src_ip"
        elif key == "logEnabled":
            suggest = "log_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixFirewallPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixFirewallPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixFirewallPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 dst_ip: str,
                 port: str,
                 src_ip: str,
                 description: Optional[str] = None,
                 log_enabled: Optional[bool] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "dst_ip", dst_ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "src_ip", src_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if log_enabled is not None:
            pulumi.set(__self__, "log_enabled", log_enabled)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> str:
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "log_enabled")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class AviatrixFirewallTagCidrList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrTagName":
            suggest = "cidr_tag_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixFirewallTagCidrList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixFirewallTagCidrList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixFirewallTagCidrList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: str,
                 cidr_tag_name: str):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "cidr_tag_name", cidr_tag_name)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="cidrTagName")
    def cidr_tag_name(self) -> str:
        return pulumi.get(self, "cidr_tag_name")


@pulumi.output_type
class AviatrixFqdnDomainName(dict):
    def __init__(__self__, *,
                 fqdn: str,
                 port: str,
                 proto: str,
                 action: Optional[str] = None):
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proto", proto)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def proto(self) -> str:
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")


@pulumi.output_type
class AviatrixFqdnGwFilterTagList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gwName":
            suggest = "gw_name"
        elif key == "sourceIpLists":
            suggest = "source_ip_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixFqdnGwFilterTagList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixFqdnGwFilterTagList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixFqdnGwFilterTagList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gw_name: str,
                 source_ip_lists: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "gw_name", gw_name)
        if source_ip_lists is not None:
            pulumi.set(__self__, "source_ip_lists", source_ip_lists)

    @property
    @pulumi.getter(name="gwName")
    def gw_name(self) -> str:
        return pulumi.get(self, "gw_name")

    @property
    @pulumi.getter(name="sourceIpLists")
    def source_ip_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ip_lists")


@pulumi.output_type
class AviatrixGatewayDnatConnectionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyRouteEntry":
            suggest = "apply_route_entry"
        elif key == "dnatIps":
            suggest = "dnat_ips"
        elif key == "dnatPort":
            suggest = "dnat_port"
        elif key == "dstCidr":
            suggest = "dst_cidr"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "excludeRtb":
            suggest = "exclude_rtb"
        elif key == "srcCidr":
            suggest = "src_cidr"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixGatewayDnatConnectionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixGatewayDnatConnectionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixGatewayDnatConnectionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_route_entry: Optional[bool] = None,
                 connection: Optional[str] = None,
                 dnat_ips: Optional[str] = None,
                 dnat_port: Optional[str] = None,
                 dst_cidr: Optional[str] = None,
                 dst_port: Optional[str] = None,
                 exclude_rtb: Optional[str] = None,
                 interface: Optional[str] = None,
                 mark: Optional[str] = None,
                 protocol: Optional[str] = None,
                 src_cidr: Optional[str] = None,
                 src_port: Optional[str] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dnat_ips is not None:
            pulumi.set(__self__, "dnat_ips", dnat_ips)
        if dnat_port is not None:
            pulumi.set(__self__, "dnat_port", dnat_port)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[bool]:
        return pulumi.get(self, "apply_route_entry")

    @property
    @pulumi.getter
    def connection(self) -> Optional[str]:
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="dnatIps")
    def dnat_ips(self) -> Optional[str]:
        return pulumi.get(self, "dnat_ips")

    @property
    @pulumi.getter(name="dnatPort")
    def dnat_port(self) -> Optional[str]:
        return pulumi.get(self, "dnat_port")

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[str]:
        return pulumi.get(self, "dst_cidr")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[str]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[str]:
        return pulumi.get(self, "exclude_rtb")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def mark(self) -> Optional[str]:
        return pulumi.get(self, "mark")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[str]:
        return pulumi.get(self, "src_cidr")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[str]:
        return pulumi.get(self, "src_port")


@pulumi.output_type
class AviatrixGatewayDnatDnatPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyRouteEntry":
            suggest = "apply_route_entry"
        elif key == "dnatIps":
            suggest = "dnat_ips"
        elif key == "dnatPort":
            suggest = "dnat_port"
        elif key == "dstCidr":
            suggest = "dst_cidr"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "excludeRtb":
            suggest = "exclude_rtb"
        elif key == "srcCidr":
            suggest = "src_cidr"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixGatewayDnatDnatPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixGatewayDnatDnatPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixGatewayDnatDnatPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_route_entry: Optional[bool] = None,
                 connection: Optional[str] = None,
                 dnat_ips: Optional[str] = None,
                 dnat_port: Optional[str] = None,
                 dst_cidr: Optional[str] = None,
                 dst_port: Optional[str] = None,
                 exclude_rtb: Optional[str] = None,
                 interface: Optional[str] = None,
                 mark: Optional[str] = None,
                 protocol: Optional[str] = None,
                 src_cidr: Optional[str] = None,
                 src_port: Optional[str] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dnat_ips is not None:
            pulumi.set(__self__, "dnat_ips", dnat_ips)
        if dnat_port is not None:
            pulumi.set(__self__, "dnat_port", dnat_port)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[bool]:
        return pulumi.get(self, "apply_route_entry")

    @property
    @pulumi.getter
    def connection(self) -> Optional[str]:
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="dnatIps")
    def dnat_ips(self) -> Optional[str]:
        return pulumi.get(self, "dnat_ips")

    @property
    @pulumi.getter(name="dnatPort")
    def dnat_port(self) -> Optional[str]:
        return pulumi.get(self, "dnat_port")

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[str]:
        return pulumi.get(self, "dst_cidr")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[str]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[str]:
        return pulumi.get(self, "exclude_rtb")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def mark(self) -> Optional[str]:
        return pulumi.get(self, "mark")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[str]:
        return pulumi.get(self, "src_cidr")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[str]:
        return pulumi.get(self, "src_port")


@pulumi.output_type
class AviatrixGatewayDnatInterfacePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyRouteEntry":
            suggest = "apply_route_entry"
        elif key == "dnatIps":
            suggest = "dnat_ips"
        elif key == "dnatPort":
            suggest = "dnat_port"
        elif key == "dstCidr":
            suggest = "dst_cidr"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "excludeRtb":
            suggest = "exclude_rtb"
        elif key == "srcCidr":
            suggest = "src_cidr"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixGatewayDnatInterfacePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixGatewayDnatInterfacePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixGatewayDnatInterfacePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_route_entry: Optional[bool] = None,
                 connection: Optional[str] = None,
                 dnat_ips: Optional[str] = None,
                 dnat_port: Optional[str] = None,
                 dst_cidr: Optional[str] = None,
                 dst_port: Optional[str] = None,
                 exclude_rtb: Optional[str] = None,
                 interface: Optional[str] = None,
                 mark: Optional[str] = None,
                 protocol: Optional[str] = None,
                 src_cidr: Optional[str] = None,
                 src_port: Optional[str] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dnat_ips is not None:
            pulumi.set(__self__, "dnat_ips", dnat_ips)
        if dnat_port is not None:
            pulumi.set(__self__, "dnat_port", dnat_port)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[bool]:
        return pulumi.get(self, "apply_route_entry")

    @property
    @pulumi.getter
    def connection(self) -> Optional[str]:
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="dnatIps")
    def dnat_ips(self) -> Optional[str]:
        return pulumi.get(self, "dnat_ips")

    @property
    @pulumi.getter(name="dnatPort")
    def dnat_port(self) -> Optional[str]:
        return pulumi.get(self, "dnat_port")

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[str]:
        return pulumi.get(self, "dst_cidr")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[str]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[str]:
        return pulumi.get(self, "exclude_rtb")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def mark(self) -> Optional[str]:
        return pulumi.get(self, "mark")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[str]:
        return pulumi.get(self, "src_cidr")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[str]:
        return pulumi.get(self, "src_port")


@pulumi.output_type
class AviatrixGatewaySnatConnectionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyRouteEntry":
            suggest = "apply_route_entry"
        elif key == "dstCidr":
            suggest = "dst_cidr"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "excludeRtb":
            suggest = "exclude_rtb"
        elif key == "snatIps":
            suggest = "snat_ips"
        elif key == "snatPort":
            suggest = "snat_port"
        elif key == "srcCidr":
            suggest = "src_cidr"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixGatewaySnatConnectionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixGatewaySnatConnectionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixGatewaySnatConnectionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_route_entry: Optional[bool] = None,
                 connection: Optional[str] = None,
                 dst_cidr: Optional[str] = None,
                 dst_port: Optional[str] = None,
                 exclude_rtb: Optional[str] = None,
                 interface: Optional[str] = None,
                 mark: Optional[str] = None,
                 protocol: Optional[str] = None,
                 snat_ips: Optional[str] = None,
                 snat_port: Optional[str] = None,
                 src_cidr: Optional[str] = None,
                 src_port: Optional[str] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if snat_ips is not None:
            pulumi.set(__self__, "snat_ips", snat_ips)
        if snat_port is not None:
            pulumi.set(__self__, "snat_port", snat_port)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[bool]:
        return pulumi.get(self, "apply_route_entry")

    @property
    @pulumi.getter
    def connection(self) -> Optional[str]:
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[str]:
        return pulumi.get(self, "dst_cidr")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[str]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[str]:
        return pulumi.get(self, "exclude_rtb")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def mark(self) -> Optional[str]:
        return pulumi.get(self, "mark")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Optional[str]:
        return pulumi.get(self, "snat_ips")

    @property
    @pulumi.getter(name="snatPort")
    def snat_port(self) -> Optional[str]:
        return pulumi.get(self, "snat_port")

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[str]:
        return pulumi.get(self, "src_cidr")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[str]:
        return pulumi.get(self, "src_port")


@pulumi.output_type
class AviatrixGatewaySnatInterfacePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyRouteEntry":
            suggest = "apply_route_entry"
        elif key == "dstCidr":
            suggest = "dst_cidr"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "excludeRtb":
            suggest = "exclude_rtb"
        elif key == "snatIps":
            suggest = "snat_ips"
        elif key == "snatPort":
            suggest = "snat_port"
        elif key == "srcCidr":
            suggest = "src_cidr"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixGatewaySnatInterfacePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixGatewaySnatInterfacePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixGatewaySnatInterfacePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_route_entry: Optional[bool] = None,
                 connection: Optional[str] = None,
                 dst_cidr: Optional[str] = None,
                 dst_port: Optional[str] = None,
                 exclude_rtb: Optional[str] = None,
                 interface: Optional[str] = None,
                 mark: Optional[str] = None,
                 protocol: Optional[str] = None,
                 snat_ips: Optional[str] = None,
                 snat_port: Optional[str] = None,
                 src_cidr: Optional[str] = None,
                 src_port: Optional[str] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if snat_ips is not None:
            pulumi.set(__self__, "snat_ips", snat_ips)
        if snat_port is not None:
            pulumi.set(__self__, "snat_port", snat_port)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[bool]:
        return pulumi.get(self, "apply_route_entry")

    @property
    @pulumi.getter
    def connection(self) -> Optional[str]:
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[str]:
        return pulumi.get(self, "dst_cidr")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[str]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[str]:
        return pulumi.get(self, "exclude_rtb")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def mark(self) -> Optional[str]:
        return pulumi.get(self, "mark")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Optional[str]:
        return pulumi.get(self, "snat_ips")

    @property
    @pulumi.getter(name="snatPort")
    def snat_port(self) -> Optional[str]:
        return pulumi.get(self, "snat_port")

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[str]:
        return pulumi.get(self, "src_cidr")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[str]:
        return pulumi.get(self, "src_port")


@pulumi.output_type
class AviatrixGatewaySnatSnatPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyRouteEntry":
            suggest = "apply_route_entry"
        elif key == "dstCidr":
            suggest = "dst_cidr"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "excludeRtb":
            suggest = "exclude_rtb"
        elif key == "snatIps":
            suggest = "snat_ips"
        elif key == "snatPort":
            suggest = "snat_port"
        elif key == "srcCidr":
            suggest = "src_cidr"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixGatewaySnatSnatPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixGatewaySnatSnatPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixGatewaySnatSnatPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_route_entry: Optional[bool] = None,
                 connection: Optional[str] = None,
                 dst_cidr: Optional[str] = None,
                 dst_port: Optional[str] = None,
                 exclude_rtb: Optional[str] = None,
                 interface: Optional[str] = None,
                 mark: Optional[str] = None,
                 protocol: Optional[str] = None,
                 snat_ips: Optional[str] = None,
                 snat_port: Optional[str] = None,
                 src_cidr: Optional[str] = None,
                 src_port: Optional[str] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if snat_ips is not None:
            pulumi.set(__self__, "snat_ips", snat_ips)
        if snat_port is not None:
            pulumi.set(__self__, "snat_port", snat_port)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[bool]:
        return pulumi.get(self, "apply_route_entry")

    @property
    @pulumi.getter
    def connection(self) -> Optional[str]:
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[str]:
        return pulumi.get(self, "dst_cidr")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[str]:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[str]:
        return pulumi.get(self, "exclude_rtb")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def mark(self) -> Optional[str]:
        return pulumi.get(self, "mark")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Optional[str]:
        return pulumi.get(self, "snat_ips")

    @property
    @pulumi.getter(name="snatPort")
    def snat_port(self) -> Optional[str]:
        return pulumi.get(self, "snat_port")

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[str]:
        return pulumi.get(self, "src_cidr")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[str]:
        return pulumi.get(self, "src_port")


@pulumi.output_type
class AviatrixMicrosegPolicyListPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstAppDomains":
            suggest = "dst_app_domains"
        elif key == "srcAppDomains":
            suggest = "src_app_domains"
        elif key == "portRanges":
            suggest = "port_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixMicrosegPolicyListPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixMicrosegPolicyListPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixMicrosegPolicyListPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 dst_app_domains: Sequence[str],
                 name: str,
                 protocol: str,
                 src_app_domains: Sequence[str],
                 logging: Optional[bool] = None,
                 port_ranges: Optional[Sequence['outputs.AviatrixMicrosegPolicyListPolicyPortRange']] = None,
                 priority: Optional[int] = None,
                 uuid: Optional[str] = None,
                 watch: Optional[bool] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "dst_app_domains", dst_app_domains)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "src_app_domains", src_app_domains)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if watch is not None:
            pulumi.set(__self__, "watch", watch)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="dstAppDomains")
    def dst_app_domains(self) -> Sequence[str]:
        return pulumi.get(self, "dst_app_domains")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcAppDomains")
    def src_app_domains(self) -> Sequence[str]:
        return pulumi.get(self, "src_app_domains")

    @property
    @pulumi.getter
    def logging(self) -> Optional[bool]:
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[Sequence['outputs.AviatrixMicrosegPolicyListPolicyPortRange']]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def watch(self) -> Optional[bool]:
        return pulumi.get(self, "watch")


@pulumi.output_type
class AviatrixMicrosegPolicyListPolicyPortRange(dict):
    def __init__(__self__, *,
                 lo: int,
                 hi: Optional[int] = None):
        pulumi.set(__self__, "lo", lo)
        if hi is not None:
            pulumi.set(__self__, "hi", hi)

    @property
    @pulumi.getter
    def lo(self) -> int:
        return pulumi.get(self, "lo")

    @property
    @pulumi.getter
    def hi(self) -> Optional[int]:
        return pulumi.get(self, "hi")


@pulumi.output_type
class AviatrixPrivateModeLbProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixPrivateModeLbProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixPrivateModeLbProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixPrivateModeLbProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 vpc_id: str):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class AviatrixSite2CloudCaCertTagCaCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certContent":
            suggest = "cert_content"
        elif key == "commonName":
            suggest = "common_name"
        elif key == "expirationTime":
            suggest = "expiration_time"
        elif key == "issuerName":
            suggest = "issuer_name"
        elif key == "uniqueSerial":
            suggest = "unique_serial"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixSite2CloudCaCertTagCaCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixSite2CloudCaCertTagCaCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixSite2CloudCaCertTagCaCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_content: str,
                 common_name: Optional[str] = None,
                 expiration_time: Optional[str] = None,
                 id: Optional[str] = None,
                 issuer_name: Optional[str] = None,
                 unique_serial: Optional[str] = None):
        pulumi.set(__self__, "cert_content", cert_content)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if issuer_name is not None:
            pulumi.set(__self__, "issuer_name", issuer_name)
        if unique_serial is not None:
            pulumi.set(__self__, "unique_serial", unique_serial)

    @property
    @pulumi.getter(name="certContent")
    def cert_content(self) -> str:
        return pulumi.get(self, "cert_content")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuerName")
    def issuer_name(self) -> Optional[str]:
        return pulumi.get(self, "issuer_name")

    @property
    @pulumi.getter(name="uniqueSerial")
    def unique_serial(self) -> Optional[str]:
        return pulumi.get(self, "unique_serial")


@pulumi.output_type
class AviatrixTransitGatewayBgpLanInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixTransitGatewayBgpLanInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixTransitGatewayBgpLanInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixTransitGatewayBgpLanInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet: str,
                 vpc_id: str):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class AviatrixTransitGatewayHaBgpLanInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixTransitGatewayHaBgpLanInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixTransitGatewayHaBgpLanInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixTransitGatewayHaBgpLanInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet: str,
                 vpc_id: str):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class AviatrixVpcPrivateSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixVpcPrivateSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixVpcPrivateSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixVpcPrivateSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: Optional[str] = None,
                 name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class AviatrixVpcPublicSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixVpcPublicSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixVpcPublicSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixVpcPublicSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: Optional[str] = None,
                 name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class AviatrixVpcSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AviatrixVpcSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AviatrixVpcSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AviatrixVpcSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: Optional[str] = None,
                 name: Optional[str] = None,
                 region: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class AviatrixVpnProfilePolicy(dict):
    def __init__(__self__, *,
                 action: str,
                 port: str,
                 proto: str,
                 target: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proto", proto)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def proto(self) -> str:
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetAviatrixDeviceInterfacesWanInterfaceResult(dict):
    def __init__(__self__, *,
                 wan_primary_interface: str,
                 wan_primary_interface_public_ip: str):
        pulumi.set(__self__, "wan_primary_interface", wan_primary_interface)
        pulumi.set(__self__, "wan_primary_interface_public_ip", wan_primary_interface_public_ip)

    @property
    @pulumi.getter(name="wanPrimaryInterface")
    def wan_primary_interface(self) -> str:
        return pulumi.get(self, "wan_primary_interface")

    @property
    @pulumi.getter(name="wanPrimaryInterfacePublicIp")
    def wan_primary_interface_public_ip(self) -> str:
        return pulumi.get(self, "wan_primary_interface_public_ip")


@pulumi.output_type
class GetAviatrixFirenetFirewallInstanceAssociationResult(dict):
    def __init__(__self__, *,
                 attached: bool,
                 egress_interface: str,
                 firenet_gw_name: str,
                 firewall_name: str,
                 instance_id: str,
                 lan_interface: str,
                 management_interface: str,
                 vendor_type: str):
        pulumi.set(__self__, "attached", attached)
        pulumi.set(__self__, "egress_interface", egress_interface)
        pulumi.set(__self__, "firenet_gw_name", firenet_gw_name)
        pulumi.set(__self__, "firewall_name", firewall_name)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "lan_interface", lan_interface)
        pulumi.set(__self__, "management_interface", management_interface)
        pulumi.set(__self__, "vendor_type", vendor_type)

    @property
    @pulumi.getter
    def attached(self) -> bool:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter(name="egressInterface")
    def egress_interface(self) -> str:
        return pulumi.get(self, "egress_interface")

    @property
    @pulumi.getter(name="firenetGwName")
    def firenet_gw_name(self) -> str:
        return pulumi.get(self, "firenet_gw_name")

    @property
    @pulumi.getter(name="firewallName")
    def firewall_name(self) -> str:
        return pulumi.get(self, "firewall_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="lanInterface")
    def lan_interface(self) -> str:
        return pulumi.get(self, "lan_interface")

    @property
    @pulumi.getter(name="managementInterface")
    def management_interface(self) -> str:
        return pulumi.get(self, "management_interface")

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> str:
        return pulumi.get(self, "vendor_type")


@pulumi.output_type
class GetAviatrixFirewallInstanceImagesFirewallImageResult(dict):
    def __init__(__self__, *,
                 firewall_image: str,
                 firewall_image_versions: Sequence[str],
                 firewall_sizes: Sequence[str]):
        pulumi.set(__self__, "firewall_image", firewall_image)
        pulumi.set(__self__, "firewall_image_versions", firewall_image_versions)
        pulumi.set(__self__, "firewall_sizes", firewall_sizes)

    @property
    @pulumi.getter(name="firewallImage")
    def firewall_image(self) -> str:
        return pulumi.get(self, "firewall_image")

    @property
    @pulumi.getter(name="firewallImageVersions")
    def firewall_image_versions(self) -> Sequence[str]:
        return pulumi.get(self, "firewall_image_versions")

    @property
    @pulumi.getter(name="firewallSizes")
    def firewall_sizes(self) -> Sequence[str]:
        return pulumi.get(self, "firewall_sizes")


@pulumi.output_type
class GetAviatrixFirewallPolicyResult(dict):
    def __init__(__self__, *,
                 action: str,
                 description: str,
                 dst_ip: str,
                 log_enabled: bool,
                 port: str,
                 protocol: str,
                 src_ip: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dst_ip", dst_ip)
        pulumi.set(__self__, "log_enabled", log_enabled)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> str:
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> bool:
        return pulumi.get(self, "log_enabled")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")


@pulumi.output_type
class GetAviatrixNetworkDomainsNetworkDomainResult(dict):
    def __init__(__self__, *,
                 account: str,
                 cloud_type: str,
                 egress_inspection: bool,
                 egress_inspection_name: str,
                 inspection_policy: str,
                 intra_domain_inspection: bool,
                 intra_domain_inspection_name: str,
                 name: str,
                 region: str,
                 route_table_id: str,
                 tgw_name: str,
                 type: str):
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "egress_inspection", egress_inspection)
        pulumi.set(__self__, "egress_inspection_name", egress_inspection_name)
        pulumi.set(__self__, "inspection_policy", inspection_policy)
        pulumi.set(__self__, "intra_domain_inspection", intra_domain_inspection)
        pulumi.set(__self__, "intra_domain_inspection_name", intra_domain_inspection_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "tgw_name", tgw_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def account(self) -> str:
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> str:
        return pulumi.get(self, "cloud_type")

    @property
    @pulumi.getter(name="egressInspection")
    def egress_inspection(self) -> bool:
        return pulumi.get(self, "egress_inspection")

    @property
    @pulumi.getter(name="egressInspectionName")
    def egress_inspection_name(self) -> str:
        return pulumi.get(self, "egress_inspection_name")

    @property
    @pulumi.getter(name="inspectionPolicy")
    def inspection_policy(self) -> str:
        return pulumi.get(self, "inspection_policy")

    @property
    @pulumi.getter(name="intraDomainInspection")
    def intra_domain_inspection(self) -> bool:
        return pulumi.get(self, "intra_domain_inspection")

    @property
    @pulumi.getter(name="intraDomainInspectionName")
    def intra_domain_inspection_name(self) -> str:
        return pulumi.get(self, "intra_domain_inspection_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="tgwName")
    def tgw_name(self) -> str:
        return pulumi.get(self, "tgw_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAviatrixTransitGatewayBgpLanInterfaceResult(dict):
    def __init__(__self__, *,
                 subnet: str,
                 vpc_id: str):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetAviatrixTransitGatewayHaBgpLanInterfaceResult(dict):
    def __init__(__self__, *,
                 subnet: str,
                 vpc_id: str):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetAviatrixTransitGatewaysGatewayListResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 allocate_new_eip: bool,
                 availability_domain: str,
                 azure_eip_name_resource_group: str,
                 bgp_ecmp: bool,
                 bgp_hold_time: int,
                 bgp_lan_interfaces: Sequence['outputs.GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceResult'],
                 bgp_lan_ip_lists: Sequence[str],
                 bgp_polling_time: str,
                 cloud_instance_id: str,
                 cloud_type: int,
                 connected_transit: bool,
                 customized_spoke_vpc_routes: str,
                 enable_active_standby: bool,
                 enable_active_standby_preemptive: bool,
                 enable_bgp_over_lan: bool,
                 enable_encrypt_volume: bool,
                 enable_gateway_load_balancer: bool,
                 enable_hybrid_connection: bool,
                 enable_jumbo_frame: bool,
                 enable_monitor_gateway_subnets: bool,
                 enable_multi_tier_transit: bool,
                 enable_private_oob: bool,
                 enable_segmentation: bool,
                 enable_spot_instance: bool,
                 enable_transit_summarize_cidr_to_tgw: bool,
                 enable_vpc_dns_server: bool,
                 excluded_advertised_spoke_routes: str,
                 fault_domain: str,
                 filtered_spoke_vpc_routes: str,
                 gw_name: str,
                 gw_size: str,
                 ha_bgp_lan_interfaces: Sequence['outputs.GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceResult'],
                 ha_bgp_lan_ip_lists: Sequence[str],
                 image_version: str,
                 insane_mode: bool,
                 insane_mode_az: str,
                 lan_private_subnet: str,
                 lan_vpc_id: str,
                 learned_cidrs_approval_mode: str,
                 local_as_number: str,
                 monitor_exclude_lists: Sequence[str],
                 oob_availability_zone: str,
                 oob_management_subnet: str,
                 prepend_as_paths: Sequence[str],
                 private_ip: str,
                 public_ip: str,
                 security_group_id: str,
                 single_az_ha: bool,
                 single_ip_snat: bool,
                 software_version: str,
                 spot_price: str,
                 subnet: str,
                 tunnel_detection_time: int,
                 vpc_id: str,
                 vpc_reg: str,
                 zone: str):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "allocate_new_eip", allocate_new_eip)
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "azure_eip_name_resource_group", azure_eip_name_resource_group)
        pulumi.set(__self__, "bgp_ecmp", bgp_ecmp)
        pulumi.set(__self__, "bgp_hold_time", bgp_hold_time)
        pulumi.set(__self__, "bgp_lan_interfaces", bgp_lan_interfaces)
        pulumi.set(__self__, "bgp_lan_ip_lists", bgp_lan_ip_lists)
        pulumi.set(__self__, "bgp_polling_time", bgp_polling_time)
        pulumi.set(__self__, "cloud_instance_id", cloud_instance_id)
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "connected_transit", connected_transit)
        pulumi.set(__self__, "customized_spoke_vpc_routes", customized_spoke_vpc_routes)
        pulumi.set(__self__, "enable_active_standby", enable_active_standby)
        pulumi.set(__self__, "enable_active_standby_preemptive", enable_active_standby_preemptive)
        pulumi.set(__self__, "enable_bgp_over_lan", enable_bgp_over_lan)
        pulumi.set(__self__, "enable_encrypt_volume", enable_encrypt_volume)
        pulumi.set(__self__, "enable_gateway_load_balancer", enable_gateway_load_balancer)
        pulumi.set(__self__, "enable_hybrid_connection", enable_hybrid_connection)
        pulumi.set(__self__, "enable_jumbo_frame", enable_jumbo_frame)
        pulumi.set(__self__, "enable_monitor_gateway_subnets", enable_monitor_gateway_subnets)
        pulumi.set(__self__, "enable_multi_tier_transit", enable_multi_tier_transit)
        pulumi.set(__self__, "enable_private_oob", enable_private_oob)
        pulumi.set(__self__, "enable_segmentation", enable_segmentation)
        pulumi.set(__self__, "enable_spot_instance", enable_spot_instance)
        pulumi.set(__self__, "enable_transit_summarize_cidr_to_tgw", enable_transit_summarize_cidr_to_tgw)
        pulumi.set(__self__, "enable_vpc_dns_server", enable_vpc_dns_server)
        pulumi.set(__self__, "excluded_advertised_spoke_routes", excluded_advertised_spoke_routes)
        pulumi.set(__self__, "fault_domain", fault_domain)
        pulumi.set(__self__, "filtered_spoke_vpc_routes", filtered_spoke_vpc_routes)
        pulumi.set(__self__, "gw_name", gw_name)
        pulumi.set(__self__, "gw_size", gw_size)
        pulumi.set(__self__, "ha_bgp_lan_interfaces", ha_bgp_lan_interfaces)
        pulumi.set(__self__, "ha_bgp_lan_ip_lists", ha_bgp_lan_ip_lists)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "insane_mode", insane_mode)
        pulumi.set(__self__, "insane_mode_az", insane_mode_az)
        pulumi.set(__self__, "lan_private_subnet", lan_private_subnet)
        pulumi.set(__self__, "lan_vpc_id", lan_vpc_id)
        pulumi.set(__self__, "learned_cidrs_approval_mode", learned_cidrs_approval_mode)
        pulumi.set(__self__, "local_as_number", local_as_number)
        pulumi.set(__self__, "monitor_exclude_lists", monitor_exclude_lists)
        pulumi.set(__self__, "oob_availability_zone", oob_availability_zone)
        pulumi.set(__self__, "oob_management_subnet", oob_management_subnet)
        pulumi.set(__self__, "prepend_as_paths", prepend_as_paths)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "single_az_ha", single_az_ha)
        pulumi.set(__self__, "single_ip_snat", single_ip_snat)
        pulumi.set(__self__, "software_version", software_version)
        pulumi.set(__self__, "spot_price", spot_price)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "tunnel_detection_time", tunnel_detection_time)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_reg", vpc_reg)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="allocateNewEip")
    def allocate_new_eip(self) -> bool:
        return pulumi.get(self, "allocate_new_eip")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="azureEipNameResourceGroup")
    def azure_eip_name_resource_group(self) -> str:
        return pulumi.get(self, "azure_eip_name_resource_group")

    @property
    @pulumi.getter(name="bgpEcmp")
    def bgp_ecmp(self) -> bool:
        return pulumi.get(self, "bgp_ecmp")

    @property
    @pulumi.getter(name="bgpHoldTime")
    def bgp_hold_time(self) -> int:
        return pulumi.get(self, "bgp_hold_time")

    @property
    @pulumi.getter(name="bgpLanInterfaces")
    def bgp_lan_interfaces(self) -> Sequence['outputs.GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceResult']:
        return pulumi.get(self, "bgp_lan_interfaces")

    @property
    @pulumi.getter(name="bgpLanIpLists")
    def bgp_lan_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "bgp_lan_ip_lists")

    @property
    @pulumi.getter(name="bgpPollingTime")
    def bgp_polling_time(self) -> str:
        return pulumi.get(self, "bgp_polling_time")

    @property
    @pulumi.getter(name="cloudInstanceId")
    def cloud_instance_id(self) -> str:
        return pulumi.get(self, "cloud_instance_id")

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> int:
        return pulumi.get(self, "cloud_type")

    @property
    @pulumi.getter(name="connectedTransit")
    def connected_transit(self) -> bool:
        return pulumi.get(self, "connected_transit")

    @property
    @pulumi.getter(name="customizedSpokeVpcRoutes")
    def customized_spoke_vpc_routes(self) -> str:
        return pulumi.get(self, "customized_spoke_vpc_routes")

    @property
    @pulumi.getter(name="enableActiveStandby")
    def enable_active_standby(self) -> bool:
        return pulumi.get(self, "enable_active_standby")

    @property
    @pulumi.getter(name="enableActiveStandbyPreemptive")
    def enable_active_standby_preemptive(self) -> bool:
        return pulumi.get(self, "enable_active_standby_preemptive")

    @property
    @pulumi.getter(name="enableBgpOverLan")
    def enable_bgp_over_lan(self) -> bool:
        return pulumi.get(self, "enable_bgp_over_lan")

    @property
    @pulumi.getter(name="enableEncryptVolume")
    def enable_encrypt_volume(self) -> bool:
        return pulumi.get(self, "enable_encrypt_volume")

    @property
    @pulumi.getter(name="enableGatewayLoadBalancer")
    def enable_gateway_load_balancer(self) -> bool:
        return pulumi.get(self, "enable_gateway_load_balancer")

    @property
    @pulumi.getter(name="enableHybridConnection")
    def enable_hybrid_connection(self) -> bool:
        return pulumi.get(self, "enable_hybrid_connection")

    @property
    @pulumi.getter(name="enableJumboFrame")
    def enable_jumbo_frame(self) -> bool:
        return pulumi.get(self, "enable_jumbo_frame")

    @property
    @pulumi.getter(name="enableMonitorGatewaySubnets")
    def enable_monitor_gateway_subnets(self) -> bool:
        return pulumi.get(self, "enable_monitor_gateway_subnets")

    @property
    @pulumi.getter(name="enableMultiTierTransit")
    def enable_multi_tier_transit(self) -> bool:
        return pulumi.get(self, "enable_multi_tier_transit")

    @property
    @pulumi.getter(name="enablePrivateOob")
    def enable_private_oob(self) -> bool:
        return pulumi.get(self, "enable_private_oob")

    @property
    @pulumi.getter(name="enableSegmentation")
    def enable_segmentation(self) -> bool:
        return pulumi.get(self, "enable_segmentation")

    @property
    @pulumi.getter(name="enableSpotInstance")
    def enable_spot_instance(self) -> bool:
        return pulumi.get(self, "enable_spot_instance")

    @property
    @pulumi.getter(name="enableTransitSummarizeCidrToTgw")
    def enable_transit_summarize_cidr_to_tgw(self) -> bool:
        return pulumi.get(self, "enable_transit_summarize_cidr_to_tgw")

    @property
    @pulumi.getter(name="enableVpcDnsServer")
    def enable_vpc_dns_server(self) -> bool:
        return pulumi.get(self, "enable_vpc_dns_server")

    @property
    @pulumi.getter(name="excludedAdvertisedSpokeRoutes")
    def excluded_advertised_spoke_routes(self) -> str:
        return pulumi.get(self, "excluded_advertised_spoke_routes")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> str:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="filteredSpokeVpcRoutes")
    def filtered_spoke_vpc_routes(self) -> str:
        return pulumi.get(self, "filtered_spoke_vpc_routes")

    @property
    @pulumi.getter(name="gwName")
    def gw_name(self) -> str:
        return pulumi.get(self, "gw_name")

    @property
    @pulumi.getter(name="gwSize")
    def gw_size(self) -> str:
        return pulumi.get(self, "gw_size")

    @property
    @pulumi.getter(name="haBgpLanInterfaces")
    def ha_bgp_lan_interfaces(self) -> Sequence['outputs.GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceResult']:
        return pulumi.get(self, "ha_bgp_lan_interfaces")

    @property
    @pulumi.getter(name="haBgpLanIpLists")
    def ha_bgp_lan_ip_lists(self) -> Sequence[str]:
        return pulumi.get(self, "ha_bgp_lan_ip_lists")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="insaneMode")
    def insane_mode(self) -> bool:
        return pulumi.get(self, "insane_mode")

    @property
    @pulumi.getter(name="insaneModeAz")
    def insane_mode_az(self) -> str:
        return pulumi.get(self, "insane_mode_az")

    @property
    @pulumi.getter(name="lanPrivateSubnet")
    def lan_private_subnet(self) -> str:
        return pulumi.get(self, "lan_private_subnet")

    @property
    @pulumi.getter(name="lanVpcId")
    def lan_vpc_id(self) -> str:
        return pulumi.get(self, "lan_vpc_id")

    @property
    @pulumi.getter(name="learnedCidrsApprovalMode")
    def learned_cidrs_approval_mode(self) -> str:
        return pulumi.get(self, "learned_cidrs_approval_mode")

    @property
    @pulumi.getter(name="localAsNumber")
    def local_as_number(self) -> str:
        return pulumi.get(self, "local_as_number")

    @property
    @pulumi.getter(name="monitorExcludeLists")
    def monitor_exclude_lists(self) -> Sequence[str]:
        return pulumi.get(self, "monitor_exclude_lists")

    @property
    @pulumi.getter(name="oobAvailabilityZone")
    def oob_availability_zone(self) -> str:
        return pulumi.get(self, "oob_availability_zone")

    @property
    @pulumi.getter(name="oobManagementSubnet")
    def oob_management_subnet(self) -> str:
        return pulumi.get(self, "oob_management_subnet")

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> Sequence[str]:
        return pulumi.get(self, "prepend_as_paths")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="singleAzHa")
    def single_az_ha(self) -> bool:
        return pulumi.get(self, "single_az_ha")

    @property
    @pulumi.getter(name="singleIpSnat")
    def single_ip_snat(self) -> bool:
        return pulumi.get(self, "single_ip_snat")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> str:
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> str:
        return pulumi.get(self, "spot_price")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="tunnelDetectionTime")
    def tunnel_detection_time(self) -> int:
        return pulumi.get(self, "tunnel_detection_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcReg")
    def vpc_reg(self) -> str:
        return pulumi.get(self, "vpc_reg")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetAviatrixTransitGatewaysGatewayListBgpLanInterfaceResult(dict):
    def __init__(__self__, *,
                 subnet: str,
                 vpc_id: str):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetAviatrixTransitGatewaysGatewayListHaBgpLanInterfaceResult(dict):
    def __init__(__self__, *,
                 subnet: str,
                 vpc_id: str):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetAviatrixVpcPrivateSubnetResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 name: str,
                 subnet_id: str):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetAviatrixVpcPublicSubnetResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 name: str,
                 subnet_id: str):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetAviatrixVpcSubnetResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 name: str,
                 subnet_id: str):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetAviatrixVpcTrackerVpcListResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 cidr: str,
                 cloud_type: int,
                 instance_count: int,
                 name: str,
                 region: str,
                 subnets: Sequence['outputs.GetAviatrixVpcTrackerVpcListSubnetResult'],
                 vpc_id: str):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> int:
        return pulumi.get(self, "cloud_type")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetAviatrixVpcTrackerVpcListSubnetResult']:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetAviatrixVpcTrackerVpcListSubnetResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 gw_ip: str,
                 name: str,
                 region: str):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "gw_ip", gw_ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="gwIp")
    def gw_ip(self) -> str:
        return pulumi.get(self, "gw_ip")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


