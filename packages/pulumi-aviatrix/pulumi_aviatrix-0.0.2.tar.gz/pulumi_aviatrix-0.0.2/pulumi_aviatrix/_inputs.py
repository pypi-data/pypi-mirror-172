# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AviatrixAppDomainSelectorArgs',
    'AviatrixAppDomainSelectorMatchExpressionArgs',
    'AviatrixAwsTgwSecurityDomainArgs',
    'AviatrixAwsTgwSecurityDomainAttachedVpcArgs',
    'AviatrixAwsTgwVpnConnVpnTunnelDataArgs',
    'AviatrixFirenetFirewallInstanceAssociationArgs',
    'AviatrixFirewallPolicyArgs',
    'AviatrixFirewallTagCidrListArgs',
    'AviatrixFqdnDomainNameArgs',
    'AviatrixFqdnGwFilterTagListArgs',
    'AviatrixGatewayDnatConnectionPolicyArgs',
    'AviatrixGatewayDnatDnatPolicyArgs',
    'AviatrixGatewayDnatInterfacePolicyArgs',
    'AviatrixGatewaySnatConnectionPolicyArgs',
    'AviatrixGatewaySnatInterfacePolicyArgs',
    'AviatrixGatewaySnatSnatPolicyArgs',
    'AviatrixMicrosegPolicyListPolicyArgs',
    'AviatrixMicrosegPolicyListPolicyPortRangeArgs',
    'AviatrixPrivateModeLbProxyArgs',
    'AviatrixSite2CloudCaCertTagCaCertificateArgs',
    'AviatrixTransitGatewayBgpLanInterfaceArgs',
    'AviatrixTransitGatewayHaBgpLanInterfaceArgs',
    'AviatrixVpcPrivateSubnetArgs',
    'AviatrixVpcPublicSubnetArgs',
    'AviatrixVpcSubnetArgs',
    'AviatrixVpnProfilePolicyArgs',
    'ProviderIgnoreTagsArgs',
    'GetAviatrixFirenetFirewallInstanceAssociationArgs',
]

@pulumi.input_type
class AviatrixAppDomainSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: pulumi.Input[Sequence[pulumi.Input['AviatrixAppDomainSelectorMatchExpressionArgs']]]):
        pulumi.set(__self__, "match_expressions", match_expressions)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> pulumi.Input[Sequence[pulumi.Input['AviatrixAppDomainSelectorMatchExpressionArgs']]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: pulumi.Input[Sequence[pulumi.Input['AviatrixAppDomainSelectorMatchExpressionArgs']]]):
        pulumi.set(self, "match_expressions", value)


@pulumi.input_type
class AviatrixAppDomainSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 res_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if res_id is not None:
            pulumi.set(__self__, "res_id", res_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resId")
    def res_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "res_id")

    @res_id.setter
    def res_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "res_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AviatrixAwsTgwSecurityDomainArgs:
    def __init__(__self__, *,
                 security_domain_name: pulumi.Input[str],
                 attached_vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixAwsTgwSecurityDomainAttachedVpcArgs']]]] = None,
                 aviatrix_firewall: Optional[pulumi.Input[bool]] = None,
                 connected_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 native_egress: Optional[pulumi.Input[bool]] = None,
                 native_firewall: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "security_domain_name", security_domain_name)
        if attached_vpcs is not None:
            warnings.warn("""Please set `manage_vpc_attachment` to false, and use the standalone aviatrix_aws_tgw_vpc_attachment resource instead.""", DeprecationWarning)
            pulumi.log.warn("""attached_vpcs is deprecated: Please set `manage_vpc_attachment` to false, and use the standalone aviatrix_aws_tgw_vpc_attachment resource instead.""")
        if attached_vpcs is not None:
            pulumi.set(__self__, "attached_vpcs", attached_vpcs)
        if aviatrix_firewall is not None:
            pulumi.set(__self__, "aviatrix_firewall", aviatrix_firewall)
        if connected_domains is not None:
            pulumi.set(__self__, "connected_domains", connected_domains)
        if native_egress is not None:
            pulumi.set(__self__, "native_egress", native_egress)
        if native_firewall is not None:
            pulumi.set(__self__, "native_firewall", native_firewall)

    @property
    @pulumi.getter(name="securityDomainName")
    def security_domain_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "security_domain_name")

    @security_domain_name.setter
    def security_domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_domain_name", value)

    @property
    @pulumi.getter(name="attachedVpcs")
    def attached_vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixAwsTgwSecurityDomainAttachedVpcArgs']]]]:
        return pulumi.get(self, "attached_vpcs")

    @attached_vpcs.setter
    def attached_vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixAwsTgwSecurityDomainAttachedVpcArgs']]]]):
        pulumi.set(self, "attached_vpcs", value)

    @property
    @pulumi.getter(name="aviatrixFirewall")
    def aviatrix_firewall(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aviatrix_firewall")

    @aviatrix_firewall.setter
    def aviatrix_firewall(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aviatrix_firewall", value)

    @property
    @pulumi.getter(name="connectedDomains")
    def connected_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "connected_domains")

    @connected_domains.setter
    def connected_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "connected_domains", value)

    @property
    @pulumi.getter(name="nativeEgress")
    def native_egress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "native_egress")

    @native_egress.setter
    def native_egress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "native_egress", value)

    @property
    @pulumi.getter(name="nativeFirewall")
    def native_firewall(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "native_firewall")

    @native_firewall.setter
    def native_firewall(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "native_firewall", value)


@pulumi.input_type
class AviatrixAwsTgwSecurityDomainAttachedVpcArgs:
    def __init__(__self__, *,
                 vpc_account_name: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 vpc_region: pulumi.Input[str],
                 customized_route_advertisement: Optional[pulumi.Input[str]] = None,
                 customized_routes: Optional[pulumi.Input[str]] = None,
                 disable_local_route_propagation: Optional[pulumi.Input[bool]] = None,
                 route_tables: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "vpc_account_name", vpc_account_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_region", vpc_region)
        if customized_route_advertisement is not None:
            pulumi.set(__self__, "customized_route_advertisement", customized_route_advertisement)
        if customized_routes is not None:
            pulumi.set(__self__, "customized_routes", customized_routes)
        if disable_local_route_propagation is not None:
            pulumi.set(__self__, "disable_local_route_propagation", disable_local_route_propagation)
        if route_tables is not None:
            pulumi.set(__self__, "route_tables", route_tables)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="vpcAccountName")
    def vpc_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_account_name")

    @vpc_account_name.setter
    def vpc_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_account_name", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcRegion")
    def vpc_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_region")

    @vpc_region.setter
    def vpc_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_region", value)

    @property
    @pulumi.getter(name="customizedRouteAdvertisement")
    def customized_route_advertisement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customized_route_advertisement")

    @customized_route_advertisement.setter
    def customized_route_advertisement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customized_route_advertisement", value)

    @property
    @pulumi.getter(name="customizedRoutes")
    def customized_routes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customized_routes")

    @customized_routes.setter
    def customized_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customized_routes", value)

    @property
    @pulumi.getter(name="disableLocalRoutePropagation")
    def disable_local_route_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_local_route_propagation")

    @disable_local_route_propagation.setter
    def disable_local_route_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_local_route_propagation", value)

    @property
    @pulumi.getter(name="routeTables")
    def route_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_tables")

    @route_tables.setter
    def route_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_tables", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class AviatrixAwsTgwVpnConnVpnTunnelDataArgs:
    def __init__(__self__, *,
                 last_status_change_time: Optional[pulumi.Input[str]] = None,
                 route_count: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_message: Optional[pulumi.Input[str]] = None,
                 tgw_asn: Optional[pulumi.Input[str]] = None,
                 tunnel_name: Optional[pulumi.Input[str]] = None,
                 vpn_inside_address: Optional[pulumi.Input[str]] = None,
                 vpn_outside_address: Optional[pulumi.Input[str]] = None):
        if last_status_change_time is not None:
            pulumi.set(__self__, "last_status_change_time", last_status_change_time)
        if route_count is not None:
            pulumi.set(__self__, "route_count", route_count)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if tgw_asn is not None:
            pulumi.set(__self__, "tgw_asn", tgw_asn)
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)
        if vpn_inside_address is not None:
            pulumi.set(__self__, "vpn_inside_address", vpn_inside_address)
        if vpn_outside_address is not None:
            pulumi.set(__self__, "vpn_outside_address", vpn_outside_address)

    @property
    @pulumi.getter(name="lastStatusChangeTime")
    def last_status_change_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_status_change_time")

    @last_status_change_time.setter
    def last_status_change_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_status_change_time", value)

    @property
    @pulumi.getter(name="routeCount")
    def route_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "route_count")

    @route_count.setter
    def route_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_count", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_message")

    @status_message.setter
    def status_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_message", value)

    @property
    @pulumi.getter(name="tgwAsn")
    def tgw_asn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tgw_asn")

    @tgw_asn.setter
    def tgw_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tgw_asn", value)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_name")

    @tunnel_name.setter
    def tunnel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_name", value)

    @property
    @pulumi.getter(name="vpnInsideAddress")
    def vpn_inside_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_inside_address")

    @vpn_inside_address.setter
    def vpn_inside_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_inside_address", value)

    @property
    @pulumi.getter(name="vpnOutsideAddress")
    def vpn_outside_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_outside_address")

    @vpn_outside_address.setter
    def vpn_outside_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_outside_address", value)


@pulumi.input_type
class AviatrixFirenetFirewallInstanceAssociationArgs:
    def __init__(__self__, *,
                 firenet_gw_name: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 attached: Optional[pulumi.Input[bool]] = None,
                 egress_interface: Optional[pulumi.Input[str]] = None,
                 firewall_name: Optional[pulumi.Input[str]] = None,
                 lan_interface: Optional[pulumi.Input[str]] = None,
                 management_interface: Optional[pulumi.Input[str]] = None,
                 vendor_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "firenet_gw_name", firenet_gw_name)
        pulumi.set(__self__, "instance_id", instance_id)
        if attached is not None:
            pulumi.set(__self__, "attached", attached)
        if egress_interface is not None:
            pulumi.set(__self__, "egress_interface", egress_interface)
        if firewall_name is not None:
            pulumi.set(__self__, "firewall_name", firewall_name)
        if lan_interface is not None:
            pulumi.set(__self__, "lan_interface", lan_interface)
        if management_interface is not None:
            pulumi.set(__self__, "management_interface", management_interface)
        if vendor_type is not None:
            pulumi.set(__self__, "vendor_type", vendor_type)

    @property
    @pulumi.getter(name="firenetGwName")
    def firenet_gw_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "firenet_gw_name")

    @firenet_gw_name.setter
    def firenet_gw_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "firenet_gw_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def attached(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "attached")

    @attached.setter
    def attached(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "attached", value)

    @property
    @pulumi.getter(name="egressInterface")
    def egress_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "egress_interface")

    @egress_interface.setter
    def egress_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_interface", value)

    @property
    @pulumi.getter(name="firewallName")
    def firewall_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_name")

    @firewall_name.setter
    def firewall_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_name", value)

    @property
    @pulumi.getter(name="lanInterface")
    def lan_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lan_interface")

    @lan_interface.setter
    def lan_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_interface", value)

    @property
    @pulumi.getter(name="managementInterface")
    def management_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_interface")

    @management_interface.setter
    def management_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_interface", value)

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_type")

    @vendor_type.setter
    def vendor_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_type", value)


@pulumi.input_type
class AviatrixFirewallPolicyArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 dst_ip: pulumi.Input[str],
                 port: pulumi.Input[str],
                 src_ip: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 log_enabled: Optional[pulumi.Input[bool]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "dst_ip", dst_ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "src_ip", src_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if log_enabled is not None:
            pulumi.set(__self__, "log_enabled", log_enabled)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ip", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_enabled")

    @log_enabled.setter
    def log_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_enabled", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class AviatrixFirewallTagCidrListArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 cidr_tag_name: pulumi.Input[str]):
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "cidr_tag_name", cidr_tag_name)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="cidrTagName")
    def cidr_tag_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr_tag_name")

    @cidr_tag_name.setter
    def cidr_tag_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr_tag_name", value)


@pulumi.input_type
class AviatrixFqdnDomainNameArgs:
    def __init__(__self__, *,
                 fqdn: pulumi.Input[str],
                 port: pulumi.Input[str],
                 proto: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proto", proto)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: pulumi.Input[str]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def proto(self) -> pulumi.Input[str]:
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: pulumi.Input[str]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)


@pulumi.input_type
class AviatrixFqdnGwFilterTagListArgs:
    def __init__(__self__, *,
                 gw_name: pulumi.Input[str],
                 source_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "gw_name", gw_name)
        if source_ip_lists is not None:
            pulumi.set(__self__, "source_ip_lists", source_ip_lists)

    @property
    @pulumi.getter(name="gwName")
    def gw_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gw_name")

    @gw_name.setter
    def gw_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gw_name", value)

    @property
    @pulumi.getter(name="sourceIpLists")
    def source_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ip_lists")

    @source_ip_lists.setter
    def source_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ip_lists", value)


@pulumi.input_type
class AviatrixGatewayDnatConnectionPolicyArgs:
    def __init__(__self__, *,
                 apply_route_entry: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input[str]] = None,
                 dnat_ips: Optional[pulumi.Input[str]] = None,
                 dnat_port: Optional[pulumi.Input[str]] = None,
                 dst_cidr: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 exclude_rtb: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mark: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 src_cidr: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[str]] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dnat_ips is not None:
            pulumi.set(__self__, "dnat_ips", dnat_ips)
        if dnat_port is not None:
            pulumi.set(__self__, "dnat_port", dnat_port)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "apply_route_entry")

    @apply_route_entry.setter
    def apply_route_entry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_route_entry", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="dnatIps")
    def dnat_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnat_ips")

    @dnat_ips.setter
    def dnat_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnat_ips", value)

    @property
    @pulumi.getter(name="dnatPort")
    def dnat_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnat_port")

    @dnat_port.setter
    def dnat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnat_port", value)

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_cidr")

    @dst_cidr.setter
    def dst_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_cidr", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_rtb")

    @exclude_rtb.setter
    def exclude_rtb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_rtb", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mark")

    @mark.setter
    def mark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mark", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_cidr")

    @src_cidr.setter
    def src_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_cidr", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port", value)


@pulumi.input_type
class AviatrixGatewayDnatDnatPolicyArgs:
    def __init__(__self__, *,
                 apply_route_entry: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input[str]] = None,
                 dnat_ips: Optional[pulumi.Input[str]] = None,
                 dnat_port: Optional[pulumi.Input[str]] = None,
                 dst_cidr: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 exclude_rtb: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mark: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 src_cidr: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[str]] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dnat_ips is not None:
            pulumi.set(__self__, "dnat_ips", dnat_ips)
        if dnat_port is not None:
            pulumi.set(__self__, "dnat_port", dnat_port)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "apply_route_entry")

    @apply_route_entry.setter
    def apply_route_entry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_route_entry", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="dnatIps")
    def dnat_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnat_ips")

    @dnat_ips.setter
    def dnat_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnat_ips", value)

    @property
    @pulumi.getter(name="dnatPort")
    def dnat_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnat_port")

    @dnat_port.setter
    def dnat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnat_port", value)

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_cidr")

    @dst_cidr.setter
    def dst_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_cidr", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_rtb")

    @exclude_rtb.setter
    def exclude_rtb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_rtb", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mark")

    @mark.setter
    def mark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mark", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_cidr")

    @src_cidr.setter
    def src_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_cidr", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port", value)


@pulumi.input_type
class AviatrixGatewayDnatInterfacePolicyArgs:
    def __init__(__self__, *,
                 apply_route_entry: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input[str]] = None,
                 dnat_ips: Optional[pulumi.Input[str]] = None,
                 dnat_port: Optional[pulumi.Input[str]] = None,
                 dst_cidr: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 exclude_rtb: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mark: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 src_cidr: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[str]] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dnat_ips is not None:
            pulumi.set(__self__, "dnat_ips", dnat_ips)
        if dnat_port is not None:
            pulumi.set(__self__, "dnat_port", dnat_port)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "apply_route_entry")

    @apply_route_entry.setter
    def apply_route_entry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_route_entry", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="dnatIps")
    def dnat_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnat_ips")

    @dnat_ips.setter
    def dnat_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnat_ips", value)

    @property
    @pulumi.getter(name="dnatPort")
    def dnat_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dnat_port")

    @dnat_port.setter
    def dnat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnat_port", value)

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_cidr")

    @dst_cidr.setter
    def dst_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_cidr", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_rtb")

    @exclude_rtb.setter
    def exclude_rtb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_rtb", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mark")

    @mark.setter
    def mark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mark", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_cidr")

    @src_cidr.setter
    def src_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_cidr", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port", value)


@pulumi.input_type
class AviatrixGatewaySnatConnectionPolicyArgs:
    def __init__(__self__, *,
                 apply_route_entry: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input[str]] = None,
                 dst_cidr: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 exclude_rtb: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mark: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 snat_ips: Optional[pulumi.Input[str]] = None,
                 snat_port: Optional[pulumi.Input[str]] = None,
                 src_cidr: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[str]] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if snat_ips is not None:
            pulumi.set(__self__, "snat_ips", snat_ips)
        if snat_port is not None:
            pulumi.set(__self__, "snat_port", snat_port)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "apply_route_entry")

    @apply_route_entry.setter
    def apply_route_entry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_route_entry", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_cidr")

    @dst_cidr.setter
    def dst_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_cidr", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_rtb")

    @exclude_rtb.setter
    def exclude_rtb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_rtb", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mark")

    @mark.setter
    def mark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mark", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_ips")

    @snat_ips.setter
    def snat_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_ips", value)

    @property
    @pulumi.getter(name="snatPort")
    def snat_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_port")

    @snat_port.setter
    def snat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_port", value)

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_cidr")

    @src_cidr.setter
    def src_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_cidr", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port", value)


@pulumi.input_type
class AviatrixGatewaySnatInterfacePolicyArgs:
    def __init__(__self__, *,
                 apply_route_entry: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input[str]] = None,
                 dst_cidr: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 exclude_rtb: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mark: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 snat_ips: Optional[pulumi.Input[str]] = None,
                 snat_port: Optional[pulumi.Input[str]] = None,
                 src_cidr: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[str]] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if snat_ips is not None:
            pulumi.set(__self__, "snat_ips", snat_ips)
        if snat_port is not None:
            pulumi.set(__self__, "snat_port", snat_port)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "apply_route_entry")

    @apply_route_entry.setter
    def apply_route_entry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_route_entry", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_cidr")

    @dst_cidr.setter
    def dst_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_cidr", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_rtb")

    @exclude_rtb.setter
    def exclude_rtb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_rtb", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mark")

    @mark.setter
    def mark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mark", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_ips")

    @snat_ips.setter
    def snat_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_ips", value)

    @property
    @pulumi.getter(name="snatPort")
    def snat_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_port")

    @snat_port.setter
    def snat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_port", value)

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_cidr")

    @src_cidr.setter
    def src_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_cidr", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port", value)


@pulumi.input_type
class AviatrixGatewaySnatSnatPolicyArgs:
    def __init__(__self__, *,
                 apply_route_entry: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input[str]] = None,
                 dst_cidr: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[str]] = None,
                 exclude_rtb: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mark: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 snat_ips: Optional[pulumi.Input[str]] = None,
                 snat_port: Optional[pulumi.Input[str]] = None,
                 src_cidr: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[str]] = None):
        if apply_route_entry is not None:
            pulumi.set(__self__, "apply_route_entry", apply_route_entry)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if dst_cidr is not None:
            pulumi.set(__self__, "dst_cidr", dst_cidr)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if exclude_rtb is not None:
            pulumi.set(__self__, "exclude_rtb", exclude_rtb)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mark is not None:
            pulumi.set(__self__, "mark", mark)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if snat_ips is not None:
            pulumi.set(__self__, "snat_ips", snat_ips)
        if snat_port is not None:
            pulumi.set(__self__, "snat_port", snat_port)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="applyRouteEntry")
    def apply_route_entry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "apply_route_entry")

    @apply_route_entry.setter
    def apply_route_entry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_route_entry", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="dstCidr")
    def dst_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_cidr")

    @dst_cidr.setter
    def dst_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_cidr", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="excludeRtb")
    def exclude_rtb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_rtb")

    @exclude_rtb.setter
    def exclude_rtb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_rtb", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mark")

    @mark.setter
    def mark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mark", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_ips")

    @snat_ips.setter
    def snat_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_ips", value)

    @property
    @pulumi.getter(name="snatPort")
    def snat_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_port")

    @snat_port.setter
    def snat_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_port", value)

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_cidr")

    @src_cidr.setter
    def src_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_cidr", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port", value)


@pulumi.input_type
class AviatrixMicrosegPolicyListPolicyArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 dst_app_domains: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 src_app_domains: pulumi.Input[Sequence[pulumi.Input[str]]],
                 logging: Optional[pulumi.Input[bool]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixMicrosegPolicyListPolicyPortRangeArgs']]]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 watch: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "dst_app_domains", dst_app_domains)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "src_app_domains", src_app_domains)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if watch is not None:
            pulumi.set(__self__, "watch", watch)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="dstAppDomains")
    def dst_app_domains(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "dst_app_domains")

    @dst_app_domains.setter
    def dst_app_domains(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dst_app_domains", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcAppDomains")
    def src_app_domains(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "src_app_domains")

    @src_app_domains.setter
    def src_app_domains(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "src_app_domains", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixMicrosegPolicyListPolicyPortRangeArgs']]]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AviatrixMicrosegPolicyListPolicyPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def watch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "watch")

    @watch.setter
    def watch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "watch", value)


@pulumi.input_type
class AviatrixMicrosegPolicyListPolicyPortRangeArgs:
    def __init__(__self__, *,
                 lo: pulumi.Input[int],
                 hi: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "lo", lo)
        if hi is not None:
            pulumi.set(__self__, "hi", hi)

    @property
    @pulumi.getter
    def lo(self) -> pulumi.Input[int]:
        return pulumi.get(self, "lo")

    @lo.setter
    def lo(self, value: pulumi.Input[int]):
        pulumi.set(self, "lo", value)

    @property
    @pulumi.getter
    def hi(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hi")

    @hi.setter
    def hi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hi", value)


@pulumi.input_type
class AviatrixPrivateModeLbProxyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class AviatrixSite2CloudCaCertTagCaCertificateArgs:
    def __init__(__self__, *,
                 cert_content: pulumi.Input[str],
                 common_name: Optional[pulumi.Input[str]] = None,
                 expiration_time: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 issuer_name: Optional[pulumi.Input[str]] = None,
                 unique_serial: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "cert_content", cert_content)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if issuer_name is not None:
            pulumi.set(__self__, "issuer_name", issuer_name)
        if unique_serial is not None:
            pulumi.set(__self__, "unique_serial", unique_serial)

    @property
    @pulumi.getter(name="certContent")
    def cert_content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cert_content")

    @cert_content.setter
    def cert_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert_content", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration_time")

    @expiration_time.setter
    def expiration_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="issuerName")
    def issuer_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_name")

    @issuer_name.setter
    def issuer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_name", value)

    @property
    @pulumi.getter(name="uniqueSerial")
    def unique_serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_serial")

    @unique_serial.setter
    def unique_serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_serial", value)


@pulumi.input_type
class AviatrixTransitGatewayBgpLanInterfaceArgs:
    def __init__(__self__, *,
                 subnet: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class AviatrixTransitGatewayHaBgpLanInterfaceArgs:
    def __init__(__self__, *,
                 subnet: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class AviatrixVpcPrivateSubnetArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class AviatrixVpcPublicSubnetArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class AviatrixVpcSubnetArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class AviatrixVpnProfilePolicyArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 port: pulumi.Input[str],
                 proto: pulumi.Input[str],
                 target: pulumi.Input[str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proto", proto)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def proto(self) -> pulumi.Input[str]:
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: pulumi.Input[str]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class ProviderIgnoreTagsArgs:
    def __init__(__self__, *,
                 key_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if key_prefixes is not None:
            pulumi.set(__self__, "key_prefixes", key_prefixes)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter(name="keyPrefixes")
    def key_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "key_prefixes")

    @key_prefixes.setter
    def key_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_prefixes", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)


@pulumi.input_type
class GetAviatrixFirenetFirewallInstanceAssociationArgs:
    def __init__(__self__, *,
                 attached: bool,
                 egress_interface: str,
                 firenet_gw_name: str,
                 firewall_name: str,
                 instance_id: str,
                 lan_interface: str,
                 management_interface: str,
                 vendor_type: str):
        pulumi.set(__self__, "attached", attached)
        pulumi.set(__self__, "egress_interface", egress_interface)
        pulumi.set(__self__, "firenet_gw_name", firenet_gw_name)
        pulumi.set(__self__, "firewall_name", firewall_name)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "lan_interface", lan_interface)
        pulumi.set(__self__, "management_interface", management_interface)
        pulumi.set(__self__, "vendor_type", vendor_type)

    @property
    @pulumi.getter
    def attached(self) -> bool:
        return pulumi.get(self, "attached")

    @attached.setter
    def attached(self, value: bool):
        pulumi.set(self, "attached", value)

    @property
    @pulumi.getter(name="egressInterface")
    def egress_interface(self) -> str:
        return pulumi.get(self, "egress_interface")

    @egress_interface.setter
    def egress_interface(self, value: str):
        pulumi.set(self, "egress_interface", value)

    @property
    @pulumi.getter(name="firenetGwName")
    def firenet_gw_name(self) -> str:
        return pulumi.get(self, "firenet_gw_name")

    @firenet_gw_name.setter
    def firenet_gw_name(self, value: str):
        pulumi.set(self, "firenet_gw_name", value)

    @property
    @pulumi.getter(name="firewallName")
    def firewall_name(self) -> str:
        return pulumi.get(self, "firewall_name")

    @firewall_name.setter
    def firewall_name(self, value: str):
        pulumi.set(self, "firewall_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: str):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="lanInterface")
    def lan_interface(self) -> str:
        return pulumi.get(self, "lan_interface")

    @lan_interface.setter
    def lan_interface(self, value: str):
        pulumi.set(self, "lan_interface", value)

    @property
    @pulumi.getter(name="managementInterface")
    def management_interface(self) -> str:
        return pulumi.get(self, "management_interface")

    @management_interface.setter
    def management_interface(self, value: str):
        pulumi.set(self, "management_interface", value)

    @property
    @pulumi.getter(name="vendorType")
    def vendor_type(self) -> str:
        return pulumi.get(self, "vendor_type")

    @vendor_type.setter
    def vendor_type(self, value: str):
        pulumi.set(self, "vendor_type", value)


