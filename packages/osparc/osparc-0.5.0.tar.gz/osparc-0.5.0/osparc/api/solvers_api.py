# coding: utf-8

"""
    osparc.io web API

    osparc-simcore public web API specifications  # noqa: E501

    The version of the OpenAPI document: 0.4.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from osparc.api_client import ApiClient
from osparc.exceptions import ApiTypeError, ApiValueError


class SolversApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_job(self, solver_key, version, job_inputs, **kwargs):  # noqa: E501
        """Create Job  # noqa: E501

        Creates a job in a specific release with given inputs.  NOTE: This operation does **not** start the job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_job(solver_key, version, job_inputs, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param JobInputs job_inputs: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.create_job_with_http_info(
            solver_key, version, job_inputs, **kwargs
        )  # noqa: E501

    def create_job_with_http_info(
        self, solver_key, version, job_inputs, **kwargs
    ):  # noqa: E501
        """Create Job  # noqa: E501

        Creates a job in a specific release with given inputs.  NOTE: This operation does **not** start the job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_job_with_http_info(solver_key, version, job_inputs, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param JobInputs job_inputs: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version", "job_inputs"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_job" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `create_job`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `create_job`"
            )  # noqa: E501
        # verify the required parameter 'job_inputs' is set
        if self.api_client.client_side_validation and (
            "job_inputs" not in local_var_params
            or local_var_params["job_inputs"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `job_inputs` when calling `create_job`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `create_job`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "job_inputs" in local_var_params:
            body_params = local_var_params["job_inputs"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}/jobs",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Job",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_job(self, solver_key, version, job_id, **kwargs):  # noqa: E501
        """Get Job  # noqa: E501

        Gets job of a given solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.get_job_with_http_info(
            solver_key, version, job_id, **kwargs
        )  # noqa: E501

    def get_job_with_http_info(
        self, solver_key, version, job_id, **kwargs
    ):  # noqa: E501
        """Get Job  # noqa: E501

        Gets job of a given solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_with_http_info(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_job" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `get_job`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `get_job`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and (
            "job_id" not in local_var_params
            or local_var_params["job_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `job_id` when calling `get_job`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `get_job`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        if (
            self.api_client.client_side_validation
            and "version" in local_var_params
            and not re.search(
                r"^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$",
                local_var_params["version"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `version` when calling `get_job`, must conform to the pattern `/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501
        if "job_id" in local_var_params:
            path_params["job_id"] = local_var_params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Job",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_job_output_logfile(
        self, solver_key, version, job_id, **kwargs
    ):  # noqa: E501
        """Get Job Output Logfile  # noqa: E501

        Special extra output with persistent logs file for the solver run.  NOTE: this is not a log stream but a predefined output that is only available after the job is done.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_output_logfile(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.get_job_output_logfile_with_http_info(
            solver_key, version, job_id, **kwargs
        )  # noqa: E501

    def get_job_output_logfile_with_http_info(
        self, solver_key, version, job_id, **kwargs
    ):  # noqa: E501
        """Get Job Output Logfile  # noqa: E501

        Special extra output with persistent logs file for the solver run.  NOTE: this is not a log stream but a predefined output that is only available after the job is done.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_output_logfile_with_http_info(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(file, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_output_logfile" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `get_job_output_logfile`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `get_job_output_logfile`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and (
            "job_id" not in local_var_params
            or local_var_params["job_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `job_id` when calling `get_job_output_logfile`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `get_job_output_logfile`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        if (
            self.api_client.client_side_validation
            and "version" in local_var_params
            and not re.search(
                r"^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$",
                local_var_params["version"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `version` when calling `get_job_output_logfile`, must conform to the pattern `/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501
        if "job_id" in local_var_params:
            path_params["job_id"] = local_var_params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            [
                "application/octet-stream",
                "application/zip",
                "text/plain",
                "application/json",
            ]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}/outputs/logfile",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="file",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_job_outputs(self, solver_key, version, job_id, **kwargs):  # noqa: E501
        """Get Job Outputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_outputs(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: JobOutputs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.get_job_outputs_with_http_info(
            solver_key, version, job_id, **kwargs
        )  # noqa: E501

    def get_job_outputs_with_http_info(
        self, solver_key, version, job_id, **kwargs
    ):  # noqa: E501
        """Get Job Outputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_outputs_with_http_info(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(JobOutputs, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_outputs" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `get_job_outputs`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `get_job_outputs`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and (
            "job_id" not in local_var_params
            or local_var_params["job_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `job_id` when calling `get_job_outputs`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `get_job_outputs`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        if (
            self.api_client.client_side_validation
            and "version" in local_var_params
            and not re.search(
                r"^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$",
                local_var_params["version"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `version` when calling `get_job_outputs`, must conform to the pattern `/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501
        if "job_id" in local_var_params:
            path_params["job_id"] = local_var_params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}/outputs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="JobOutputs",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_solver(self, solver_key, **kwargs):  # noqa: E501
        """Get Latest Release of a Solver  # noqa: E501

        Gets latest release of a solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_solver(solver_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Solver
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.get_solver_with_http_info(solver_key, **kwargs)  # noqa: E501

    def get_solver_with_http_info(self, solver_key, **kwargs):  # noqa: E501
        """Get Latest Release of a Solver  # noqa: E501

        Gets latest release of a solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_solver_with_http_info(solver_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Solver, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_solver" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `get_solver`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `get_solver`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/latest",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Solver",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_solver_release(self, solver_key, version, **kwargs):  # noqa: E501
        """Get Solver Release  # noqa: E501

        Gets a specific release of a solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_solver_release(solver_key, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Solver
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.get_solver_release_with_http_info(
            solver_key, version, **kwargs
        )  # noqa: E501

    def get_solver_release_with_http_info(
        self, solver_key, version, **kwargs
    ):  # noqa: E501
        """Get Solver Release  # noqa: E501

        Gets a specific release of a solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_solver_release_with_http_info(solver_key, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Solver, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_solver_release" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `get_solver_release`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `get_solver_release`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `get_solver_release`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        if (
            self.api_client.client_side_validation
            and "version" in local_var_params
            and not re.search(
                r"^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$",
                local_var_params["version"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `version` when calling `get_solver_release`, must conform to the pattern `/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Solver",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def inspect_job(self, solver_key, version, job_id, **kwargs):  # noqa: E501
        """Inspect Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inspect_job(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: JobStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.inspect_job_with_http_info(
            solver_key, version, job_id, **kwargs
        )  # noqa: E501

    def inspect_job_with_http_info(
        self, solver_key, version, job_id, **kwargs
    ):  # noqa: E501
        """Inspect Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inspect_job_with_http_info(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(JobStatus, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inspect_job" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `inspect_job`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `inspect_job`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and (
            "job_id" not in local_var_params
            or local_var_params["job_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `job_id` when calling `inspect_job`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `inspect_job`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        if (
            self.api_client.client_side_validation
            and "version" in local_var_params
            and not re.search(
                r"^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$",
                local_var_params["version"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `version` when calling `inspect_job`, must conform to the pattern `/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501
        if "job_id" in local_var_params:
            path_params["job_id"] = local_var_params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}:inspect",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="JobStatus",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_jobs(self, solver_key, version, **kwargs):  # noqa: E501
        """List Jobs  # noqa: E501

        List of all jobs in a specific released solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_jobs(solver_key, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.list_jobs_with_http_info(
            solver_key, version, **kwargs
        )  # noqa: E501

    def list_jobs_with_http_info(self, solver_key, version, **kwargs):  # noqa: E501
        """List Jobs  # noqa: E501

        List of all jobs in a specific released solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_jobs_with_http_info(solver_key, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Job], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_jobs" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `list_jobs`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `list_jobs`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `list_jobs`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}/jobs",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[Job]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_solver_releases(self, solver_key, **kwargs):  # noqa: E501
        """List Solver Releases  # noqa: E501

        Lists all releases of a given solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_solver_releases(solver_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Solver]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.list_solver_releases_with_http_info(
            solver_key, **kwargs
        )  # noqa: E501

    def list_solver_releases_with_http_info(self, solver_key, **kwargs):  # noqa: E501
        """List Solver Releases  # noqa: E501

        Lists all releases of a given solver  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_solver_releases_with_http_info(solver_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Solver], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_solver_releases" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `list_solver_releases`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `list_solver_releases`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[Solver]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_solvers(self, **kwargs):  # noqa: E501
        """List Solvers  # noqa: E501

        Lists all available solvers (latest version)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_solvers(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Solver]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.list_solvers_with_http_info(**kwargs)  # noqa: E501

    def list_solvers_with_http_info(self, **kwargs):  # noqa: E501
        """List Solvers  # noqa: E501

        Lists all available solvers (latest version)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_solvers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Solver], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_solvers" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[Solver]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_solvers_releases(self, **kwargs):  # noqa: E501
        """Lists All Releases  # noqa: E501

        Lists all released solvers (all released versions)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_solvers_releases(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Solver]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.list_solvers_releases_with_http_info(**kwargs)  # noqa: E501

    def list_solvers_releases_with_http_info(self, **kwargs):  # noqa: E501
        """Lists All Releases  # noqa: E501

        Lists all released solvers (all released versions)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_solvers_releases_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Solver], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_solvers_releases" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/releases",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[Solver]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def start_job(self, solver_key, version, job_id, **kwargs):  # noqa: E501
        """Start Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_job(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: JobStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.start_job_with_http_info(
            solver_key, version, job_id, **kwargs
        )  # noqa: E501

    def start_job_with_http_info(
        self, solver_key, version, job_id, **kwargs
    ):  # noqa: E501
        """Start Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_job_with_http_info(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(JobStatus, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_job" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `start_job`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `start_job`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and (
            "job_id" not in local_var_params
            or local_var_params["job_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `job_id` when calling `start_job`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `start_job`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        if (
            self.api_client.client_side_validation
            and "version" in local_var_params
            and not re.search(
                r"^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$",
                local_var_params["version"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `version` when calling `start_job`, must conform to the pattern `/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501
        if "job_id" in local_var_params:
            path_params["job_id"] = local_var_params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}:start",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="JobStatus",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def stop_job(self, solver_key, version, job_id, **kwargs):  # noqa: E501
        """Stop Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_job(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.stop_job_with_http_info(
            solver_key, version, job_id, **kwargs
        )  # noqa: E501

    def stop_job_with_http_info(
        self, solver_key, version, job_id, **kwargs
    ):  # noqa: E501
        """Stop Job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_job_with_http_info(solver_key, version, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str solver_key: (required)
        :param str version: (required)
        :param str job_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["solver_key", "version", "job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_job" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'solver_key' is set
        if self.api_client.client_side_validation and (
            "solver_key" not in local_var_params
            or local_var_params["solver_key"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `solver_key` when calling `stop_job`"
            )  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and (
            "version" not in local_var_params
            or local_var_params["version"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `version` when calling `stop_job`"
            )  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and (
            "job_id" not in local_var_params
            or local_var_params["job_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `job_id` when calling `stop_job`"
            )  # noqa: E501

        if (
            self.api_client.client_side_validation
            and "solver_key" in local_var_params
            and not re.search(
                r"^(simcore)\/(services)\/comp(\/[\w\/-]+)+$",
                local_var_params["solver_key"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `solver_key` when calling `stop_job`, must conform to the pattern `/^(simcore)\/(services)\/comp(\/[\w\/-]+)+$/`"
            )  # noqa: E501
        if (
            self.api_client.client_side_validation
            and "version" in local_var_params
            and not re.search(
                r"^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$",
                local_var_params["version"],
            )
        ):  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `version` when calling `stop_job`, must conform to the pattern `/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "solver_key" in local_var_params:
            path_params["solver_key"] = local_var_params["solver_key"]  # noqa: E501
        if "version" in local_var_params:
            path_params["version"] = local_var_params["version"]  # noqa: E501
        if "job_id" in local_var_params:
            path_params["job_id"] = local_var_params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["HTTPBasic"]  # noqa: E501

        return self.api_client.call_api(
            "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}:stop",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Job",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
