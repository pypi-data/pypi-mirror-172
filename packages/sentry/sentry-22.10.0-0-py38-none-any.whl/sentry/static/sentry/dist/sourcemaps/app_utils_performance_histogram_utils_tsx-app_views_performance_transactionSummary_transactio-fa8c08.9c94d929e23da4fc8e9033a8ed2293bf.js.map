{"version":3,"file":"chunks/app_utils_performance_histogram_utils_tsx-app_views_performance_transactionSummary_transactio-fa8c08.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/trends/content.tsx","webpack:///./app/views/performance/trends/index.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {FieldKey, FieldKind} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboardsV2/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst getFunctionTags = (fields: Readonly<Field[]>) =>\n  Object.fromEntries(\n    fields\n      .filter(\n        item =>\n          !Object.keys(FIELD_TAGS).includes(item.field) &&\n          !isEquation(item.field) &&\n          !isCustomMeasurement(item.field)\n      )\n      .map(item => [\n        item.field,\n        {key: item.field, name: item.field, kind: FieldKind.FUNCTION},\n      ])\n  );\n\nconst getFieldTags = () =>\n  Object.fromEntries(\n    Object.keys(FIELD_TAGS).map(key => [\n      key,\n      {\n        ...FIELD_TAGS[key],\n        kind: FieldKind.FIELD,\n      },\n    ])\n  );\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements']\n) =>\n  Object.fromEntries(\n    Object.keys(measurements).map(key => [\n      key,\n      {\n        ...measurements[key],\n        kind: FieldKind.MEASUREMENT,\n      },\n    ])\n  );\n\nconst getSpanTags = () => {\n  return Object.fromEntries(\n    SPAN_OP_BREAKDOWN_FIELDS.map(key => [key, {key, name: key, kind: FieldKind.METRICS}])\n  );\n};\n\nconst getSemverTags = () =>\n  Object.fromEntries(\n    Object.keys(SEMVER_TAGS).map(key => [\n      key,\n      {\n        ...SEMVER_TAGS[key],\n        kind: FieldKind.FIELD,\n      },\n    ])\n  );\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = getFunctionTags(fields ?? []);\n    const fieldTags = getFieldTags();\n    const measurementsWithKind = getMeasurementTags(measurements);\n    const spanTags = getSpanTags();\n    const semverTags = getSemverTags();\n\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign({}, measurementsWithKind, spanTags, fieldTags, functionTags)\n      : omit(fieldTags, TRACING_FIELDS);\n\n    const tagsWithKind = Object.fromEntries(\n      Object.keys(tags).map(key => [\n        key,\n        {\n          ...tags[key],\n          kind: FieldKind.TAG,\n        },\n      ])\n    );\n\n    assign(combinedTags, tagsWithKind, fieldTags, semverTags);\n\n    const sortedTagKeys = Object.keys(combinedTags);\n    sortedTagKeys.sort((a, b) => {\n      return a.toLowerCase().localeCompare(b.toLowerCase());\n    });\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: sortedTagKeys,\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    return omit(combinedTags, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList({...measurements, ...(customMeasurements ?? {})})}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={['environment']}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Alert from 'sentry/components/alert';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport CompactSelect from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {getPerformanceLandingUrl, getTransactionSearchQuery} from '../utils';\n\nimport ChangedTransactions from './changedTransactions';\nimport {TrendChangeType, TrendFunctionField, TrendView} from './types';\nimport {\n  DEFAULT_MAX_DURATION,\n  DEFAULT_TRENDS_STATS_PERIOD,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  modifyTrendsViewDefaultPeriod,\n  resetCursors,\n  TRENDS_FUNCTIONS,\n  TRENDS_PARAMETERS,\n} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  error?: string;\n  previousTrendFunction?: TrendFunctionField;\n};\n\nexport const defaultTrendsSelectionDate = {\n  start: null,\n  end: null,\n  utc: false,\n  period: DEFAULT_TRENDS_STATS_PERIOD,\n};\n\nclass TrendsContent extends Component<Props, State> {\n  state: State = {};\n\n  handleSearch = (searchQuery: string) => {\n    const {location} = this.props;\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        query: String(searchQuery).trim() || undefined,\n      },\n    });\n  };\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  handleTrendFunctionChange = (field: string) => {\n    const {organization, location} = this.props;\n\n    const offsets = {};\n\n    Object.values(TrendChangeType).forEach(trendChangeType => {\n      const queryKey = getSelectedQueryKey(trendChangeType);\n      offsets[queryKey] = undefined;\n    });\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_function',\n      eventName: 'Performance Views: Change Function',\n      organization_id: parseInt(organization.id, 10),\n      function_name: field,\n    });\n\n    this.setState({\n      previousTrendFunction: getCurrentTrendFunction(location).field,\n    });\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...offsets,\n        ...cursors,\n        trendFunction: field,\n      },\n    });\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <Alert type=\"error\" showIcon>\n        {error}\n      </Alert>\n    );\n  }\n\n  handleParameterChange = (label: string) => {\n    const {organization, location} = this.props;\n    const cursors = resetCursors();\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_parameter',\n      eventName: 'Performance Views: Change Parameter',\n      organization_id: parseInt(organization.id, 10),\n      parameter_name: label,\n    });\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        trendParameter: label,\n      },\n    });\n  };\n\n  getPerformanceLink() {\n    const {location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n    };\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    // This stops errors from occurring when navigating to other views since we are appending aggregates to the trends view\n    conditions.removeFilter('tpm()');\n    conditions.removeFilter('confidence()');\n    conditions.removeFilter('transaction.duration');\n    newQuery.query = conditions.formatString();\n    return {\n      pathname: getPerformanceLandingUrl(this.props.organization),\n      query: newQuery,\n    };\n  }\n\n  render() {\n    const {organization, eventView, location, projects} = this.props;\n    const {previousTrendFunction} = this.state;\n\n    const trendView = eventView.clone() as TrendView;\n    modifyTrendsViewDefaultPeriod(trendView, location);\n\n    const fields = generateAggregateFields(\n      organization,\n      [\n        {\n          field: 'absolute_correlation()',\n        },\n        {\n          field: 'trend_percentage()',\n        },\n        {\n          field: 'trend_difference()',\n        },\n        {\n          field: 'count_percentage()',\n        },\n        {\n          field: 'tpm()',\n        },\n        {\n          field: 'tps()',\n        },\n      ],\n      ['epm()', 'eps()']\n    );\n    const currentTrendFunction = getCurrentTrendFunction(location);\n    const currentTrendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const query = getTransactionSearchQuery(location);\n\n    return (\n      <PageFiltersContainer\n        defaultSelection={{\n          datetime: defaultTrendsSelectionDate,\n        }}\n      >\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: 'Performance',\n                  to: this.getPerformanceLink(),\n                },\n                {\n                  label: 'Trends',\n                },\n              ]}\n            />\n            <Layout.Title>{t('Trends')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <DefaultTrends location={location} eventView={eventView} projects={projects}>\n              <FilterActions>\n                <PageFilterBar condensed>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"left\" />\n                </PageFilterBar>\n                <StyledSearchBar\n                  searchSource=\"trends\"\n                  organization={organization}\n                  projectIds={trendView.project}\n                  query={query}\n                  fields={fields}\n                  onSearch={this.handleSearch}\n                  maxQueryLength={MAX_QUERY_LENGTH}\n                />\n                <CompactSelect\n                  triggerProps={{prefix: t('Percentile')}}\n                  value={currentTrendFunction.field}\n                  options={TRENDS_FUNCTIONS.map(({label, field}) => ({\n                    value: field,\n                    label,\n                  }))}\n                  onChange={opt => this.handleTrendFunctionChange(opt.value)}\n                />\n                <CompactSelect\n                  triggerProps={{prefix: t('Parameter')}}\n                  value={currentTrendParameter.label}\n                  options={TRENDS_PARAMETERS.map(({label}) => ({\n                    value: label,\n                    label,\n                  }))}\n                  onChange={opt => this.handleParameterChange(opt.value)}\n                />\n              </FilterActions>\n              <ListContainer>\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.IMPROVED}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.REGRESSION}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n              </ListContainer>\n            </DefaultTrends>\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    );\n  }\n}\n\ntype DefaultTrendsProps = {\n  children: React.ReactNode[];\n  eventView: EventView;\n  location: Location;\n  projects: Project[];\n};\n\nclass DefaultTrends extends Component<DefaultTrendsProps> {\n  hasPushedDefaults = false;\n\n  render() {\n    const {children, location, eventView, projects} = this.props;\n\n    const queryString = decodeScalar(location.query.query);\n    const trendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const conditions = new MutableSearch(queryString || '');\n\n    if (queryString || this.hasPushedDefaults) {\n      this.hasPushedDefaults = true;\n      return <Fragment>{children}</Fragment>;\n    }\n    this.hasPushedDefaults = true;\n    conditions.setFilterValues('tpm()', ['>0.01']);\n    conditions.setFilterValues(trendParameter.column, ['>0', `<${DEFAULT_MAX_DURATION}`]);\n\n    const query = conditions.formatString();\n    eventView.query = query;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(query).trim() || undefined,\n      },\n    });\n    return null;\n  }\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nconst ListContainer = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n`;\n\nexport default withPageFilters(TrendsContent);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {generatePerformanceEventView} from '../data';\n\nimport TrendsContent from './content';\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  eventView: EventView;\n  error?: string;\n};\n\nclass TrendsSummary extends Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    return {\n      ...prevState,\n      eventView: generatePerformanceEventView(nextProps.location, nextProps.projects, {\n        isTrends: true,\n      }),\n    };\n  }\n\n  state: State = {\n    eventView: generatePerformanceEventView(this.props.location, this.props.projects, {\n      isTrends: true,\n    }),\n    error: undefined,\n  };\n\n  getDocumentTitle(): string {\n    return [t('Trends'), t('Performance')].join(' - ');\n  }\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  renderContent() {\n    const {organization, location, projects} = this.props;\n    const {eventView} = this.state;\n    return (\n      <TrendsContent\n        organization={organization}\n        location={location}\n        eventView={eventView}\n        projects={projects}\n      />\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <StyledPageContent>\n          <NoProjectMessage organization={organization}>\n            {this.renderContent()}\n          </NoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withProjects(withPageFilters(withApi(TrendsSummary))));\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","props","maxSearchItems","organization","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","getTagList","measurements","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","isCustomMeasurement","kind","FieldKind","getFunctionTags","fieldTags","measurementsWithKind","getMeasurementTags","spanTags","SPAN_OP_BREAKDOWN_FIELDS","semverTags","SEMVER_TAGS","combinedTags","features","assign","omit","TRACING_FIELDS","tagsWithKind","sortedTagKeys","sort","a","b","toLowerCase","localeCompare","has","FieldKey","values","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","customPerformanceMetrics","withTags","getBucketWidth","data","length","bin","computeBuckets","width","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","value","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","count","WrappedComponent","WithTags","Component","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","filterToField","label","t","p100","eventsRouteWithQuery","orgSlug","transaction","projectID","pathname","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","defaultTrendsSelectionDate","utc","period","DEFAULT_TRENDS_STATS_PERIOD","TrendsContent","searchQuery","cursors","resetCursors","browserHistory","trim","error","offsets","TrendChangeType","forEach","trendChangeType","queryKey","getSelectedQueryKey","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","function_name","previousTrendFunction","getCurrentTrendFunction","trendFunction","parameter_name","trendParameter","renderError","showIcon","getPerformanceLink","newQuery","conditions","MutableSearch","removeFilter","formatString","getPerformanceLandingUrl","eventView","projects","trendView","clone","modifyTrendsViewDefaultPeriod","generateAggregateFields","currentTrendFunction","currentTrendParameter","getCurrentTrendParameter","getTransactionSearchQuery","defaultSelection","datetime","crumbs","to","fullWidth","DefaultTrends","FilterActions","condensed","alignDropdown","StyledSearchBar","searchSource","onSearch","handleSearch","maxQueryLength","MAX_QUERY_LENGTH","triggerProps","prefix","options","TRENDS_FUNCTIONS","onChange","opt","handleTrendFunctionChange","TRENDS_PARAMETERS","handleParameterChange","ListContainer","setError","children","queryString","hasPushedDefaults","Fragment","setFilterValues","column","DEFAULT_MAX_DURATION","cursor","space","p","theme","breakpoints","small","xlarge","withPageFilters","TrendsSummary","generatePerformanceEventView","isTrends","nextProps","prevState","getDocumentTitle","join","renderContent","title","StyledPageContent","withOrganization","withProjects","withApi","PageContent"],"sourceRoot":""}