{"version":3,"file":"chunks/app_views_settings_organizationGeneralSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/organizationGeneralSettings.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationGeneralSettings/organizationSettingsForm.tsx","webpack:///./app/views/settings/organizationGeneralSettings/index.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport {MemberRole} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('General'),\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Organization Slug'),\n        help: t('A unique ID used to identify this organization'),\n        transformInput: slugify,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You will be redirected to the new organization slug after saving'\n        ),\n      },\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: t('Display Name'),\n        help: t('A human-friendly name for the organization'),\n      },\n      {\n        name: 'isEarlyAdopter',\n        type: 'boolean',\n        label: t('Early Adopter'),\n        help: t(\"Opt-in to new features before they're released to the public\"),\n      },\n    ],\n  },\n\n  {\n    title: 'Membership',\n    fields: [\n      {\n        name: 'defaultRole',\n        type: 'select',\n        required: true,\n        label: t('Default Role'),\n        // seems weird to have choices in initial form data\n        choices: ({initialData} = {}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        help: t('The default role new members will receive'),\n        disabled: ({access}) => !access.has('org:admin'),\n      },\n      {\n        name: 'openMembership',\n        type: 'boolean',\n        required: true,\n        label: t('Open Membership'),\n        help: t('Allow organization members to freely join or leave any team'),\n      },\n      {\n        name: 'eventsMemberAdmin',\n        type: 'boolean',\n        label: t('Let Members Delete Events'),\n        help: t(\n          'Allow members to delete events (including the delete & discard action) by granting them the `event:admin` scope.'\n        ),\n      },\n      {\n        name: 'alertsMemberWrite',\n        type: 'boolean',\n        label: t('Let Members Create and Edit Alerts'),\n        help: t(\n          'Allow members to create, edit, and delete alert rules by granting them the `alerts:write` scope.'\n        ),\n      },\n      {\n        name: 'attachmentsRole',\n        type: 'select',\n        choices: ({initialData = {}}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Attachments Access'),\n        help: t(\n          'Role required to download event attachments, such as native crash reports or log files.'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n      },\n      {\n        name: 'debugFilesRole',\n        type: 'select',\n        choices: ({initialData = {}}) =>\n          initialData?.orgRoleList?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Debug Files Access'),\n        help: t(\n          'Role required to download debug information files, proguard mappings and source maps.'\n        ),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {ReactNode} from 'react';\n\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'> & {\n    message?: ReactNode;\n  };\n\nconst PermissionAlert = ({\n  access = ['org:write'],\n  message = t(\n    'These settings can only be edited by users with the organization owner or manager role.'\n  ),\n  ...props\n}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" showIcon {...props}>\n          {message}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {updateOrganization} from 'sentry/actionCreators/organizations';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport AvatarChooser from 'sentry/components/avatarChooser';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport organizationSettingsFields from 'sentry/data/forms/organizationGeneralSettings';\nimport {Organization, Scope} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  access: Set<Scope>;\n  initialData: Organization;\n  location: Location;\n  onSave: (previous: Organization, updated: Record<string, any>) => void;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = AsyncComponent['state'] & {\n  authProvider: object;\n};\n\nclass OrganizationSettingsForm extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    return [['authProvider', `/organizations/${organization.slug}/auth-provider/`]];\n  }\n\n  render() {\n    const {initialData, organization, onSave, access} = this.props;\n    const {authProvider} = this.state;\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      additionalFieldProps: {hasSsoEnabled: !!authProvider},\n      features: new Set(organization.features),\n      access,\n      location: this.props.location,\n      disabled: !access.has('org:write'),\n    };\n\n    return (\n      <Form\n        data-test-id=\"organization-settings\"\n        apiMethod=\"PUT\"\n        apiEndpoint={endpoint}\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        onSubmitSuccess={(_resp, model) => {\n          // Special case for slug, need to forward to new slug\n          if (typeof onSave === 'function') {\n            onSave(initialData, model.initialData);\n          }\n        }}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <JsonForm {...jsonFormSettings} forms={organizationSettingsFields} />\n        <AvatarChooser\n          type=\"organization\"\n          allowGravatar={false}\n          endpoint={`${endpoint}avatar/`}\n          model={initialData}\n          onSave={updateOrganization}\n          disabled={!access.has('org:write')}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsForm);\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addLoadingMessage} from 'sentry/actionCreators/indicator';\nimport {\n  changeOrganizationSlug,\n  removeAndRedirectToRemainingOrganization,\n  updateOrganization,\n} from 'sentry/actionCreators/organizations';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Field from 'sentry/components/forms/field';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/organization/permissionAlert';\n\nimport OrganizationSettingsForm from './organizationSettingsForm';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n} & RouteComponentProps<{orgId: string}, {}>;\n\nfunction OrganizationGeneralSettings(props: Props) {\n  const api = useApi();\n\n  const {organization, projects, params} = props;\n  const {orgId} = params;\n\n  const access = new Set(organization.access);\n\n  const removeConfirmMessage = (\n    <Fragment>\n      <TextBlock>\n        {tct(\n          'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',\n          {\n            name: organization && <strong>{organization.name}</strong>,\n          }\n        )}\n      </TextBlock>\n\n      {!!projects.length && (\n        <Fragment>\n          <TextBlock>\n            {t('This will also remove the following associated projects:')}\n          </TextBlock>\n          <List symbol=\"bullet\" data-test-id=\"removed-projects-list\">\n            {projects.map(project => (\n              <ListItem key={project.slug}>{project.slug}</ListItem>\n            ))}\n          </List>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n\n  const handleSaveForm: React.ComponentProps<\n    typeof OrganizationSettingsForm\n  >['onSave'] = (prevData: Organization, data: Partial<Organization>) => {\n    if (data.slug && data.slug !== prevData.slug) {\n      changeOrganizationSlug(\n        prevData,\n        data as Partial<Organization> & Pick<Organization, 'slug'>\n      );\n      browserHistory.replace(`/settings/${data.slug}/`);\n    } else {\n      // This will update OrganizationStore (as well as OrganizationsStore\n      // which is slightly incorrect because it has summaries vs a detailed org)\n      updateOrganization(data);\n    }\n  };\n\n  const handleConfirmRemoveOrg = () => {\n    if (!organization) {\n      return;\n    }\n\n    addLoadingMessage();\n    removeAndRedirectToRemainingOrganization(api, {\n      orgId: params.orgId,\n      successMessage: `${organization.name} is queued for deletion.`,\n      errorMessage: `Error removing the ${organization.name} organization`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('General Settings')} orgSlug={orgId} />\n      <div>\n        <SettingsPageHeader title={t('Organization Settings')} />\n        <PermissionAlert />\n\n        <OrganizationSettingsForm\n          {...props}\n          initialData={organization}\n          access={access}\n          onSave={handleSaveForm}\n        />\n\n        {access.has('org:admin') && !organization.isDefault && (\n          <Panel>\n            <PanelHeader>{t('Remove Organization')}</PanelHeader>\n            <Field\n              label={t('Remove Organization')}\n              help={t(\n                'Removing this organization will delete all data including projects and their associated events.'\n              )}\n            >\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  confirmText={t('Remove Organization')}\n                  message={removeConfirmMessage}\n                  onConfirm={handleConfirmRemoveOrg}\n                >\n                  <Button priority=\"danger\">{t('Remove Organization')}</Button>\n                </Confirm>\n              </div>\n            </Field>\n          </Panel>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default withProjects(withOrganization(OrganizationGeneralSettings));\n"],"names":["route","title","t","fields","name","type","required","label","help","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","choices","initialData","orgRoleList","map","r","id","disabled","access","has","visible","features","str","toLowerCase","replace","PermissionAlert","message","props","hasAccess","showIcon","OrganizationSettingsForm","AsyncComponent","getEndpoints","organization","this","slug","render","onSave","authProvider","state","endpoint","jsonFormSettings","additionalFieldProps","hasSsoEnabled","Set","location","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","_resp","model","onSubmitError","addErrorMessage","forms","organizationSettingsFields","allowGravatar","updateOrganization","withOrganization","OrganizationGeneralSettings","api","useApi","projects","params","orgId","removeConfirmMessage","Fragment","tct","length","symbol","project","orgSlug","prevData","data","changeOrganizationSlug","browserHistory","isDefault","priority","confirmText","onConfirm","addLoadingMessage","removeAndRedirectToRemainingOrganization","successMessage","errorMessage","withProjects"],"sourceRoot":""}