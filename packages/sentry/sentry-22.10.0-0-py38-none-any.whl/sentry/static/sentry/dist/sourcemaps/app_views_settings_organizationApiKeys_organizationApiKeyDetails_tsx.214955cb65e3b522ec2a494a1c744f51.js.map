{"version":3,"file":"chunks/app_views_settings_organizationApiKeys_organizationApiKeyDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeyDetails.tsx"],"sourcesContent":["import {useCallback} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  choices: Choices;\n  value: (string | number)[];\n  disabled?: boolean;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction MultipleCheckbox({choices, value, disabled, onChange}: Props) {\n  const handleChange = useCallback(\n    (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n      let newValue: SelectedValue = [];\n\n      if (typeof onChange !== 'function') {\n        return;\n      }\n\n      if (e.target.checked) {\n        newValue = value ? [...value, selectedValue] : [value];\n      } else {\n        newValue = value.filter(v => v !== selectedValue);\n      }\n\n      onChange(newValue, e);\n    },\n    [value, onChange]\n  );\n\n  return (\n    <MultipleCheckboxWrapper>\n      {choices.map(([choiceValue, choiceLabel]) => (\n        <LabelContainer key={choiceValue}>\n          <Label>\n            <input\n              type=\"checkbox\"\n              value={choiceValue}\n              onChange={e => handleChange(choiceValue, e)}\n              disabled={disabled}\n              checked={defined(value) && value.indexOf(choiceValue) !== -1}\n            />\n            <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n          </Label>\n        </LabelContainer>\n      ))}\n    </MultipleCheckboxWrapper>\n  );\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 25%;\n  }\n`;\n","import {PlainRoute} from 'react-router';\nimport {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: PlainRoute[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport ApiForm from 'sentry/components/forms/apiForm';\nimport MultipleCheckbox from 'sentry/components/forms/controls/multipleCheckbox';\nimport TextareaField from 'sentry/components/forms/fields/textareaField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport FormField from 'sentry/components/forms/formField';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {API_ACCESS_SCOPES} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Choices, Organization} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport {DeprecatedApiKey} from './types';\n\nconst API_CHOICES: Choices = API_ACCESS_SCOPES.map(s => [s, s]);\n\ntype RouteParams = {\n  apiKey: string;\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype State = AsyncView['state'] & {\n  apiKey: DeprecatedApiKey;\n};\n\nclass OrganizationApiKeyDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [\n      [\n        'apiKey',\n        `/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`,\n      ],\n    ];\n  }\n\n  getTitle() {\n    return routeTitleGen(t('Edit API Key'), this.props.organization.slug, false);\n  }\n\n  handleSubmitSuccess = () => {\n    addSuccessMessage('Saved changes');\n\n    // Go back to API list\n    browserHistory.push(\n      recreateRoute('', {\n        stepBack: -1,\n        routes: this.props.routes,\n        params: this.props.params,\n      })\n    );\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Unable to save changes. Please try again.');\n  };\n\n  renderBody() {\n    return (\n      <div>\n        <SettingsPageHeader title={t('Edit API Key')} />\n\n        <Panel>\n          <PanelHeader>{t('API Key')}</PanelHeader>\n          <ApiForm\n            apiMethod=\"PUT\"\n            apiEndpoint={`/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`}\n            initialData={this.state.apiKey}\n            onSubmitSuccess={this.handleSubmitSuccess}\n            onSubmitError={this.handleSubmitError}\n            onCancel={() =>\n              browserHistory.push(\n                recreateRoute('', {\n                  stepBack: -1,\n                  routes: this.props.routes,\n                  params: this.props.params,\n                })\n              )\n            }\n          >\n            <PanelBody>\n              <TextField label={t('Label')} name=\"label\" />\n              <TextField label={t('API Key')} name=\"key\" disabled />\n\n              <FormField name=\"scope_list\" label={t('Scopes')} inline={false} required>\n                {({value, onChange}) => (\n                  <MultipleCheckbox\n                    value={value}\n                    onChange={onChange}\n                    choices={API_CHOICES}\n                  />\n                )}\n              </FormField>\n\n              <TextareaField\n                label={t('Allowed Domains')}\n                name=\"allowed_origins\"\n                placeholder=\"e.g. example.com or https://example.com\"\n                help=\"Separate multiple entries with a newline\"\n              />\n            </PanelBody>\n          </ApiForm>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationApiKeyDetails);\n"],"names":["MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","choices","value","disabled","onChange","handleChange","useCallback","selectedValue","e","newValue","target","checked","filter","v","map","choiceValue","choiceLabel","LabelContainer","type","defined","indexOf","p","theme","breakpoints","small","medium","large","recreateRoute","to","options","routes","params","location","stepBack","paths","path","lastRootIndex","routeIndex","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","API_CHOICES","API_ACCESS_SCOPES","s","OrganizationApiKeyDetails","addSuccessMessage","browserHistory","props","addErrorMessage","getEndpoints","orgId","apiKey","routeTitleGen","t","organization","slug","renderBody","apiMethod","apiEndpoint","initialData","state","onSubmitSuccess","handleSubmitSuccess","onSubmitError","handleSubmitError","onCancel","label","name","inline","required","placeholder","help","withOrganization"],"sourceRoot":""}