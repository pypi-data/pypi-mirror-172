{"version":3,"file":"chunks/app_views_auth_login_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/auth/loginForm.tsx","webpack:///./app/views/auth/registerForm.tsx","webpack:///./app/views/auth/ssoForm.tsx","webpack:///./app/views/auth/login.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {ClassNames} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport Form from 'sentry/components/deprecatedforms/form';\nimport PasswordField from 'sentry/components/deprecatedforms/passwordField';\nimport TextField from 'sentry/components/deprecatedforms/textField';\nimport Link from 'sentry/components/links/link';\nimport {IconGithub, IconGoogle, IconVsts} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport space from 'sentry/styles/space';\nimport {AuthConfig} from 'sentry/types';\nimport {formFooterClass} from 'sentry/views/auth/login';\n\ntype LoginProvidersProps = Partial<\n  Pick<AuthConfig, 'vstsLoginLink' | 'githubLoginLink' | 'googleLoginLink'>\n>;\n\n// TODO(epurkhiser): The abstraction here would be much nicer if we just\n// exposed a configuration object telling us what auth providers there are.\nconst LoginProviders = ({\n  vstsLoginLink,\n  githubLoginLink,\n  googleLoginLink,\n}: LoginProvidersProps) => (\n  <ProviderWrapper>\n    <ProviderHeading>{t('External Account Login')}</ProviderHeading>\n    {googleLoginLink && (\n      <Button\n        align=\"left\"\n        size=\"sm\"\n        icon={<IconGoogle size=\"xs\" />}\n        href={googleLoginLink}\n      >\n        {t('Sign in with Google')}\n      </Button>\n    )}\n    {githubLoginLink && (\n      <Button\n        align=\"left\"\n        size=\"sm\"\n        icon={<IconGithub size=\"xs\" />}\n        href={githubLoginLink}\n      >\n        {t('Sign in with GitHub')}\n      </Button>\n    )}\n    {vstsLoginLink && (\n      <Button align=\"left\" size=\"sm\" icon={<IconVsts size=\"xs\" />} href={vstsLoginLink}>\n        {t('Sign in with Azure DevOps')}\n      </Button>\n    )}\n  </ProviderWrapper>\n);\n\ntype Props = {\n  api: Client;\n  authConfig: AuthConfig;\n};\n\ntype State = {\n  errorMessage: null | string;\n  errors: Record<string, string>;\n};\n\nclass LoginForm extends Component<Props, State> {\n  state: State = {\n    errorMessage: null,\n    errors: {},\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = async (data, onSuccess, onError) => {\n    try {\n      const response = await this.props.api.requestPromise('/auth/login/', {\n        method: 'POST',\n        data,\n      });\n      onSuccess(data);\n\n      // TODO(epurkhiser): There is likely more that needs to happen to update\n      // the application state after user login.\n\n      ConfigStore.set('user', response.user);\n\n      // TODO(epurkhiser): Reconfigure sentry SDK identity\n\n      browserHistory.push({pathname: response.nextUri});\n    } catch (e) {\n      if (!e.responseJSON || !e.responseJSON.errors) {\n        onError(e);\n        return;\n      }\n\n      let message = e.responseJSON.detail;\n      if (e.responseJSON.errors.__all__) {\n        message = e.responseJSON.errors.__all__;\n      }\n\n      this.setState({\n        errorMessage: message,\n        errors: e.responseJSON.errors || {},\n      });\n\n      onError(e);\n    }\n  };\n\n  render() {\n    const {errorMessage, errors} = this.state;\n    const {githubLoginLink, vstsLoginLink} = this.props.authConfig;\n\n    const hasLoginProvider = !!(githubLoginLink || vstsLoginLink);\n\n    return (\n      <ClassNames>\n        {({css}) => (\n          <FormWrapper hasLoginProvider={hasLoginProvider}>\n            <Form\n              submitLabel={t('Continue')}\n              onSubmit={this.handleSubmit}\n              footerClass={css`\n                ${formFooterClass}\n              `}\n              errorMessage={errorMessage}\n              extraButton={\n                <LostPasswordLink to=\"/account/recover/\">\n                  {t('Lost your password?')}\n                </LostPasswordLink>\n              }\n            >\n              <TextField\n                name=\"username\"\n                placeholder={t('username or email')}\n                label={t('Account')}\n                error={errors.username}\n                required\n              />\n              <PasswordField\n                name=\"password\"\n                placeholder={t('password')}\n                label={t('Password')}\n                error={errors.password}\n                required\n              />\n            </Form>\n            {hasLoginProvider && <LoginProviders {...{vstsLoginLink, githubLoginLink}} />}\n          </FormWrapper>\n        )}\n      </ClassNames>\n    );\n  }\n}\n\nconst FormWrapper = styled('div')<{hasLoginProvider: boolean}>`\n  display: grid;\n  gap: 60px;\n  grid-template-columns: ${p => (p.hasLoginProvider ? '1fr 0.8fr' : '1fr')};\n`;\n\nconst ProviderHeading = styled('div')`\n  margin: 0;\n  font-size: 15px;\n  font-weight: bold;\n  line-height: 24px;\n`;\n\nconst ProviderWrapper = styled('div')`\n  position: relative;\n  display: grid;\n  grid-auto-rows: max-content;\n  gap: ${space(1.5)};\n\n  &:before {\n    position: absolute;\n    display: block;\n    content: '';\n    top: 0;\n    bottom: 0;\n    left: -30px;\n    border-left: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst LostPasswordLink = styled(Link)`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default LoginForm;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {ClassNames} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport Form from 'sentry/components/deprecatedforms/form';\nimport PasswordField from 'sentry/components/deprecatedforms/passwordField';\nimport RadioBooleanField from 'sentry/components/deprecatedforms/radioBooleanField';\nimport TextField from 'sentry/components/deprecatedforms/textField';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {AuthConfig} from 'sentry/types';\nimport {formFooterClass} from 'sentry/views/auth/login';\n\nconst SubscribeField = () => (\n  <RadioBooleanField\n    name=\"subscribe\"\n    yesLabel={t('Yes, I would like to receive updates via email')}\n    noLabel={t(\"No, I'd prefer not to receive these updates\")}\n    help={tct(\n      `We'd love to keep you updated via email with product and feature\n           announcements, promotions, educational materials, and events. Our\n           updates focus on relevant information, and we'll never sell your data\n           to third parties. See our [link] for more details.`,\n      {\n        link: <a href=\"https://sentry.io/privacy/\">Privacy Policy</a>,\n      }\n    )}\n  />\n);\n\ntype Props = {\n  api: Client;\n  authConfig: AuthConfig;\n};\n\ntype State = {\n  errorMessage: null | string;\n  errors: Record<string, string>;\n};\n\nclass RegisterForm extends Component<Props, State> {\n  state: State = {\n    errorMessage: null,\n    errors: {},\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = async (data, onSuccess, onError) => {\n    const {api} = this.props;\n\n    try {\n      const response = await api.requestPromise('/auth/register/', {\n        method: 'POST',\n        data,\n      });\n      onSuccess(data);\n\n      // TODO(epurkhiser): There is more we need to do to setup the user. but\n      // definitely primarily we need to init our user.\n      ConfigStore.set('user', response.user);\n\n      browserHistory.push({pathname: response.nextUri});\n    } catch (e) {\n      if (!e.responseJSON || !e.responseJSON.errors) {\n        onError(e);\n        return;\n      }\n\n      let message = e.responseJSON.detail;\n      if (e.responseJSON.errors.__all__) {\n        message = e.responseJSON.errors.__all__;\n      }\n\n      this.setState({\n        errorMessage: message,\n        errors: e.responseJSON.errors || {},\n      });\n\n      onError(e);\n    }\n  };\n\n  render() {\n    const {hasNewsletter} = this.props.authConfig;\n    const {errorMessage, errors} = this.state;\n\n    return (\n      <ClassNames>\n        {({css}) => (\n          <Form\n            initialData={{subscribe: true}}\n            submitLabel={t('Continue')}\n            onSubmit={this.handleSubmit}\n            footerClass={css`\n              ${formFooterClass}\n            `}\n            errorMessage={errorMessage}\n            extraButton={\n              <PrivacyPolicyLink href=\"https://sentry.io/privacy/\">\n                {t('Privacy Policy')}\n              </PrivacyPolicyLink>\n            }\n          >\n            <TextField\n              name=\"name\"\n              placeholder={t('Jane Bloggs')}\n              label={t('Name')}\n              error={errors.name}\n              required\n            />\n            <TextField\n              name=\"username\"\n              placeholder={t('you@example.com')}\n              label={t('Email')}\n              error={errors.username}\n              required\n            />\n            <PasswordField\n              name=\"password\"\n              placeholder={t('something super secret')}\n              label={t('Password')}\n              error={errors.password}\n              required\n            />\n            {hasNewsletter && <SubscribeField />}\n          </Form>\n        )}\n      </ClassNames>\n    );\n  }\n}\n\nconst PrivacyPolicyLink = styled(ExternalLink)`\n  color: ${p => p.theme.gray300};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default RegisterForm;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport Form from 'sentry/components/deprecatedforms/form';\nimport TextField from 'sentry/components/deprecatedforms/textField';\nimport {t, tct} from 'sentry/locale';\nimport {AuthConfig} from 'sentry/types';\n\ntype Props = {\n  api: Client;\n  authConfig: AuthConfig;\n};\n\ntype State = {\n  errorMessage: string | null;\n};\n\nclass SsoForm extends Component<Props, State> {\n  state: State = {\n    errorMessage: null,\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = async (data, onSuccess, onError) => {\n    const {api} = this.props;\n    try {\n      const response = await api.requestPromise('/auth/sso-locate/', {\n        method: 'POST',\n        data,\n      });\n      onSuccess(data);\n      browserHistory.push({pathname: response.nextUri});\n    } catch (e) {\n      if (!e.responseJSON) {\n        onError(e);\n        return;\n      }\n      const message = e.responseJSON.detail;\n      this.setState({errorMessage: message});\n      onError(e);\n    }\n  };\n\n  render() {\n    const {serverHostname} = this.props.authConfig;\n    const {errorMessage} = this.state;\n\n    return (\n      <Form\n        className=\"form-stacked\"\n        submitLabel={t('Continue')}\n        onSubmit={this.handleSubmit}\n        footerClass=\"auth-footer\"\n        errorMessage={errorMessage}\n      >\n        <TextField\n          name=\"organization\"\n          placeholder=\"acme\"\n          label={t('Organization ID')}\n          required\n          help={tct('Your ID is the slug after the hostname. e.g. [example] is [slug].', {\n            slug: <strong>acme</strong>,\n            example: <SlugExample slug=\"acme\" hostname={serverHostname} />,\n          })}\n        />\n      </Form>\n    );\n  }\n}\n\ntype SlugExampleProps = {\n  hostname: string;\n  slug: string;\n};\n\nconst SlugExample = ({hostname, slug}: SlugExampleProps) => (\n  <code>\n    {hostname}/<strong>{slug}</strong>\n  </code>\n);\n\nexport default SsoForm;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AuthConfig} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\nimport LoginForm from './loginForm';\nimport RegisterForm from './registerForm';\nimport SsoForm from './ssoForm';\n\nconst FORM_COMPONENTS = {\n  login: LoginForm,\n  register: RegisterForm,\n  sso: SsoForm,\n} as const;\n\ntype ActiveTab = keyof typeof FORM_COMPONENTS;\n\ntype TabConfig = [key: ActiveTab, label: string, disabled?: boolean];\n\ntype Props = RouteComponentProps<{orgId?: string}, {}> & {\n  api: Client;\n};\n\ntype State = {\n  activeTab: ActiveTab;\n  authConfig: null | AuthConfig;\n  error: null | boolean;\n  loading: boolean;\n};\n\nclass Login extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: null,\n    activeTab: 'login',\n    authConfig: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  handleSetTab = (activeTab: ActiveTab, event: React.MouseEvent) => {\n    this.setState({activeTab});\n    event.preventDefault();\n  };\n\n  fetchData = async () => {\n    const {api} = this.props;\n    try {\n      const response = await api.requestPromise('/auth/config/');\n\n      const {vsts_login_link, github_login_link, google_login_link, ...config} = response;\n      const authConfig = {\n        ...config,\n        vstsLoginLink: vsts_login_link,\n        githubLoginLink: github_login_link,\n        googleLoginLink: google_login_link,\n      };\n\n      this.setState({authConfig});\n    } catch (e) {\n      this.setState({error: true});\n    }\n\n    this.setState({loading: false});\n  };\n\n  get hasAuthProviders() {\n    if (this.state.authConfig === null) {\n      return false;\n    }\n\n    const {githubLoginLink, googleLoginLink, vstsLoginLink} = this.state.authConfig;\n    return !!(githubLoginLink || vstsLoginLink || googleLoginLink);\n  }\n\n  render() {\n    const {api} = this.props;\n    const {loading, error, activeTab, authConfig} = this.state;\n\n    const FormComponent = FORM_COMPONENTS[activeTab];\n\n    const tabs: TabConfig[] = [\n      ['login', t('Login')],\n      ['sso', t('Single Sign-On')],\n      ['register', t('Register'), !authConfig?.canRegister],\n    ];\n\n    const renderTab = ([key, label, disabled]: TabConfig) =>\n      !disabled && (\n        <li key={key} className={activeTab === key ? 'active' : ''}>\n          <a href=\"#\" onClick={e => this.handleSetTab(key, e)}>\n            {label}\n          </a>\n        </li>\n      );\n\n    const {orgId} = this.props.params;\n\n    return (\n      <Fragment>\n        <Header>\n          <Heading>{t('Sign in to continue')}</Heading>\n          <AuthNavTabs>{tabs.map(renderTab)}</AuthNavTabs>\n        </Header>\n        {loading && <LoadingIndicator />}\n\n        {error && (\n          <StyledLoadingError\n            message={t('Unable to load authentication configuration')}\n            onRetry={this.fetchData}\n          />\n        )}\n        {!loading && authConfig !== null && !error && (\n          <FormWrapper hasAuthProviders={this.hasAuthProviders}>\n            {orgId !== undefined && (\n              <Alert\n                type=\"warning\"\n                trailingItems={\n                  <Button to=\"/\" size=\"xs\">\n                    Reload\n                  </Button>\n                }\n              >\n                {tct(\n                  \"Experimental SPA mode does not currently support SSO style login. To develop against the [org] you'll need to copy your production session cookie.\",\n                  {org: this.props.params.orgId}\n                )}\n              </Alert>\n            )}\n            <FormComponent {...{api, authConfig}} />\n          </FormWrapper>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst StyledLoadingError = styled(LoadingError)`\n  margin: ${space(2)};\n`;\n\nconst Header = styled('div')`\n  border-bottom: 1px solid ${p => p.theme.border};\n  padding: 20px 40px 0;\n`;\n\nconst Heading = styled('h3')`\n  font-size: 24px;\n  margin: 0 0 20px 0;\n`;\n\nconst AuthNavTabs = styled(NavTabs)`\n  margin: 0;\n`;\n\nconst FormWrapper = styled('div')<{hasAuthProviders: boolean}>`\n  padding: 35px;\n  width: ${p => (p.hasAuthProviders ? '600px' : '490px')};\n`;\n\nconst formFooterClass = `\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(1)};\n  align-items: center;\n  justify-items: end;\n  border-top: none;\n  margin-bottom: 0;\n  padding: 0;\n`;\n\nexport {formFooterClass};\n\nexport default withApi(Login);\n"],"names":["LoginProviders","vstsLoginLink","githubLoginLink","googleLoginLink","ProviderWrapper","ProviderHeading","t","align","size","icon","href","LoginForm","Component","errorMessage","errors","async","data","onSuccess","onError","response","this","props","api","requestPromise","method","ConfigStore","user","browserHistory","pathname","nextUri","e","responseJSON","message","detail","__all__","setState","render","state","authConfig","hasLoginProvider","css","FormWrapper","submitLabel","onSubmit","handleSubmit","footerClass","formFooterClass","extraButton","LostPasswordLink","to","name","placeholder","label","error","username","required","password","p","space","theme","border","Link","gray300","fontSizeMedium","textColor","SubscribeField","yesLabel","noLabel","help","tct","link","RegisterForm","hasNewsletter","initialData","subscribe","PrivacyPolicyLink","ExternalLink","SsoForm","serverHostname","className","slug","example","SlugExample","hostname","FORM_COMPONENTS","login","register","sso","Login","loading","activeTab","event","preventDefault","vsts_login_link","github_login_link","google_login_link","config","componentDidMount","fetchData","hasAuthProviders","FormComponent","tabs","canRegister","orgId","params","Fragment","Header","Heading","AuthNavTabs","map","key","disabled","onClick","handleSetTab","StyledLoadingError","onRetry","undefined","type","trailingItems","org","LoadingError","NavTabs","withApi"],"sourceRoot":""}