{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupMerged_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/stores/groupingStore.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedItem.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedToolbar.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedList.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/index.tsx"],"sourcesContent":["import pick from 'lodash/pick';\nimport {createStore} from 'reflux';\n\nimport {mergeGroups} from 'sentry/actionCreators/group';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Group, Organization, Project} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\n\nimport {CommonStoreDefinition} from './types';\n\n// Between 0-100\nconst MIN_SCORE = 0.6;\n\n// @param score: {[key: string]: number}\nconst checkBelowThreshold = (scores = {}) => {\n  const scoreKeys = Object.keys(scores);\n  return !scoreKeys.map(key => scores[key]).find(score => score >= MIN_SCORE);\n};\n\ntype State = {\n  // \"Compare\" button state\n  enableFingerprintCompare: boolean;\n  error: boolean;\n  filteredSimilarItems: SimilarItem[];\n  loading: boolean;\n  mergeDisabled: boolean;\n  mergeList: Array<string>;\n  mergeState: Map<any, any>;\n  // List of fingerprints that belong to issue\n  mergedItems: Fingerprint[];\n  mergedLinks: string;\n  similarItems: SimilarItem[];\n  similarLinks: string;\n  // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n  unmergeDisabled: boolean;\n  // If \"Collapse All\" was just used, this will be true\n  unmergeLastCollapsed: boolean;\n  // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n  unmergeList: Map<any, any>;\n  // Map of state for each fingerprint (i.e. \"collapsed\")\n  unmergeState: Map<any, any>;\n};\n\ntype ScoreMap = Record<string, number | null>;\n\ntype ApiFingerprint = {\n  id: string;\n  latestEvent: Event;\n  childId?: string;\n  childLabel?: string;\n  eventCount?: number;\n  label?: string;\n  lastSeen?: string;\n  parentId?: string;\n  parentLabel?: string;\n  state?: string;\n};\n\ntype ChildFingerprint = {\n  childId: string;\n  childLabel?: string;\n  eventCount?: number;\n  lastSeen?: string;\n  latestEvent?: Event;\n};\n\nexport type Fingerprint = {\n  children: Array<ChildFingerprint>;\n  eventCount: number;\n  id: string;\n  latestEvent: Event;\n  label?: string;\n  lastSeen?: string;\n  parentId?: string;\n  parentLabel?: string;\n  state?: string;\n};\n\nexport type SimilarItem = {\n  isBelowThreshold: boolean;\n  issue: Group;\n  aggregate?: {\n    exception: number;\n    message: number;\n  };\n  score?: Record<string, number | null>;\n  scoresByInterface?: {\n    exception: Array<[string, number | null]>;\n    message: Array<[string, any | null]>;\n  };\n};\n\ntype ResponseProcessors = {\n  merged: (item: ApiFingerprint[]) => Fingerprint[];\n  similar: (data: [Group, ScoreMap]) => {\n    aggregate: Record<string, number>;\n    isBelowThreshold: boolean;\n    issue: Group;\n    score: ScoreMap;\n    scoresByInterface: Record<string, Array<[string, number | null]>>;\n  };\n};\n\ntype DataKey = keyof ResponseProcessors;\n\ntype ResultsAsArrayDataMerged = Parameters<ResponseProcessors['merged']>[0];\n\ntype ResultsAsArrayDataSimilar = Array<Parameters<ResponseProcessors['similar']>[0]>;\n\ntype ResultsAsArray = Array<{\n  data: ResultsAsArrayDataMerged | ResultsAsArrayDataSimilar;\n  dataKey: DataKey;\n  links: string | null;\n}>;\n\ntype IdState = {\n  busy?: boolean;\n  checked?: boolean;\n  collapsed?: boolean;\n};\n\ntype InternalDefinition = {\n  api: Client;\n};\n\ninterface GroupingStoreDefinition\n  extends CommonStoreDefinition<State>,\n    InternalDefinition {\n  getInitialState(): State;\n  init(): void;\n  isAllUnmergedSelected(): boolean;\n  onFetch(\n    toFetchArray?: Array<{\n      dataKey: DataKey;\n      endpoint: string;\n      queryParams?: Record<string, any>;\n    }>\n  ): Promise<any>;\n  onMerge(props: {\n    projectId: Project['id'];\n    params?: {\n      groupId: Group['id'];\n      orgId: Organization['id'];\n    };\n    query?: string;\n  }): undefined | Promise<any>;\n  onToggleCollapseFingerprint(fingerprint: string): void;\n  onToggleCollapseFingerprints(): void;\n  onToggleMerge(id: string): void;\n  onToggleUnmerge(props: [string, string] | string): void;\n  onUnmerge(props: {\n    groupId: Group['id'];\n    errorMessage?: string;\n    loadingMessage?: string;\n    successMessage?: string;\n  }): void;\n  setStateForId(\n    map: Map<string, IdState>,\n    idOrIds: Array<string> | string,\n    newState: IdState\n  ): Array<IdState>;\n  triggerFetchState(): Pick<\n    State,\n    | 'similarItems'\n    | 'filteredSimilarItems'\n    | 'mergedItems'\n    | 'mergedLinks'\n    | 'similarLinks'\n    | 'mergeState'\n    | 'unmergeState'\n    | 'loading'\n    | 'error'\n  >;\n  triggerMergeState(): Pick<State, 'mergeState' | 'mergeDisabled' | 'mergeList'>;\n  triggerUnmergeState(): Pick<\n    State,\n    | 'unmergeDisabled'\n    | 'unmergeState'\n    | 'unmergeList'\n    | 'enableFingerprintCompare'\n    | 'unmergeLastCollapsed'\n  >;\n}\n\nconst storeConfig: GroupingStoreDefinition = {\n  api: new Client(),\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    const state = this.getInitialState();\n\n    Object.entries(state).forEach(([key, value]) => {\n      this[key] = value;\n    });\n  },\n\n  getInitialState() {\n    return {\n      // List of fingerprints that belong to issue\n      mergedItems: [],\n      // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n      unmergeList: new Map(),\n      // Map of state for each fingerprint (i.e. \"collapsed\")\n      unmergeState: new Map(),\n      // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n      unmergeDisabled: true,\n      // If \"Collapse All\" was just used, this will be true\n      unmergeLastCollapsed: false,\n      // \"Compare\" button state\n      enableFingerprintCompare: false,\n      similarItems: [],\n      filteredSimilarItems: [],\n      similarLinks: '',\n      mergeState: new Map(),\n      mergeList: [],\n      mergedLinks: '',\n      mergeDisabled: false,\n      loading: true,\n      error: false,\n    };\n  },\n\n  setStateForId(map, idOrIds, newState) {\n    const ids = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n\n    return ids.map(id => {\n      const state = (map.has(id) && map.get(id)) || {};\n      const mergedState = {...state, ...newState};\n      map.set(id, mergedState);\n      return mergedState;\n    });\n  },\n\n  isAllUnmergedSelected() {\n    const lockedItems =\n      (Array.from(this.unmergeState.values()) as Array<IdState>).filter(\n        ({busy}) => busy\n      ) || [];\n    return (\n      this.unmergeList.size ===\n      this.mergedItems.filter(({latestEvent}) => !!latestEvent).length -\n        lockedItems.length\n    );\n  },\n\n  // Fetches data\n  onFetch(toFetchArray) {\n    const requests = toFetchArray || this.toFetchArray;\n\n    // Reset state and trigger update\n    this.init();\n    this.triggerFetchState();\n\n    const promises = requests.map(\n      ({endpoint, queryParams, dataKey}) =>\n        new Promise((resolve, reject) => {\n          this.api.request(endpoint, {\n            method: 'GET',\n            data: queryParams,\n            success: (data, _, resp) => {\n              resolve({\n                dataKey,\n                data,\n                links: resp ? resp.getResponseHeader('Link') : null,\n              });\n            },\n            error: err => {\n              const error = err.responseJSON?.detail || true;\n              reject(error);\n            },\n          });\n        })\n    );\n\n    const responseProcessors: ResponseProcessors = {\n      merged: items => {\n        const newItemsMap: Record<string, Fingerprint> = {};\n        const newItems: Fingerprint[] = [];\n\n        items.forEach(item => {\n          if (!newItemsMap[item.id]) {\n            const newItem = {\n              eventCount: 0,\n              children: [],\n              // lastSeen and latestEvent properties are correct\n              // since the server returns items in\n              // descending order of lastSeen\n              ...item,\n            };\n            // Check for locked items\n            this.setStateForId(this.unmergeState, item.id, {\n              busy: item.state === 'locked',\n            });\n\n            newItemsMap[item.id] = newItem;\n            newItems.push(newItem);\n          }\n\n          const newItem = newItemsMap[item.id];\n          const {childId, childLabel, eventCount, lastSeen, latestEvent} = item;\n\n          if (eventCount) {\n            newItem.eventCount += eventCount;\n          }\n\n          if (childId) {\n            newItem.children.push({\n              childId,\n              childLabel,\n              lastSeen,\n              latestEvent,\n              eventCount,\n            });\n          }\n        });\n\n        return newItems;\n      },\n      similar: ([issue, scoreMap]) => {\n        // Hide items with a low scores\n        const isBelowThreshold = checkBelowThreshold(scoreMap);\n\n        // List of scores indexed by interface (i.e., exception and message)\n        // Note: for v2, the interface is always \"similarity\". When v2 is\n        // rolled out we can get rid of this grouping entirely.\n        const scoresByInterface = Object.keys(scoreMap)\n          .map(scoreKey => [scoreKey, scoreMap[scoreKey]])\n          .reduce((acc, [scoreKey, score]) => {\n            // v1 layout: '<interface>:...'\n            const [interfaceName] = String(scoreKey).split(':');\n\n            if (!acc[interfaceName]) {\n              acc[interfaceName] = [];\n            }\n            acc[interfaceName].push([scoreKey, score]);\n\n            return acc;\n          }, {});\n\n        // Aggregate score by interface\n        const aggregate = Object.keys(scoresByInterface)\n          .map(interfaceName => [interfaceName, scoresByInterface[interfaceName]])\n          .reduce((acc, [interfaceName, allScores]) => {\n            // `null` scores means feature was not present in both issues, do not\n            // include in aggregate\n            const scores = allScores.filter(([, score]) => score !== null);\n\n            const avg = scores.reduce((sum, [, score]) => sum + score, 0) / scores.length;\n\n            acc[interfaceName] = avg;\n            return acc;\n          }, {});\n\n        return {\n          issue,\n          score: scoreMap,\n          scoresByInterface,\n          aggregate,\n          isBelowThreshold,\n        };\n      },\n    };\n\n    if (toFetchArray) {\n      this.toFetchArray = toFetchArray;\n    }\n\n    return Promise.all(promises).then(\n      resultsArray => {\n        (resultsArray as ResultsAsArray).forEach(({dataKey, data, links}) => {\n          const items =\n            dataKey === 'similar'\n              ? (data as ResultsAsArrayDataSimilar).map(responseProcessors[dataKey])\n              : responseProcessors[dataKey](data as ResultsAsArrayDataMerged);\n\n          this[`${dataKey}Items`] = items;\n          this[`${dataKey}Links`] = links;\n        });\n\n        this.loading = false;\n        this.error = false;\n        this.triggerFetchState();\n      },\n      () => {\n        this.loading = false;\n        this.error = true;\n        this.triggerFetchState();\n      }\n    );\n  },\n\n  // Toggle merge checkbox\n  onToggleMerge(id) {\n    let checked = false;\n\n    // Don't do anything if item is busy\n    const state = this.mergeState.has(id) ? this.mergeState.get(id) : undefined;\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.mergeList.includes(id)) {\n      this.mergeList = this.mergeList.filter(item => item !== id);\n    } else {\n      this.mergeList = [...this.mergeList, id];\n      checked = true;\n    }\n\n    this.setStateForId(this.mergeState, id, {\n      checked,\n    });\n\n    this.triggerMergeState();\n  },\n\n  // Toggle unmerge check box\n  onToggleUnmerge([fingerprint, eventId]) {\n    let checked = false;\n\n    // Uncheck an item to unmerge\n    const state = this.unmergeState.get(fingerprint);\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.unmergeList.has(fingerprint)) {\n      this.unmergeList.delete(fingerprint);\n    } else {\n      this.unmergeList.set(fingerprint, eventId);\n      checked = true;\n    }\n\n    // Update \"checked\" state for row\n    this.setStateForId(this.unmergeState, fingerprint, {\n      checked,\n    });\n\n    // Unmerge should be disabled if 0 or all items are selected, or if there's\n    // only one item to select\n    this.unmergeDisabled =\n      this.mergedItems.size <= 1 ||\n      this.unmergeList.size === 0 ||\n      this.isAllUnmergedSelected();\n\n    this.enableFingerprintCompare = this.unmergeList.size === 2;\n\n    this.triggerUnmergeState();\n  },\n\n  onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {\n    const ids = Array.from(this.unmergeList.keys()) as Array<string>;\n\n    return new Promise((resolve, reject) => {\n      if (this.isAllUnmergedSelected()) {\n        reject(new Error('Not allowed to unmerge ALL events'));\n        return;\n      }\n\n      // Disable unmerge button\n      this.unmergeDisabled = true;\n\n      // Disable rows\n      this.setStateForId(this.unmergeState, ids, {\n        checked: false,\n        busy: true,\n      });\n      this.triggerUnmergeState();\n      addLoadingMessage(loadingMessage);\n\n      this.api.request(`/issues/${groupId}/hashes/`, {\n        method: 'DELETE',\n        query: {\n          id: ids,\n        },\n        success: () => {\n          addSuccessMessage(successMessage);\n\n          // Busy rows after successful Unmerge\n          this.setStateForId(this.unmergeState, ids, {\n            checked: false,\n            busy: true,\n          });\n          this.unmergeList.clear();\n        },\n        error: () => {\n          addErrorMessage(errorMessage);\n          this.setStateForId(this.unmergeState, ids, {\n            checked: true,\n            busy: false,\n          });\n        },\n        complete: () => {\n          this.unmergeDisabled = false;\n          resolve(this.triggerUnmergeState());\n        },\n      });\n    });\n  },\n\n  // For cross-project views, we need to pass projectId instead of\n  // depending on router params (since we will only have orgId in that case)\n  onMerge({params, query, projectId}) {\n    if (!params) {\n      return undefined;\n    }\n\n    const ids = this.mergeList;\n\n    this.mergeDisabled = true;\n\n    this.setStateForId(this.mergeState, ids as Array<string>, {\n      busy: true,\n    });\n\n    this.triggerMergeState();\n\n    const promise = new Promise(resolve => {\n      // Disable merge button\n      const {orgId, groupId} = params;\n\n      mergeGroups(\n        this.api,\n        {\n          orgId,\n          projectId,\n          itemIds: [...ids, groupId],\n          query,\n        },\n        {\n          success: data => {\n            if (data?.merge?.parent) {\n              this.trigger({\n                mergedParent: data.merge.parent,\n              });\n            }\n\n            // Hide rows after successful merge\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: false,\n              busy: true,\n            });\n            this.mergeList = [];\n          },\n          error: () => {\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: true,\n              busy: false,\n            });\n          },\n          complete: () => {\n            this.mergeDisabled = false;\n            resolve(this.triggerMergeState());\n          },\n        }\n      );\n    });\n\n    return promise;\n  },\n\n  // Toggle collapsed state of all fingerprints\n  onToggleCollapseFingerprints() {\n    this.setStateForId(\n      this.unmergeState,\n      this.mergedItems.map(({id}) => id),\n      {\n        collapsed: !this.unmergeLastCollapsed,\n      }\n    );\n\n    this.unmergeLastCollapsed = !this.unmergeLastCollapsed;\n\n    this.trigger({\n      unmergeLastCollapsed: this.unmergeLastCollapsed,\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  onToggleCollapseFingerprint(fingerprint) {\n    const collapsed =\n      this.unmergeState.has(fingerprint) && this.unmergeState.get(fingerprint).collapsed;\n    this.setStateForId(this.unmergeState, fingerprint, {collapsed: !collapsed});\n    this.trigger({\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  triggerFetchState() {\n    const state = {\n      similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),\n      filteredSimilarItems: this.similarItems.filter(\n        ({isBelowThreshold}) => isBelowThreshold\n      ),\n      ...pick(this, [\n        'mergedItems',\n        'mergedLinks',\n        'similarLinks',\n        'mergeState',\n        'unmergeState',\n        'loading',\n        'error',\n        'enableFingerprintCompare',\n        'unmergeList',\n      ]),\n    };\n    this.trigger(state);\n    return state;\n  },\n\n  triggerUnmergeState() {\n    const state = pick(this, [\n      'unmergeDisabled',\n      'unmergeState',\n      'unmergeList',\n      'enableFingerprintCompare',\n      'unmergeLastCollapsed',\n    ]);\n    this.trigger(state);\n    return state;\n  },\n\n  triggerMergeState() {\n    const state = pick(this, ['mergeDisabled', 'mergeState', 'mergeList']);\n    this.trigger(state);\n    return state;\n  },\n\n  getState(): State {\n    return {\n      ...pick(this, [\n        'enableFingerprintCompare',\n        'error',\n        'filteredSimilarItems',\n        'loading',\n        'mergeDisabled',\n        'mergeList',\n        'mergeState',\n        'mergeState',\n        'mergedItems',\n        'mergedLinks',\n        'similarItems',\n        'similarLinks',\n        'unmergeDisabled',\n        'unmergeLastCollapsed',\n        'unmergeList',\n        'unmergeState',\n      ]),\n    };\n  },\n};\n\nconst GroupingStore = createStore(storeConfig);\nexport default GroupingStore;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport Checkbox from 'sentry/components/checkbox';\nimport EventOrGroupHeader from 'sentry/components/eventOrGroupHeader';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport GroupingStore, {Fingerprint} from 'sentry/stores/groupingStore';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\ntype Props = {\n  fingerprint: Fingerprint;\n  organization: Organization;\n  totalFingerprint: number;\n};\n\ntype State = {\n  busy: boolean;\n  checked: boolean;\n  collapsed: boolean;\n};\n\nclass MergedItem extends Component<Props, State> {\n  state: State = {\n    collapsed: false,\n    checked: false,\n    busy: false,\n  };\n\n  listener = GroupingStore.listen(data => this.onGroupChange(data), undefined);\n\n  onGroupChange = ({unmergeState}) => {\n    if (!unmergeState) {\n      return;\n    }\n\n    const {fingerprint} = this.props;\n    const stateForId = unmergeState.has(fingerprint.id)\n      ? unmergeState.get(fingerprint.id)\n      : undefined;\n\n    if (!stateForId) {\n      return;\n    }\n\n    Object.keys(stateForId).forEach(key => {\n      if (stateForId[key] === this.state[key]) {\n        return;\n      }\n\n      this.setState(prevState => ({...prevState, [key]: stateForId[key]}));\n    });\n  };\n\n  handleToggleEvents = () => {\n    const {fingerprint} = this.props;\n    GroupingStore.onToggleCollapseFingerprint(fingerprint.id);\n  };\n\n  // Disable default behavior of toggling checkbox\n  handleLabelClick(event: React.MouseEvent) {\n    event.preventDefault();\n  }\n\n  handleToggle = () => {\n    const {fingerprint} = this.props;\n    const {latestEvent} = fingerprint;\n\n    if (this.state.busy) {\n      return;\n    }\n\n    // clicking anywhere in the row will toggle the checkbox\n    GroupingStore.onToggleUnmerge([fingerprint.id, latestEvent.id]);\n  };\n\n  handleCheckClick() {\n    // noop because of react warning about being a controlled input without `onChange`\n    // we handle change via row click\n  }\n\n  renderFingerprint(id: string, label?: string) {\n    if (!label) {\n      return id;\n    }\n\n    return (\n      <Tooltip title={id}>\n        <code>{label}</code>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const {fingerprint, organization, totalFingerprint} = this.props;\n    const {latestEvent, id, label} = fingerprint;\n    const {collapsed, busy, checked} = this.state;\n    const checkboxDisabled = busy || totalFingerprint === 1;\n\n    // `latestEvent` can be null if last event w/ fingerprint is not within retention period\n    return (\n      <MergedGroup busy={busy}>\n        <Controls expanded={!collapsed}>\n          <ActionWrapper onClick={this.handleToggle}>\n            <Tooltip\n              disabled={!checkboxDisabled}\n              title={\n                checkboxDisabled && totalFingerprint === 1\n                  ? t('To check, the list must contain 2 or more items')\n                  : undefined\n              }\n            >\n              <Checkbox\n                id={id}\n                value={id}\n                checked={checked}\n                disabled={checkboxDisabled}\n                onChange={this.handleCheckClick}\n              />\n            </Tooltip>\n\n            <FingerprintLabel onClick={this.handleLabelClick} htmlFor={id}>\n              {this.renderFingerprint(id, label)}\n            </FingerprintLabel>\n          </ActionWrapper>\n\n          <div>\n            <Collapse onClick={this.handleToggleEvents}>\n              <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n            </Collapse>\n          </div>\n        </Controls>\n\n        {!collapsed && (\n          <MergedEventList className=\"event-list\">\n            {latestEvent && (\n              <EventDetails className=\"event-details\">\n                <EventOrGroupHeader\n                  data={latestEvent}\n                  organization={organization}\n                  hideIcons\n                  hideLevel\n                />\n              </EventDetails>\n            )}\n          </MergedEventList>\n        )}\n      </MergedGroup>\n    );\n  }\n}\n\nconst MergedGroup = styled('div')<{busy: boolean}>`\n  ${p => p.busy && 'opacity: 0.2'};\n`;\n\nconst ActionWrapper = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  gap: ${space(1)};\n\n  /* Can't use styled components for this because of broad selector */\n  input[type='checkbox'] {\n    margin: 0;\n  }\n`;\n\nconst Controls = styled('div')<{expanded: boolean}>`\n  display: flex;\n  justify-content: space-between;\n  border-top: 1px solid ${p => p.theme.innerBorder};\n  background-color: ${p => p.theme.backgroundSecondary};\n  padding: ${space(0.5)} ${space(1)};\n  ${p => p.expanded && `border-bottom: 1px solid ${p.theme.innerBorder}`};\n\n  ${MergedGroup} {\n    &:first-child & {\n      border-top: none;\n    }\n    &:last-child & {\n      border-top: none;\n      border-bottom: 1px solid ${p => p.theme.innerBorder};\n    }\n  }\n`;\n\nconst FingerprintLabel = styled('label')`\n  font-family: ${p => p.theme.text.familyMono};\n\n  ${Controls} & {\n    font-weight: 400;\n    margin: 0;\n  }\n`;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n\nconst MergedEventList = styled('div')`\n  overflow: hidden;\n  border: none;\n  background-color: ${p => p.theme.background};\n`;\n\nconst EventDetails = styled('div')`\n  display: flex;\n  justify-content: space-between;\n\n  .event-list & {\n    padding: ${space(1)};\n  }\n`;\n\nexport default MergedItem;\n","import styled from '@emotion/styled';\n\nimport {openDiffModal} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport {PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport GroupingStore from 'sentry/stores/groupingStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport space from 'sentry/styles/space';\nimport {Group, Organization, Project} from 'sentry/types';\n\ntype Props = {\n  groupId: Group['id'];\n  onToggleCollapse: () => void;\n  onUnmerge: () => void;\n  orgId: Organization['slug'];\n  project: Project;\n};\n\nexport function MergedToolbar({\n  groupId,\n  project,\n  orgId,\n  onUnmerge,\n  onToggleCollapse,\n}: Props) {\n  const {\n    unmergeList,\n    mergedItems,\n    unmergeLastCollapsed,\n    unmergeDisabled,\n    enableFingerprintCompare,\n  } = useLegacyStore(GroupingStore);\n\n  const unmergeCount = unmergeList?.size ?? 0;\n\n  function handleShowDiff(event: React.MouseEvent) {\n    event.stopPropagation();\n\n    const entries = unmergeList.entries();\n\n    // `unmergeList` should only have 2 items in map\n    if (unmergeList.size !== 2) {\n      return;\n    }\n\n    // only need eventId, not fingerprint\n    const [baseEventId, targetEventId] = Array.from(entries).map(\n      ([, eventId]) => eventId\n    );\n\n    openDiffModal({\n      targetIssueId: groupId,\n      project,\n      baseIssueId: groupId,\n      orgId,\n      baseEventId,\n      targetEventId,\n    });\n  }\n\n  const unmergeDisabledReason =\n    mergedItems.length <= 1\n      ? t('To unmerge, the list must contain 2 or more items')\n      : unmergeList.size === 0\n      ? t('To unmerge, 1 or more items must be selected')\n      : GroupingStore.isAllUnmergedSelected()\n      ? t('We are unable to unmerge all items at once')\n      : undefined;\n\n  return (\n    <PanelHeader hasButtons>\n      <div>\n        <Confirm\n          disabled={unmergeDisabled}\n          onConfirm={onUnmerge}\n          message={t(\n            'These events will be unmerged and grouped into a new issue. Are you sure you want to unmerge these events?'\n          )}\n        >\n          <Button size=\"sm\" title={unmergeDisabledReason}>\n            {mergedItems.length <= 1\n              ? t('Unmerge')\n              : tct('Unmerge ([itemsSelectedQuantity])', {\n                  itemsSelectedQuantity: unmergeCount,\n                })}\n          </Button>\n        </Confirm>\n\n        <CompareButton\n          size=\"sm\"\n          disabled={!enableFingerprintCompare}\n          onClick={handleShowDiff}\n          title={\n            !enableFingerprintCompare\n              ? t('To compare, exactly 2 items must be selected')\n              : undefined\n          }\n        >\n          {t('Compare')}\n        </CompareButton>\n      </div>\n      <Button size=\"sm\" onClick={onToggleCollapse}>\n        {unmergeLastCollapsed ? t('Expand All') : t('Collapse All')}\n      </Button>\n    </PanelHeader>\n  );\n}\n\nconst CompareButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n","import {Fragment} from 'react';\n\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport QueryCount from 'sentry/components/queryCount';\nimport {t} from 'sentry/locale';\nimport {Fingerprint} from 'sentry/stores/groupingStore';\nimport {Group, Organization, Project} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport MergedItem from './mergedItem';\nimport {MergedToolbar} from './mergedToolbar';\n\ntype Props = {\n  groupId: Group['id'];\n  /*\n   * From GroupingStore.onToggleCollapseFingerprints\n   */\n  onToggleCollapse: () => void;\n  /**\n   * From GroupMergedView -> handleUnmerge\n   */\n  onUnmerge: () => void;\n  organization: Organization;\n  project: Project;\n  fingerprints?: Fingerprint[];\n  pageLinks?: string;\n};\n\nfunction MergedList({\n  fingerprints = [],\n  pageLinks,\n  onToggleCollapse,\n  onUnmerge,\n  organization,\n  groupId,\n  project,\n}: Props) {\n  const fingerprintsWithLatestEvent = fingerprints.filter(\n    ({latestEvent}) => !!latestEvent\n  );\n  const hasResults = fingerprintsWithLatestEvent.length > 0;\n\n  if (!hasResults) {\n    return (\n      <Panel>\n        <EmptyStateWarning>\n          <p>{t(\"There don't seem to be any hashes for this issue.\")}</p>\n        </EmptyStateWarning>\n      </Panel>\n    );\n  }\n\n  return (\n    <Fragment>\n      <h4>\n        <span>{t('Merged fingerprints with latest event')}</span>{' '}\n        <QueryCount count={fingerprintsWithLatestEvent.length} />\n      </h4>\n\n      <Panel>\n        <MergedToolbar\n          onToggleCollapse={onToggleCollapse}\n          onUnmerge={onUnmerge}\n          orgId={organization.slug}\n          project={project}\n          groupId={groupId}\n        />\n\n        <PanelBody>\n          {fingerprintsWithLatestEvent.map(fingerprint => (\n            <MergedItem\n              key={fingerprint.id}\n              organization={organization}\n              fingerprint={fingerprint}\n              totalFingerprint={fingerprintsWithLatestEvent.length}\n            />\n          ))}\n        </PanelBody>\n      </Panel>\n      {pageLinks && <Pagination pageLinks={pageLinks} />}\n    </Fragment>\n  );\n}\n\nexport default withOrganization(MergedList);\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as qs from 'query-string';\n\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport GroupingStore, {Fingerprint} from 'sentry/stores/groupingStore';\nimport {Group, Organization, Project} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport MergedList from './mergedList';\n\ntype Props = RouteComponentProps<\n  {groupId: Group['id']; orgId: Organization['slug']},\n  {}\n> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  mergedItems: Array<Fingerprint>;\n  query: string;\n  mergedLinks?: string;\n};\n\nclass GroupMergedView extends Component<Props, State> {\n  state: State = {\n    mergedItems: [],\n    loading: true,\n    error: false,\n    query: this.props.location.query.query || '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (\n      nextProps.params.groupId !== this.props.params.groupId ||\n      nextProps.location.search !== this.props.location.search\n    ) {\n      const queryParams = nextProps.location.query;\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.listener?.();\n  }\n\n  onGroupingChange = ({mergedItems, mergedLinks, loading, error}) => {\n    if (mergedItems) {\n      this.setState({\n        mergedItems,\n        mergedLinks,\n        loading: typeof loading !== 'undefined' ? loading : false,\n        error: typeof error !== 'undefined' ? error : false,\n      });\n    }\n  };\n\n  listener = GroupingStore.listen(this.onGroupingChange, undefined);\n\n  getEndpoint() {\n    const {params, location} = this.props;\n    const {groupId} = params;\n\n    const queryParams = {\n      ...location.query,\n      limit: 50,\n      query: this.state.query,\n    };\n\n    return `/issues/${groupId}/hashes/?${qs.stringify(queryParams)}`;\n  }\n\n  fetchData = () => {\n    GroupingStore.onFetch([\n      {\n        endpoint: this.getEndpoint(),\n        dataKey: 'merged',\n        queryParams: this.props.location.query,\n      },\n    ]);\n  };\n\n  handleUnmerge = () => {\n    GroupingStore.onUnmerge({\n      groupId: this.props.params.groupId,\n      loadingMessage: t('Unmerging events\\u2026'),\n      successMessage: t('Events successfully queued for unmerging.'),\n      errorMessage: t('Unable to queue events for unmerging.'),\n    });\n  };\n\n  render() {\n    const {project, params} = this.props;\n    const {groupId} = params;\n    const {loading: isLoading, error, mergedItems, mergedLinks} = this.state;\n    const isError = error && !isLoading;\n    const isLoadedSuccessfully = !isError && !isLoading;\n\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">\n            {t(\n              'This is an experimental feature. Data may not be immediately available while we process unmerges.'\n            )}\n          </Alert>\n\n          {isLoading && <LoadingIndicator />}\n          {isError && (\n            <LoadingError\n              message={t('Unable to load merged events, please try again later')}\n              onRetry={this.fetchData}\n            />\n          )}\n\n          {isLoadedSuccessfully && (\n            <MergedList\n              project={project}\n              fingerprints={mergedItems}\n              pageLinks={mergedLinks}\n              groupId={groupId}\n              onUnmerge={this.handleUnmerge}\n              onToggleCollapse={GroupingStore.onToggleCollapseFingerprints}\n            />\n          )}\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nexport {GroupMergedView};\n\nexport default withOrganization(GroupMergedView);\n"],"names":["storeConfig","api","Client","init","state","this","getInitialState","Object","entries","forEach","key","value","mergedItems","unmergeList","Map","unmergeState","unmergeDisabled","unmergeLastCollapsed","enableFingerprintCompare","similarItems","filteredSimilarItems","similarLinks","mergeState","mergeList","mergedLinks","mergeDisabled","loading","error","setStateForId","map","idOrIds","newState","Array","isArray","id","mergedState","has","get","set","isAllUnmergedSelected","lockedItems","from","values","filter","busy","size","latestEvent","length","onFetch","toFetchArray","requests","triggerFetchState","promises","endpoint","queryParams","dataKey","Promise","resolve","reject","request","method","data","success","_","resp","links","getResponseHeader","err","responseJSON","detail","responseProcessors","merged","items","newItemsMap","newItems","item","newItem","eventCount","children","push","childId","childLabel","lastSeen","similar","issue","scoreMap","isBelowThreshold","scores","keys","find","score","checkBelowThreshold","scoresByInterface","scoreKey","reduce","acc","interfaceName","String","split","aggregate","allScores","avg","sum","all","then","resultsArray","onToggleMerge","checked","undefined","includes","triggerMergeState","onToggleUnmerge","fingerprint","eventId","delete","triggerUnmergeState","onUnmerge","groupId","loadingMessage","successMessage","errorMessage","ids","Error","addLoadingMessage","query","addSuccessMessage","clear","addErrorMessage","complete","onMerge","params","projectId","orgId","mergeGroups","itemIds","merge","parent","trigger","mergedParent","onToggleCollapseFingerprints","collapsed","onToggleCollapseFingerprint","pick","getState","createStore","MergedItem","Component","GroupingStore","onGroupChange","props","stateForId","setState","prevState","handleLabelClick","event","preventDefault","handleCheckClick","renderFingerprint","label","title","render","organization","totalFingerprint","checkboxDisabled","MergedGroup","Controls","expanded","ActionWrapper","onClick","handleToggle","disabled","t","onChange","FingerprintLabel","htmlFor","Collapse","handleToggleEvents","direction","MergedEventList","className","EventDetails","hideIcons","hideLevel","p","space","theme","innerBorder","backgroundSecondary","text","familyMono","background","MergedToolbar","project","onToggleCollapse","useLegacyStore","unmergeCount","unmergeDisabledReason","hasButtons","onConfirm","message","tct","itemsSelectedQuantity","CompareButton","stopPropagation","baseEventId","targetEventId","openDiffModal","targetIssueId","baseIssueId","Button","MergedList","fingerprints","pageLinks","fingerprintsWithLatestEvent","Fragment","count","slug","withOrganization","GroupMergedView","location","onGroupingChange","getEndpoint","componentDidMount","fetchData","componentWillReceiveProps","nextProps","search","componentWillUnmount","listener","limit","qs","isLoading","isError","isLoadedSuccessfully","fullWidth","type","onRetry","handleUnmerge"],"sourceRoot":""}