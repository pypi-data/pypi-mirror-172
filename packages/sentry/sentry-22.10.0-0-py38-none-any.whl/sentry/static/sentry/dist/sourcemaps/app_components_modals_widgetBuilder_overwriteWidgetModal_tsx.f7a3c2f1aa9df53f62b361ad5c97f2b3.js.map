{"version":3,"file":"chunks/app_components_modals_widgetBuilder_overwriteWidgetModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/widgetBuilder/overwriteWidgetModal.tsx","webpack:///./app/views/dashboardsV2/types.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/widgetCard.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/widgetLibrary/card.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Card} from 'sentry/views/dashboardsV2/widgetBuilder/widgetLibrary/card';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nexport type OverwriteWidgetModalProps = {\n  iconColor: string;\n  onConfirm: () => void;\n  widget: WidgetTemplate;\n};\n\ntype Props = ModalRenderProps & OverwriteWidgetModalProps;\n\nconst MODAL_DESCRIPTION = t(\n  \"You've already started building this widget and will lose unsaved changes. Are you sure you want to overwrite this widget with the template values?\"\n);\n\nfunction OverwriteWidgetModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  onConfirm,\n  widget,\n  iconColor,\n}: Props) {\n  function handleConfirm() {\n    onConfirm();\n    closeModal();\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Overwrite Widget')}</h4>\n      </Header>\n      <Body>\n        {MODAL_DESCRIPTION}\n        <CardWrapper>\n          <Card widget={widget} iconColor={iconColor} />\n        </CardWrapper>\n      </Body>\n      <Footer>\n        <ButtonBar gap={1.5}>\n          <Button onClick={closeModal}>{t('Cancel')}</Button>\n          <Button priority=\"primary\" onClick={handleConfirm}>\n            {t('Confirm')}\n          </Button>\n        </ButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport default OverwriteWidgetModal;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nconst CardWrapper = styled('div')`\n  padding: ${space(3)} 0;\n`;\n","import {Layout} from 'react-grid-layout';\n\nimport {User} from 'sentry/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport const DEFAULT_TABLE_LIMIT = 5;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  TOP_N = 'top_n',\n}\n\nexport enum WidgetType {\n  DISCOVER = 'discover',\n  ISSUE = 'issue',\n  RELEASE = 'metrics', // TODO(dashboards): Rename this on backend and then change here\n}\n\nexport type WidgetQuery = {\n  aggregates: string[];\n  columns: string[];\n  conditions: string;\n  name: string;\n  orderby: string;\n  // Table column alias.\n  // We may want to have alias for y-axis in the future too\n  fieldAliases?: string[];\n  // Fields is replaced with aggregates + columns. It\n  // is currently used to track column order on table\n  // widgets.\n  fields?: string[];\n};\n\nexport type Widget = {\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n  title: string;\n  id?: string;\n  layout?: WidgetLayout | null;\n  // Used to define 'topEvents' when fetching time-series data for a widget\n  limit?: number;\n  tempId?: string;\n  widgetType?: WidgetType;\n};\n\n// We store an explicit set of keys in the backend now\nexport type WidgetLayout = Pick<Layout, 'h' | 'w' | 'x' | 'y'> & {\n  minH: number;\n};\n\nexport type WidgetPreview = {\n  displayType: DisplayType;\n  layout: WidgetLayout | null;\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  widgetDisplay: DisplayType[];\n  widgetPreview: WidgetPreview[];\n  createdBy?: User;\n  dateCreated?: string;\n};\n\nexport enum DashboardFilterKeys {\n  RELEASE = 'release',\n}\n\nexport type DashboardFilters = {\n  [DashboardFilterKeys.RELEASE]?: string[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  dateCreated: string;\n  filters: DashboardFilters;\n  id: string;\n  projects: number[];\n  title: string;\n  widgets: Widget[];\n  createdBy?: User;\n  end?: string;\n  environment?: string[];\n  period?: string;\n  start?: string;\n  utc?: boolean;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n  PREVIEW = 'preview',\n}\n\n// where we launch the dashboard widget from\nexport enum DashboardWidgetSource {\n  DISCOVERV2 = 'discoverv2',\n  DASHBOARDS = 'dashboards',\n  LIBRARY = 'library',\n  ISSUE_DETAILS = 'issueDetail',\n}\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {IconArrow, IconGlobe, IconGraph, IconMenu, IconNumber} from 'sentry/icons';\nimport {IconGraphArea} from 'sentry/icons/iconGraphArea';\nimport {IconGraphBar} from 'sentry/icons/iconGraphBar';\nimport space from 'sentry/styles/space';\n\nimport {DisplayType} from '../types';\n\nimport {WidgetTemplate} from './data';\n\ntype Props = {\n  selectedWidgets: WidgetTemplate[];\n  setErrored: (errored: boolean) => void;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  widget: WidgetTemplate;\n  ['data-test-id']?: string;\n};\n\nexport function getWidgetIcon(displayType: DisplayType) {\n  switch (displayType) {\n    case DisplayType.TABLE:\n      return IconMenu;\n    case DisplayType.WORLD_MAP:\n      return IconGlobe;\n    case DisplayType.BIG_NUMBER:\n      return IconNumber;\n    case DisplayType.BAR:\n      return IconGraphBar;\n    case DisplayType.TOP_N:\n      return IconArrow;\n    case DisplayType.AREA:\n      return IconGraphArea;\n    case DisplayType.LINE:\n    default:\n      return IconGraph;\n  }\n}\n\nfunction WidgetLibraryCard({\n  selectedWidgets,\n  widget,\n  setSelectedWidgets,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  const [selected, setSelected] = useState(selectedWidgets.includes(widget));\n  const Icon = getWidgetIcon(widget.displayType);\n\n  return (\n    <StyledPanel\n      data-test-id={dataTestId}\n      selected={selected}\n      onClick={() => {\n        if (selected) {\n          const updatedWidgets = selectedWidgets.filter(\n            selectedWidget => widget !== selectedWidget\n          );\n          setSelectedWidgets(updatedWidgets);\n        } else {\n          const updatedWidgets = selectedWidgets.slice().concat(widget);\n          setSelectedWidgets(updatedWidgets);\n        }\n        setSelected(!selected);\n      }}\n    >\n      <PanelBody>\n        <TitleContainer>\n          <Icon size=\"xs\" />\n          <Title>{widget.title}</Title>\n        </TitleContainer>\n        <Description>{widget.description}</Description>\n      </PanelBody>\n    </StyledPanel>\n  );\n}\n\nconst Title = styled('div')`\n  padding-left: ${space(1)};\n  font-size: 16px;\n  line-height: 140%;\n  color: ${p => p.theme.gray500};\n`;\n\nconst TitleContainer = styled('div')`\n  padding: ${space(1.5)} ${space(2)};\n  padding-bottom: ${space(0.5)};\n  display: flex;\n  align-items: center;\n`;\n\nconst Description = styled('div')`\n  padding: 0 ${space(1)} ${space(1.5)} 36px;\n  font-size: 14px;\n  line-height: 21px;\n  color: ${p => p.theme.gray300};\n`;\n\ntype PanelProps = {\n  selected?: boolean;\n};\n\nconst StyledPanel = styled(Panel)<PanelProps>`\n  border: ${p =>\n    p.selected ? `2px solid ${p.theme.active}` : `1px solid ${p.theme.border}`};\n  margin: ${p => (p.selected ? '-1px' : 0)};\n  box-sizing: border-box;\n  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n`;\n\nexport default WidgetLibraryCard;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\nimport {getWidgetIcon} from 'sentry/views/dashboardsV2/widgetLibrary/widgetCard';\n\ninterface CardProps {\n  iconColor: string;\n  widget: WidgetTemplate;\n}\n\nexport function Card({widget, iconColor}: CardProps) {\n  const {title, description, displayType} = widget;\n  const Icon = getWidgetIcon(displayType);\n\n  return (\n    <Container>\n      <IconWrapper backgroundColor={iconColor}>\n        <Icon color=\"white\" />\n      </IconWrapper>\n      <Information>\n        <Heading>{title}</Heading>\n        <SubHeading>{description}</SubHeading>\n      </Information>\n    </Container>\n  );\n}\n\nconst Container = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n`;\n\nconst Information = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Heading = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: 500;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray500};\n`;\n\nconst SubHeading = styled('small')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IconWrapper = styled('div')<{backgroundColor: string}>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ${space(1)};\n  min-width: 40px;\n  height: 40px;\n  border-radius: ${p => p.theme.borderRadius};\n  background: ${p => p.backgroundColor};\n`;\n"],"names":["MODAL_DESCRIPTION","t","OverwriteWidgetModal","Header","Body","Footer","closeModal","onConfirm","widget","iconColor","Fragment","closeButton","CardWrapper","gap","onClick","priority","modalCss","space","MAX_WIDGETS","DEFAULT_TABLE_LIMIT","DisplayType","WidgetType","DashboardFilterKeys","DashboardState","DashboardWidgetSource","getWidgetIcon","displayType","IconMenu","IconGlobe","IconNumber","IconGraphBar","IconArrow","IconGraphArea","IconGraph","Card","title","description","Icon","Container","IconWrapper","backgroundColor","color","Information","Heading","SubHeading","p","theme","fontSizeLarge","gray500","gray300","borderRadius"],"sourceRoot":""}