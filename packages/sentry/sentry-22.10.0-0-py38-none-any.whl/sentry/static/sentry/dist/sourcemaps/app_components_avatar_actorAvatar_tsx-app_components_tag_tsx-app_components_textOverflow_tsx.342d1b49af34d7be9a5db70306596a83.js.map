{"version":3,"file":"chunks/app_components_avatar_actorAvatar_tsx-app_components_tag_tsx-app_components_textOverflow_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/avatar/actorAvatar.tsx","webpack:///./app/components/tag.tsx","webpack:///./app/components/textOverflow.tsx","webpack:///./app/stores/memberListStore.tsx","webpack:///./app/utils/isActiveSuperuser.tsx","webpack:///./app/utils/teams.tsx","webpack:///./app/utils/useTeams.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {tct} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {Team} from 'sentry/types';\n\ntype CallbackOptions = {\n  error?: Function;\n  success?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => params[name]?.(...args);\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamStore.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamStore.onUpdateSuccess(teamId, data);\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamStore.onCreateSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamStore.onRemoveSuccess(params.teamId);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import * as Sentry from '@sentry/react';\n\nimport TeamAvatar from 'sentry/components/avatar/teamAvatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Tooltip from 'sentry/components/tooltip';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport {Actor} from 'sentry/types';\nimport Teams from 'sentry/utils/teams';\n\ntype Props = {\n  actor: Actor;\n  className?: string;\n  default?: string;\n  gravatar?: boolean;\n  hasTooltip?: boolean;\n  onClick?: () => void;\n  round?: boolean;\n  size?: number;\n  suggested?: boolean;\n  title?: string;\n  tooltip?: React.ReactNode;\n  tooltipOptions?: Omit<React.ComponentProps<typeof Tooltip>, 'children' | 'title'>;\n};\n\nfunction ActorAvatar({size = 24, hasTooltip = true, actor, ...props}: Props) {\n  const otherProps = {\n    size,\n    hasTooltip,\n    ...props,\n  };\n\n  if (actor.type === 'user') {\n    const user = actor.id ? MemberListStore.getById(actor.id) ?? actor : actor;\n    return <UserAvatar user={user} {...otherProps} />;\n  }\n\n  if (actor.type === 'team') {\n    return (\n      <Teams ids={[actor.id]}>\n        {({initiallyLoaded, teams}) =>\n          initiallyLoaded ? (\n            <TeamAvatar team={teams[0]} {...otherProps} />\n          ) : (\n            <LoadingIndicator mini />\n          )\n        }\n      </Teams>\n    );\n  }\n\n  Sentry.withScope(scope => {\n    scope.setExtra('actor', actor);\n    Sentry.captureException(new Error('Unknown avatar type'));\n  });\n\n  return null;\n}\n\nexport default ActorAvatar;\n","import {cloneElement, isValidElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport theme, {Color, Theme} from 'sentry/utils/theme';\n\nconst TAG_HEIGHT = '20px';\n\ninterface Props extends React.HTMLAttributes<HTMLSpanElement> {\n  /**\n   * Makes the tag clickable. Use for external links.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  href?: string;\n  /**\n   * Icon on the left side.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Triggered when the item is clicked\n   */\n  onClick?: (eventKey: any) => void;\n  /**\n   * Shows clickable IconClose on the right side.\n   */\n  onDismiss?: () => void;\n  /**\n   * Max width of the tag's text\n   */\n  textMaxWidth?: number;\n  /**\n   * Makes the tag clickable. Use for internal links handled by react router.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  to?: LinkProps['to'];\n  /**\n   * Text to show up on a hover.\n   */\n  tooltipText?: React.ComponentProps<typeof Tooltip>['title'];\n  /**\n   * Dictates color scheme of the tag.\n   */\n  type?: keyof Theme['tag'];\n}\n\nfunction Tag({\n  type = 'default',\n  icon,\n  tooltipText,\n  to,\n  onClick,\n  href,\n  onDismiss,\n  children,\n  textMaxWidth = 150,\n  ...props\n}: Props) {\n  const iconsProps = {\n    size: '11px',\n    color: theme.tag[type].iconColor as Color,\n  };\n\n  const tag = (\n    <Tooltip title={tooltipText} containerDisplayMode=\"inline-flex\">\n      <Background type={type}>\n        {tagIcon()}\n\n        <Text type={type} maxWidth={textMaxWidth}>\n          {children}\n        </Text>\n\n        {defined(onDismiss) && (\n          <DismissButton\n            onClick={handleDismiss}\n            size=\"zero\"\n            priority=\"link\"\n            aria-label={t('Dismiss')}\n          >\n            <IconClose isCircled {...iconsProps} />\n          </DismissButton>\n        )}\n      </Background>\n    </Tooltip>\n  );\n\n  function handleDismiss(event: React.MouseEvent) {\n    event.preventDefault();\n    onDismiss?.();\n  }\n\n  const trackClickEvent = () => {\n    trackAdvancedAnalyticsEvent('tag.clicked', {\n      is_clickable: defined(onClick) || defined(to) || defined(href),\n      organization: null,\n    });\n  };\n\n  function tagIcon() {\n    if (isValidElement(icon)) {\n      return <IconWrapper>{cloneElement(icon, {...iconsProps})}</IconWrapper>;\n    }\n\n    if ((defined(href) || defined(to)) && icon === undefined) {\n      return (\n        <IconWrapper>\n          <IconOpen {...iconsProps} />\n        </IconWrapper>\n      );\n    }\n\n    return null;\n  }\n\n  function tagWithParent() {\n    if (defined(href)) {\n      return <ExternalLink href={href}>{tag}</ExternalLink>;\n    }\n\n    if (defined(to) && defined(onClick)) {\n      return (\n        <Link to={to} onClick={onClick}>\n          {tag}\n        </Link>\n      );\n    }\n    if (defined(to)) {\n      return <Link to={to}>{tag}</Link>;\n    }\n\n    return tag;\n  }\n\n  return (\n    <TagWrapper {...props} onClick={trackClickEvent}>\n      {tagWithParent()}\n    </TagWrapper>\n  );\n}\n\nconst TagWrapper = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport const Background = styled('div')<{type: keyof Theme['tag']}>`\n  display: inline-flex;\n  align-items: center;\n  height: ${TAG_HEIGHT};\n  border-radius: ${TAG_HEIGHT};\n  background-color: ${p => p.theme.tag[p.type].background};\n  border: solid 1px ${p => p.theme.tag[p.type].border};\n  padding: 0 ${space(1)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n  display: inline-flex;\n`;\n\nconst Text = styled('span')<{maxWidth: number; type: keyof Theme['tag']}>`\n  color: ${p =>\n    ['black', 'white'].includes(p.type)\n      ? p.theme.tag[p.type].iconColor\n      : p.theme.textColor};\n  max-width: ${p => p.maxWidth}px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: ${TAG_HEIGHT};\n`;\n\nconst DismissButton = styled(Button)`\n  margin-left: ${space(0.5)};\n  border: none;\n`;\n\nexport default Tag;\n","import styled from '@emotion/styled';\n\ntype Props = {\n  children: React.ReactNode;\n  className?: string;\n  ['data-test-id']?: string;\n  /**\n   * Change which side of the text is elided.\n   * Default: 'right'\n   *\n   * BROWSER COMPAT:\n   * When set to `left` the intention is for something like: `...xample.com/foo/`\n   * In Chrome & Firefox this is what happens.\n   *\n   * In Safari (July 2022) you will see this instead: `...https://example.co`.\n   *\n   * See: https://stackoverflow.com/a/24800788\n   */\n  ellipsisDirection?: 'left' | 'right';\n  isParagraph?: boolean;\n};\n\nconst TextOverflow = styled(\n  ({\n    children,\n    className,\n    ellipsisDirection,\n    isParagraph,\n    ['data-test-id']: dataTestId,\n  }: Props) => {\n    const Component = isParagraph ? 'p' : 'div';\n    if (ellipsisDirection === 'left') {\n      return (\n        <Component className={className} data-test-id={dataTestId}>\n          <bdi>{children}</bdi>\n        </Component>\n      );\n    }\n    return (\n      <Component className={className} data-test-id={dataTestId}>\n        {children}\n      </Component>\n    );\n  }\n)`\n  ${p => p.theme.overflowEllipsis}\n  ${p =>\n    p.ellipsisDirection === 'left' &&\n    `\n      direction: rtl;\n      text-align: left;\n    `};\n  width: auto;\n  line-height: 1.2;\n`;\n\nTextOverflow.defaultProps = {\n  ellipsisDirection: 'right',\n  isParagraph: false,\n};\n\nexport default TextOverflow;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {User} from 'sentry/types';\n\ninterface MemberListStoreDefinition extends StoreDefinition {\n  getAll(): User[];\n  getById(id: string): User | undefined;\n  getState(): User[];\n  init(): void;\n  isLoaded(): boolean;\n  loadInitialData(items: User[]): void;\n  loaded: boolean;\n  state: User[];\n}\n\nconst storeConfig: MemberListStoreDefinition = {\n  loaded: false,\n  state: [],\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.state = [];\n    this.loaded = false;\n  },\n\n  // TODO(dcramer): this should actually come from an action of some sorts\n  loadInitialData(items: User[]) {\n    this.state = items;\n    this.loaded = true;\n    this.trigger(this.state, 'initial');\n  },\n\n  isLoaded() {\n    return this.loaded;\n  },\n\n  getById(id) {\n    if (!this.state) {\n      return undefined;\n    }\n\n    id = '' + id;\n    for (let i = 0; i < this.state.length; i++) {\n      if (this.state[i].id === id) {\n        return this.state[i];\n      }\n    }\n    return undefined;\n  },\n\n  getAll() {\n    return this.state;\n  },\n\n  getState() {\n    return this.state;\n  },\n};\n\nconst MemberListStore = createStore(storeConfig);\nexport default MemberListStore;\n","import Cookies from 'js-cookie';\n\nimport ConfigStore from 'sentry/stores/configStore';\n\nconst SUPERUSER_COOKIE_NAME = window.superUserCookieName ?? 'su';\n\n/**\n * Checking for just isSuperuser on a config object may not be enough as backend often checks for *active* superuser.\n * We therefore check both isSuperuser flag AND superuser session cookie.\n */\nexport function isActiveSuperuser() {\n  const {isSuperuser} = ConfigStore.get('user') || {};\n\n  if (isSuperuser) {\n    const superUserCookieName =\n      ConfigStore.get('superUserCookieName') || SUPERUSER_COOKIE_NAME;\n    /**\n     * Superuser cookie cannot be checked for existence as it is HttpOnly.\n     * As a workaround, we try to change it to something else and if that fails we can assume that it's being present.\n     * There may be an edgecase where it's present and expired but for current usage it's not a big deal.\n     */\n    Cookies.set(superUserCookieName, 'test');\n\n    if (Cookies.get(superUserCookieName) === undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import {Fragment} from 'react';\n\nimport useTeams from 'sentry/utils/useTeams';\n\ntype RenderProps = ReturnType<typeof useTeams>;\n\ntype Props = Parameters<typeof useTeams>[0] & {\n  children: (props: RenderProps) => React.ReactNode;\n};\n\n/**\n * This is a utility component to leverage the useTeams hook to provide\n * a render props component which returns teams through a variety of inputs\n * such as a list of slugs or user teams.\n */\nfunction Teams({children, ...props}: Props) {\n  const renderProps = useTeams(props);\n\n  return <Fragment>{children(renderProps)}</Fragment>;\n}\n\nexport default Teams;\n","import {useEffect, useMemo, useRef, useState} from 'react';\nimport uniqBy from 'lodash/uniqBy';\n\nimport {fetchUserTeams} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport OrganizationStore from 'sentry/stores/organizationStore';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {Team} from 'sentry/types';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport RequestError from 'sentry/utils/requestError/requestError';\nimport useApi from 'sentry/utils/useApi';\n\ntype State = {\n  /**\n   * The error that occurred if fetching failed\n   */\n  fetchError: null | RequestError;\n  /**\n   * This is state for when fetching data from API\n   */\n  fetching: boolean;\n  /**\n   * Indicates that Team results (from API) are paginated and there are more\n   * Teams that are not in the initial response.\n   */\n  hasMore: null | boolean;\n  /**\n   * Reflects whether or not the initial fetch for the requested teams was\n   * fulfilled\n   */\n  initiallyLoaded: boolean;\n  /**\n   * The last query we searched. Used to validate the cursor\n   */\n  lastSearch: null | string;\n  /**\n   * Pagination\n   */\n  nextCursor?: null | string;\n};\n\ntype Result = {\n  /**\n   * This is an action provided to consumers for them to request more teams\n   * to be loaded. Additional teams will be fetched and loaded into the store.\n   */\n  loadMore: (searchTerm?: string) => Promise<void>;\n  /**\n   * This is an action provided to consumers for them to update the current\n   * teams result set using a simple search query.\n   *\n   * Will always add new options into the store.\n   */\n  onSearch: (searchTerm: string) => Promise<void>;\n  /**\n   * The loaded teams list\n   */\n  teams: Team[];\n} & Pick<State, 'fetching' | 'hasMore' | 'fetchError' | 'initiallyLoaded'>;\n\ntype Options = {\n  /**\n   * When provided, fetches specified teams by id if necessary and only provides those teams.\n   */\n  ids?: string[];\n  /**\n   * Number of teams to return when not using `props.slugs`\n   */\n  limit?: number;\n  /**\n   * When true, fetches user's teams if necessary and only provides user's\n   * teams (isMember = true).\n   */\n  provideUserTeams?: boolean;\n  /**\n   * When provided, fetches specified teams by slug if necessary and only provides those teams.\n   */\n  slugs?: string[];\n};\n\ntype FetchTeamOptions = {\n  cursor?: State['nextCursor'];\n  ids?: string[];\n  lastSearch?: State['lastSearch'];\n  limit?: Options['limit'];\n  search?: State['lastSearch'];\n  slugs?: string[];\n};\n\n/**\n * Helper function to actually load teams\n */\nasync function fetchTeams(\n  api: Client,\n  orgId: string,\n  {slugs, ids, search, limit, lastSearch, cursor}: FetchTeamOptions = {}\n) {\n  const query: {\n    cursor?: typeof cursor;\n    per_page?: number;\n    query?: string;\n  } = {};\n\n  if (slugs !== undefined && slugs.length > 0) {\n    query.query = slugs.map(slug => `slug:${slug}`).join(' ');\n  }\n\n  if (ids !== undefined && ids.length > 0) {\n    query.query = ids.map(id => `id:${id}`).join(' ');\n  }\n\n  if (search) {\n    query.query = `${query.query ?? ''} ${search}`.trim();\n  }\n\n  const isSameSearch = lastSearch === search || (!lastSearch && !search);\n\n  if (isSameSearch && cursor) {\n    query.cursor = cursor;\n  }\n\n  if (limit !== undefined) {\n    query.per_page = limit;\n  }\n\n  let hasMore: null | boolean = false;\n  let nextCursor: null | string = null;\n  const [data, , resp] = await api.requestPromise(`/organizations/${orgId}/teams/`, {\n    includeAllArgs: true,\n    query,\n  });\n\n  const pageLinks = resp?.getResponseHeader('Link');\n  if (pageLinks) {\n    const paginationObject = parseLinkHeader(pageLinks);\n    hasMore = paginationObject?.next?.results;\n    nextCursor = paginationObject?.next?.cursor;\n  }\n\n  return {results: data, hasMore, nextCursor};\n}\n\n// TODO: Paging for items which have already exist in the store is not\n// correctly implemented.\n\n/**\n * Provides teams from the TeamStore\n *\n * This hook also provides a way to select specific slugs to ensure they are\n * loaded, as well as search (type-ahead) for more slugs that may not be in the\n * TeamsStore.\n *\n * NOTE: It is NOT guaranteed that all teams for an organization will be\n * loaded, so you should use this hook with the intention of providing specific\n * slugs, or loading more through search.\n *\n */\nfunction useTeams({limit, slugs, ids, provideUserTeams}: Options = {}) {\n  const api = useApi();\n  const {organization} = useLegacyStore(OrganizationStore);\n  const store = useLegacyStore(TeamStore);\n\n  const orgId = organization?.slug;\n\n  const storeSlugs = new Set(store.teams.map(t => t.slug));\n  const slugsToLoad = slugs?.filter(slug => !storeSlugs.has(slug)) ?? [];\n  const storeIds = new Set(store.teams.map(t => t.id));\n  const idsToLoad = ids?.filter(id => !storeIds.has(id)) ?? [];\n  const shouldLoadSlugs = slugsToLoad.length > 0;\n  const shouldLoadIds = idsToLoad.length > 0;\n  const shouldLoadTeams = provideUserTeams && !store.loadedUserTeams;\n\n  // If we don't need to make a request either for slugs or user teams, set\n  // initiallyLoaded to true\n  const initiallyLoaded = !shouldLoadSlugs && !shouldLoadTeams && !shouldLoadIds;\n\n  const [state, setState] = useState<State>({\n    initiallyLoaded,\n    fetching: false,\n    hasMore: store.hasMore,\n    lastSearch: null,\n    nextCursor: store.cursor,\n    fetchError: null,\n  });\n\n  const slugOrIdRef = useRef<Set<string> | null>(null);\n\n  // Only initialize slugOrIdRef.current once and modify it when we receive new\n  // slugs or ids determined through set equality\n  if (slugs !== undefined || ids !== undefined) {\n    const slugsOrIds = (slugs || ids) ?? [];\n    if (slugOrIdRef.current === null) {\n      slugOrIdRef.current = new Set(slugsOrIds);\n    }\n\n    if (\n      slugsOrIds.length !== slugOrIdRef.current.size ||\n      slugsOrIds.some(slugOrId => !slugOrIdRef.current?.has(slugOrId))\n    ) {\n      slugOrIdRef.current = new Set(slugsOrIds);\n    }\n  }\n\n  async function loadUserTeams() {\n    if (orgId === undefined) {\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      await fetchUserTeams(api, {orgId});\n\n      setState({...state, fetching: false, initiallyLoaded: true});\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, initiallyLoaded: true, fetchError: err});\n    }\n  }\n\n  async function loadTeamsBySlugOrId() {\n    if (orgId === undefined) {\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n        slugs: slugsToLoad,\n        ids: idsToLoad,\n        limit,\n      });\n\n      // Unique by `id` to avoid duplicates due to renames and state store data\n      const fetchedTeams = uniqBy([...results, ...store.teams], ({id}) => id);\n      TeamStore.loadInitialData(fetchedTeams);\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        initiallyLoaded: true,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, initiallyLoaded: true, fetchError: err});\n    }\n  }\n\n  function handleSearch(search: string) {\n    if (search !== '') {\n      return handleFetchAdditionalTeams(search);\n    }\n\n    // Reset pagination state to match store if doing an empty search\n    if (state.hasMore !== store.hasMore || state.nextCursor !== store.cursor) {\n      setState({\n        ...state,\n        lastSearch: search,\n        hasMore: store.hasMore,\n        nextCursor: store.cursor,\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  async function handleFetchAdditionalTeams(search?: string) {\n    const {lastSearch} = state;\n    // Use the store cursor if there is no search keyword provided\n    const cursor = search ? state.nextCursor : store.cursor;\n\n    if (orgId === undefined) {\n      // eslint-disable-next-line no-console\n      console.error('Cannot fetch teams without an organization in context');\n      return;\n    }\n\n    setState({...state, fetching: true});\n\n    try {\n      api.clear();\n      const {results, hasMore, nextCursor} = await fetchTeams(api, orgId, {\n        search,\n        limit,\n        lastSearch,\n        cursor,\n      });\n\n      const fetchedTeams = uniqBy([...store.teams, ...results], ({slug}) => slug);\n\n      if (search) {\n        // Only update the store if we have more items\n        if (fetchedTeams.length > store.teams.length) {\n          TeamStore.loadInitialData(fetchedTeams);\n        }\n      } else {\n        // If we fetched a page of teams without a search query, add cursor data to the store\n        TeamStore.loadInitialData(fetchedTeams, hasMore, nextCursor);\n      }\n\n      setState({\n        ...state,\n        hasMore: hasMore && store.hasMore,\n        fetching: false,\n        lastSearch: search ?? null,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, fetchError: err});\n    }\n  }\n\n  useEffect(() => {\n    // Load specified team slugs\n    if (shouldLoadSlugs || shouldLoadIds) {\n      loadTeamsBySlugOrId();\n      return;\n    }\n\n    // Load user teams\n    if (shouldLoadTeams) {\n      loadUserTeams();\n    }\n  }, [slugOrIdRef.current, provideUserTeams]);\n\n  const isSuperuser = isActiveSuperuser();\n\n  const filteredTeams = useMemo(() => {\n    return slugs\n      ? store.teams.filter(t => slugs.includes(t.slug))\n      : ids\n      ? store.teams.filter(t => ids.includes(t.id))\n      : provideUserTeams && !isSuperuser\n      ? store.teams.filter(t => t.isMember)\n      : store.teams;\n  }, [store.teams, ids, slugs, provideUserTeams, isSuperuser]);\n\n  const result: Result = {\n    teams: filteredTeams,\n    fetching: state.fetching || store.loading,\n    initiallyLoaded: state.initiallyLoaded,\n    fetchError: state.fetchError,\n    hasMore: state.hasMore ?? store.hasMore,\n    onSearch: handleSearch,\n    loadMore: handleFetchAdditionalTeams,\n  };\n\n  return result;\n}\n\nexport default useTeams;\n"],"names":["doCallback","params","name","args","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamStore","updateTeamSuccess","teamId","data","joinTeam","options","endpoint","memberId","request","method","success","error","leaveTeam","createTeam","team","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","size","hasTooltip","actor","props","otherProps","type","user","id","MemberListStore","ids","initiallyLoaded","mini","Sentry","scope","setExtra","Error","TAG_HEIGHT","Tag","icon","tooltipText","to","onClick","href","onDismiss","children","textMaxWidth","iconsProps","color","theme","iconColor","tag","title","containerDisplayMode","Background","isValidElement","IconWrapper","cloneElement","defined","undefined","Text","maxWidth","DismissButton","event","preventDefault","priority","t","isCircled","TagWrapper","trackAdvancedAnalyticsEvent","is_clickable","p","fontSizeSmall","background","border","space","includes","textColor","Button","TextOverflow","className","ellipsisDirection","isParagraph","dataTestId","Component","overflowEllipsis","defaultProps","storeConfig","loaded","state","init","this","loadInitialData","items","trigger","isLoaded","getById","i","length","getAll","getState","createStore","SUPERUSER_COOKIE_NAME","window","superUserCookieName","isActiveSuperuser","isSuperuser","ConfigStore","Cookies","Teams","renderProps","useTeams","Fragment","fetchTeams","slugs","search","limit","lastSearch","cursor","query","map","join","trim","isSameSearch","per_page","hasMore","nextCursor","resp","includeAllArgs","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","results","provideUserTeams","useApi","useLegacyStore","OrganizationStore","store","storeSlugs","Set","slugsToLoad","filter","has","storeIds","idsToLoad","shouldLoadSlugs","shouldLoadIds","shouldLoadTeams","loadedUserTeams","setState","useState","fetching","fetchError","slugOrIdRef","useRef","slugsOrIds","current","some","slugOrId","loadUserTeams","console","loadTeamsBySlugOrId","fetchedTeams","uniqBy","handleSearch","handleFetchAdditionalTeams","Promise","resolve","clear","useEffect","filteredTeams","useMemo","isMember","result","loading","onSearch","loadMore"],"sourceRoot":""}