{"version":3,"file":"chunks/app_views_projectInstall_overview_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/projectInstall/overview.tsx"],"sourcesContent":["import {PlainRoute} from 'react-router';\nimport {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: PlainRoute[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport AutoSelectText from 'sentry/components/autoSelectText';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PlatformPicker from 'sentry/components/platformPicker';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n} & AsyncComponent['props'];\n\ntype State = {\n  keyList: Array<ProjectKey> | null;\n} & AsyncComponent['state'];\n\nclass ProjectInstallOverview extends AsyncComponent<Props, State> {\n  get isGettingStarted() {\n    return window.location.href.indexOf('getting-started') > 0;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  redirectToDocs = (platform: PlatformKey | null) => {\n    const {orgId, projectId} = this.props.params;\n\n    const installUrl = this.isGettingStarted\n      ? `/organizations/${orgId}/projects/${projectId}/getting-started/${platform}/`\n      : recreateRoute(`${platform}/`, {\n          ...this.props,\n          stepBack: -1,\n        });\n\n    browserHistory.push(installUrl);\n  };\n\n  toggleDsn = () => {\n    this.setState(state => ({showDsn: !state.showDsn}));\n  };\n\n  render() {\n    const {orgId, projectId} = this.props.params;\n    const {keyList, showDsn} = this.state;\n\n    const issueStreamLink = `/organizations/${orgId}/issues/#welcome`;\n\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Instrumentation')} projectSlug={projectId} />\n        <SettingsPageHeader title={t('Configure your application')} />\n        <TextBlock>\n          {t(\n            'Get started by selecting the platform or language that powers your application.'\n          )}\n        </TextBlock>\n\n        {showDsn ? (\n          <DsnInfo>\n            <DsnContainer>\n              <strong>{t('DSN')}</strong>\n              <DsnValue>{keyList?.[0].dsn.public}</DsnValue>\n            </DsnContainer>\n\n            <Button priority=\"primary\" to={issueStreamLink}>\n              {t('Got it! Take me to the Issue Stream.')}\n            </Button>\n          </DsnInfo>\n        ) : (\n          <p>\n            <small>\n              {tct('Already have things setup? [link:Get your DSN]', {\n                link: (\n                  <Button\n                    priority=\"link\"\n                    onClick={this.toggleDsn}\n                    aria-label={t('Get your DSN')}\n                  />\n                ),\n              })}\n              .\n            </small>\n          </p>\n        )}\n        <PlatformPicker\n          setPlatform={this.redirectToDocs}\n          showOther={false}\n          organization={this.props.organization}\n        />\n        <p>\n          {tct(\n            `For a complete list of client integrations, please see\n             [docLink:our in-depth documentation].`,\n            {docLink: <ExternalLink href=\"https://docs.sentry.io\" />}\n          )}\n        </p>\n      </div>\n    );\n  }\n}\n\nconst DsnValue = styled(p => (\n  <code {...p}>\n    <AutoSelectText>{p.children}</AutoSelectText>\n  </code>\n))`\n  overflow: hidden;\n`;\n\nconst DsnInfo = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst DsnContainer = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(1.5)} ${space(2)};\n  align-items: center;\n  margin-bottom: ${space(2)};\n`;\n\nexport default withOrganization(ProjectInstallOverview);\n"],"names":["recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","ProjectInstallOverview","AsyncComponent","platform","orgId","projectId","this","props","installUrl","isGettingStarted","browserHistory","setState","state","showDsn","window","href","getEndpoints","render","keyList","issueStreamLink","title","t","projectSlug","DsnInfo","DsnContainer","DsnValue","dsn","public","priority","tct","link","onClick","toggleDsn","setPlatform","redirectToDocs","showOther","organization","docLink","p","children","space","withOrganization"],"sourceRoot":""}