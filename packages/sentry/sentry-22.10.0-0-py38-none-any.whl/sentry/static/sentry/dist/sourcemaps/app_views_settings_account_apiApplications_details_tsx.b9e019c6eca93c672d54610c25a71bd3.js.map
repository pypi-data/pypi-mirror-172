{"version":3,"file":"chunks/app_views_settings_account_apiApplications_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"oRAIA,MAmEA,EAnEgC,CAC9B,CAEEA,MAAO,sBACPC,OAAQ,CACN,CACEC,KAAM,OACNC,KAAM,SACNC,UAAU,EAGVC,MAAO,OACPC,KAAM,sBACNC,SAAUC,IAASC,EAAAA,EAAAA,GAAe,CAACD,QAAOE,MAAO,yBAEnD,CACER,KAAM,cACNC,KAAM,SACNC,UAAU,EACVC,MAAO,WACPM,YAAa,4BACbL,KAAM,mDAER,CACEJ,KAAM,aACNC,KAAM,SACNE,MAAO,iBACPM,YAAa,mCACbL,KAAM,2CAER,CACEJ,KAAM,WACNC,KAAM,SACNE,MAAO,mBACPM,YAAa,iCACbL,KAAM,yDAKZ,CACEN,MAAO,WACPC,OAAQ,CACN,CACEC,KAAM,eACNC,KAAM,SACNS,WAAW,EACXD,YAAa,0CACbN,MAAO,2BACPC,KAAM,4CACNO,SAAUC,IAAOC,EAAAA,EAAAA,IAAuBD,GACxCP,SAAUO,IAAOE,EAAAA,EAAAA,IAA2BF,IAE9C,CACEZ,KAAM,iBACNC,KAAM,SACNS,WAAW,EACXD,YAAa,mBACbN,MAAO,gCACPC,KAAM,4CACNO,SAAUC,IAAOC,EAAAA,EAAAA,IAAuBD,GACxCP,SAAUO,IAAOE,EAAAA,EAAAA,IAA2BF,M,wPC3DrC,MAAMG,UAGXC,EAAAA,EACRC,WACE,MAAO,EACR,CAEDC,SACE,OACE,QAAC,IAAD,CAAqBpB,MAAOqB,KAAKF,WAAjC,SACGE,KAAKC,mBAGX,EAdkBL,EAAAA,YAAAA,W,srBCerB,MAAMM,UAA+BN,EAAAA,EACnCO,eACE,MAAO,CAAC,CAAC,MAAQ,qBAAoBH,KAAKI,MAAMC,OAAOC,UACxD,CAEDR,WACE,OAAOS,EAAAA,EAAAA,GAAE,sBACV,CAEDC,aACE,MAAMC,EAAYC,EAAAA,EAAAA,IAAgB,aAElC,OACE,0BACE,QAAC,IAAD,CAAoB/B,MAAOqB,KAAKF,cAEhC,QAAC,IAAD,CACEa,UAAU,MACVC,YAAc,qBAAoBZ,KAAKI,MAAMC,OAAOC,SACpDO,YAAU,EACVC,WAAS,EACTC,YAAaf,KAAKgB,MAAMC,IACxBC,cAAe,KAAMC,EAAAA,EAAAA,IAAgB,yBANvC,WAQE,QAAC,IAAD,CAAUC,MAAOC,EAAAA,WAEjB,QAAC,KAAD,YACE,QAAC,KAAD,WAAcd,EAAAA,EAAAA,GAAE,kBAEhB,QAAC,IAAD,YACE,QAAC,IAAD,CAAW1B,KAAK,WAAWG,MAAM,YAAjC,SACG,QAAC,MAACG,GAAF,SACC,yBACE,QAAC,KAAD,WACGC,EAAAA,EAAAA,GAAe,CAACD,QAAOE,MAAO,oBAHpC,KASH,QAAC,IAAD,CACER,KAAK,eACLG,MAAM,gBACNC,MAAMsB,EAAAA,EAAAA,GAAG,sHAHX,SAMG,QAAC,MAACpB,GAAF,SACCA,GACE,QAAC,KAAD,WACGC,EAAAA,EAAAA,GAAe,CAACD,QAAOE,MAAO,wBAGjC,iCANH,KAWH,QAAC,IAAD,CAAWR,KAAK,GAAGG,MAAM,oBAAzB,SACG,KAAM,QAAC,KAAD,UAAiB,GAAEyB,0BAG5B,QAAC,IAAD,CAAW5B,KAAK,GAAGG,MAAM,YAAzB,SACG,KAAM,QAAC,KAAD,UAAiB,GAAEyB,gCAOvC,EAGH,S","sources":["webpack:///./app/data/forms/apiApplication.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/apiApplications/details.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'sentry/utils';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst forms: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Application Details',\n    fields: [\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Name',\n        help: 'e.g. My Application',\n        setValue: value => getDynamicText({value, fixed: 'CI_APPLICATION_NAME'}),\n      },\n      {\n        name: 'homepageUrl',\n        type: 'string',\n        required: false,\n        label: 'Homepage',\n        placeholder: 'e.g. https://example.com/',\n        help: \"An optional link to your application's homepage\",\n      },\n      {\n        name: 'privacyUrl',\n        type: 'string',\n        label: 'Privacy Policy',\n        placeholder: 'e.g. https://example.com/privacy',\n        help: 'An optional link to your Privacy Policy',\n      },\n      {\n        name: 'termsUrl',\n        type: 'string',\n        label: 'Terms of Service',\n        placeholder: 'e.g. https://example.com/terms',\n        help: 'An optional link to your Terms of Service agreement',\n      },\n    ],\n  },\n\n  {\n    title: 'Security',\n    fields: [\n      {\n        name: 'redirectUris',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. https://example.com/oauth/complete',\n        label: 'Authorized Redirect URIs',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'allowedOrigins',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. example.com',\n        label: 'Authorized JavaScript Origins',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n];\n\nexport default forms;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport Form from 'sentry/components/forms/form';\nimport FormField from 'sentry/components/forms/formField';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport apiApplication from 'sentry/data/forms/apiApplication';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ApiApplication} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype Props = RouteComponentProps<{appId: string}, {}>;\ntype State = {\n  app: ApiApplication;\n} & AsyncView['state'];\n\nclass ApiApplicationsDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['app', `/api-applications/${this.props.params.appId}/`]];\n  }\n\n  getTitle() {\n    return t('Application Details');\n  }\n\n  renderBody() {\n    const urlPrefix = ConfigStore.get('urlPrefix');\n\n    return (\n      <div>\n        <SettingsPageHeader title={this.getTitle()} />\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint={`/api-applications/${this.props.params.appId}/`}\n          saveOnBlur\n          allowUndo\n          initialData={this.state.app}\n          onSubmitError={() => addErrorMessage('Unable to save change')}\n        >\n          <JsonForm forms={apiApplication} />\n\n          <Panel>\n            <PanelHeader>{t('Credentials')}</PanelHeader>\n\n            <PanelBody>\n              <FormField name=\"clientID\" label=\"Client ID\">\n                {({value}) => (\n                  <div>\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_ID'})}\n                    </TextCopyInput>\n                  </div>\n                )}\n              </FormField>\n\n              <FormField\n                name=\"clientSecret\"\n                label=\"Client Secret\"\n                help={t(`Your secret is only available briefly after application creation. Make\n                  sure to save this value!`)}\n              >\n                {({value}) =>\n                  value ? (\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_SECRET'})}\n                    </TextCopyInput>\n                  ) : (\n                    <em>hidden</em>\n                  )\n                }\n              </FormField>\n\n              <FormField name=\"\" label=\"Authorization URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/authorize/`}</TextCopyInput>}\n              </FormField>\n\n              <FormField name=\"\" label=\"Token URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/token/`}</TextCopyInput>}\n              </FormField>\n            </PanelBody>\n          </Panel>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default ApiApplicationsDetails;\n"],"names":["title","fields","name","type","required","label","help","setValue","value","getDynamicText","fixed","placeholder","multiline","getValue","val","extractMultilineFields","convertMultilineFieldValue","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","ApiApplicationsDetails","getEndpoints","props","params","appId","t","renderBody","urlPrefix","ConfigStore","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","state","app","onSubmitError","addErrorMessage","forms","apiApplication"],"sourceRoot":""}