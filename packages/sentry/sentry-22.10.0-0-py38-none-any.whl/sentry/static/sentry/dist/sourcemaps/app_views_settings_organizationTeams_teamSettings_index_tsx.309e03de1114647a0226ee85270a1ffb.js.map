{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mSAKO,MAAMA,EAAQ,2CAyBrB,EAvBqC,CACnC,CAEEC,MAAO,gBACPC,OAAQ,CACN,CACEC,KAAM,OACNC,KAAM,SACNC,UAAU,EACVC,OAAOC,EAAAA,EAAAA,GAAE,QACTC,YAAa,gBACbC,MAAMF,EAAAA,EAAAA,GAAE,yCACRG,SAAU,QAAC,OAACC,GAAF,SAAeA,EAAOC,IAAI,aAA1B,EACVC,eAAgBC,EAAAA,EAEhBC,YAAY,EACZC,qBAAsB,OACtBC,aAAaV,EAAAA,EAAAA,GAAE,+D,sCCtBR,SAASO,EAAQI,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,EACxE,C,wQCEc,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACR,CAEDC,SACE,OACE,QAAC,IAAD,CAAqBvB,MAAOwB,KAAKF,WAAjC,SACGE,KAAKC,mBAGX,EAdkBL,EAAAA,YAAAA,W,q1BCmBrB,MAAMM,UAAqBN,EAAAA,EAAwB,sEASO,CAACO,EAAMC,EAAOC,MAGpEC,EAAAA,EAAAA,IAAkBN,KAAKO,MAAMC,KAAKC,KAAMN,GAC7B,SAAPE,KACFK,EAAAA,EAAAA,KAAkB5B,EAAAA,EAAAA,GAAE,sBACpB6B,EAAAA,eAAAA,QACG,aAAYX,KAAKO,MAAMK,OAAOC,eAAeT,EAAMU,SAAST,gBAE/DL,KAAKe,SAAS,CAACC,SAAS,IACzB,KAnB8C,gCAsB9BC,gBACXC,EAAAA,EAAAA,IAAWlB,KAAKmB,IAAKnB,KAAKO,MAAMK,QACtCD,EAAAA,eAAAA,QAAwB,aAAYX,KAAKO,MAAMK,OAAOC,eAAtD,GAxB+C,CACjDf,WACE,MAAO,eACR,CAEDsB,eACE,MAAO,EACR,CAoBDC,aACE,MAAM,aAACC,EAAD,KAAed,EAAf,OAAqBI,GAAUZ,KAAKO,MAEpCrB,EAAS,IAAIqC,IAAWD,EAAapC,QAE3C,OACE,QAAC,EAAAsC,SAAD,YACE,QAAC,IAAD,CACEC,UAAU,MACVC,YAAc,UAASd,EAAOC,SAASL,EAAKC,QAC5CnB,YAAU,EACVqC,WAAS,EACTC,gBAAiB5B,KAAK6B,oBACtBC,cAAe,KAAMC,EAAAA,EAAAA,KAAgBjD,EAAAA,EAAAA,GAAE,0BACvCkD,YAAa,CACXtD,KAAM8B,EAAK9B,KACX+B,KAAMD,EAAKC,MATf,UAYE,QAAC,IAAD,CAAUvB,OAAQA,EAAQ+C,MAAOC,EAAAA,aAGnC,QAAC,KAAD,YACE,QAAC,KAAD,WAAcpD,EAAAA,EAAAA,GAAE,kBAChB,QAAC,IAAD,CACEE,MAAMF,EAAAA,EAAAA,GACJ,mFAFJ,UAKE,yBACE,QAAC,IAAD,CACEG,UAAWC,EAAOC,IAAI,cACtBgD,UAAWnC,KAAKoC,iBAChBC,SAAS,SACTC,SAASC,EAAAA,EAAAA,IAAI,mDAAoD,CAC/D/B,KAAO,IAAGA,EAAKC,SALnB,UAQE,QAAC,KAAD,CACE+B,MAAM,QAAC,KAAD,IACNH,SAAS,SACTpD,UAAWC,EAAOC,IAAI,cAHxB,UAKGL,EAAAA,EAAAA,GAAE,4BAQlB,EAEH,SAAe2D,EAAAA,EAAAA,GAAiBvC,E","sources":["webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.tsx"],"sourcesContent":["import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        disabled: ({access}) => !access.has('team:write'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'sentry/actionCreators/teams';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Field from 'sentry/components/forms/field';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport teamSettingsFields from 'sentry/data/forms/teamSettingsFields';\nimport {IconDelete} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Scope, Team} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype Props = RouteComponentProps<{orgId: string; teamId: string}, {}> & {\n  organization: Organization;\n  team: Team;\n};\n\ntype State = AsyncView['state'];\n\nclass TeamSettings extends AsyncView<Props, State> {\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess: Form['props']['onSubmitSuccess'] = (resp, model, id) => {\n    // Use the old slug when triggering the update so we correctly replace the\n    // previous team in the store\n    updateTeamSuccess(this.props.team.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      browserHistory.replace(\n        `/settings/${this.props.params.orgId}/teams/${model.getValue(id)}/settings/`\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    await removeTeam(this.api, this.props.params);\n    browserHistory.replace(`/settings/${this.props.params.orgId}/teams/`);\n  };\n\n  renderBody() {\n    const {organization, team, params} = this.props;\n\n    const access = new Set<Scope>(organization.access);\n\n    return (\n      <Fragment>\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint={`/teams/${params.orgId}/${team.slug}/`}\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n          }}\n        >\n          <JsonForm access={access} forms={teamSettingsFields} />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Remove Team')}</PanelHeader>\n          <Field\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!access.has('team:admin')}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  disabled={!access.has('team:admin')}\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </Field>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(TeamSettings);\n"],"names":["route","title","fields","name","type","required","label","t","placeholder","help","disabled","access","has","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","str","toLowerCase","replace","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","TeamSettings","resp","model","id","updateTeamSuccess","props","team","slug","addSuccessMessage","browserHistory","params","orgId","getValue","setState","loading","async","removeTeam","api","getEndpoints","renderBody","organization","Set","Fragment","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","handleSubmitSuccess","onSubmitError","addErrorMessage","initialData","forms","teamSettingsFields","onConfirm","handleRemoveTeam","priority","message","tct","icon","withOrganization"],"sourceRoot":""}