{"version":3,"file":"chunks/app_views_settings_account_accountNotificationFineTuning_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/accountNotificationSettings.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/notifications/fields.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByOrganization.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByProjects.tsx","webpack:///./app/views/settings/account/notifications/unlinkedAlert.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByType.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx","webpack:///./app/views/settings/components/defaultSearchBar.tsx"],"sourcesContent":["import {Field} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\n\n// TODO: cleanup unused fields and exports\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/notifications/';\n\nexport const fields: {[key: string]: Field} = {\n  subscribeByDefault: {\n    name: 'subscribeByDefault',\n    type: 'boolean',\n    label: t('Send Me Alerts'),\n    // TODO(billy): Make this a real link\n    help: t(\n      'Enable this to receive notifications for Alerts sent to your teams. You will always receive alerts configured to be sent directly to you.'\n    ),\n  },\n  workflowNotifications: {\n    name: 'workflowNotifications',\n    type: 'radio',\n    label: t('Send Me Workflow Notifications'),\n    choices: [\n      [0, t('Always')],\n      [1, t('Only On Issues I Subscribe To')],\n      [2, t('Never')],\n    ],\n    help: t('E.g. changes in issue assignment, resolution status, and comments.'),\n  },\n  weeklyReports: {\n    // Form is not visible because currently not implemented\n    name: 'weeklyReports',\n    type: 'boolean',\n    label: t('Send Me Weekly Reports'),\n    help: t(\"Reports contain a summary of what's happened within your organization.\"),\n    disabled: true,\n  },\n  deployNotifications: {\n    name: 'deployNotifications',\n    type: 'radio',\n    label: t('Send Me Deploy Notifications'),\n    choices: [\n      [2, t('Always')],\n      [3, t('Only On Deploys With My Commits')],\n      [4, t('Never')],\n    ],\n    help: t('Deploy emails include release, environment and commit overviews.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('Notify Me About My Own Activity'),\n    help: t('Enable this to receive notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t(\"Claim Unassigned Issues I've Resolved\"),\n    help: t(\"You'll receive notifications about any changes that happen afterwards.\"),\n  },\n};\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\n\nexport type FineTuneField = {\n  description: string;\n  title: string;\n  type: 'select';\n  defaultFieldName?: string;\n  defaultValue?: string;\n  options?: SelectValue<string>[];\n};\n\n// TODO: clean up unused fields\nexport const ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: t('Issue Alert Notifications'),\n    description: t(\n      'Notifications from Alert Rules that your team has setup. You’ll always receive notifications from Alerts configured to be sent directly to you.'\n    ),\n    type: 'select',\n    options: [\n      {value: '-1', label: t('Default')},\n      {value: '1', label: t('On')},\n      {value: '0', label: t('Off')},\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: t('Workflow Notifications'),\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    options: [\n      {value: '-1', label: t('Default')},\n      {value: '0', label: t('Always')},\n      {value: '1', label: t('Only on issues I subscribe to')},\n      {value: '2', label: t('Never')},\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'workflowNotifications',\n  },\n  activeRelease: {\n    title: t('Release Issues'),\n    description: t('Notifications sent for issues likely caused by your code changes.'),\n    type: 'select',\n    defaultValue: '0',\n    options: [\n      {value: '1', label: t('On')},\n      {value: '0', label: t('Off')},\n    ],\n    defaultFieldName: 'activeReleaseNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    options: [\n      {value: '-1', label: t('Default')},\n      {value: '2', label: t('Always')},\n      {value: '3', label: t('Only on deploys with my commits')},\n      {value: '4', label: t('Never')},\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: '1',\n    options: [\n      {value: '1', label: t('On')},\n      {value: '0', label: t('Off')},\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n  approval: {\n    title: t('Approvals'),\n    description: t('Notifications from teammates that require review or approval.'),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices,\n  },\n  quota: {\n    title: t('Quota Notifications'),\n    description: t(\n      'Control the notifications you receive for error, transaction, and attachment quota limits.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices,\n  },\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n","import {Component} from 'react';\n\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport {\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n} from 'sentry/views/settings/account/notifications/utils';\n\ntype Props = {\n  notificationSettings: NotificationSettingsObject;\n  notificationType: string;\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n  onSubmitSuccess: () => void;\n  organizations: OrganizationSummary[];\n};\n\ntype State = {};\n\nclass NotificationSettingsByOrganization extends Component<Props, State> {\n  render() {\n    const {\n      notificationType,\n      notificationSettings,\n      onChange,\n      onSubmitSuccess,\n      organizations,\n    } = this.props;\n\n    return (\n      <Form\n        saveOnBlur\n        apiMethod=\"PUT\"\n        apiEndpoint=\"/users/me/notification-settings/\"\n        initialData={getParentData(notificationType, notificationSettings, organizations)}\n        onSubmitSuccess={onSubmitSuccess}\n      >\n        <JsonForm\n          title={t('Organizations')}\n          fields={organizations.map(organization =>\n            getParentField(notificationType, notificationSettings, organization, onChange)\n          )}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettingsByOrganization);\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport Pagination from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {sortProjects} from 'sentry/utils';\nimport {\n  MIN_PROJECTS_FOR_PAGINATION,\n  MIN_PROJECTS_FOR_SEARCH,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n  groupByOrganization,\n} from 'sentry/views/settings/account/notifications/utils';\nimport {\n  RenderSearch,\n  SearchWrapper,\n} from 'sentry/views/settings/components/defaultSearchBar';\n\ntype Props = {\n  notificationSettings: NotificationSettingsObject;\n  notificationType: string;\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n  onSubmitSuccess: () => void;\n} & AsyncComponent['props'];\n\ntype State = {\n  projects: Project[];\n} & AsyncComponent['state'];\n\nclass NotificationSettingsByProjects extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      projects: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['projects', '/projects/']];\n  }\n\n  /**\n   * Check the notification settings for how many projects there are.\n   */\n  getProjectCount = (): number => {\n    const {notificationType, notificationSettings} = this.props;\n\n    return Object.values(notificationSettings[notificationType]?.project || {}).length;\n  };\n\n  /**\n   * The UI expects projects to be grouped by organization but can also use\n   * this function to make a single group with all organizations.\n   */\n  getGroupedProjects = (): {[key: string]: Project[]} => {\n    const {projects: stateProjects} = this.state;\n\n    return Object.fromEntries(\n      Object.values(groupByOrganization(sortProjects(stateProjects))).map(\n        ({organization, projects}) => [`${organization.name} Projects`, projects]\n      )\n    );\n  };\n\n  renderBody() {\n    const {notificationType, notificationSettings, onChange, onSubmitSuccess} =\n      this.props;\n    const {projects, projectsPageLinks} = this.state;\n\n    const canSearch = this.getProjectCount() >= MIN_PROJECTS_FOR_SEARCH;\n    const shouldPaginate = projects.length >= MIN_PROJECTS_FOR_PAGINATION;\n\n    const renderSearch: RenderSearch = ({defaultSearchBar}) => (\n      <StyledSearchWrapper>{defaultSearchBar}</StyledSearchWrapper>\n    );\n\n    return (\n      <Fragment>\n        {canSearch &&\n          this.renderSearchInput({\n            stateKey: 'projects',\n            url: '/projects/',\n            placeholder: t('Search Projects'),\n            children: renderSearch,\n          })}\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={getParentData(notificationType, notificationSettings, projects)}\n          onSubmitSuccess={onSubmitSuccess}\n        >\n          {projects.length === 0 ? (\n            <EmptyMessage>{t('No projects found')}</EmptyMessage>\n          ) : (\n            Object.entries(this.getGroupedProjects()).map(([groupTitle, parents]) => (\n              <JsonForm\n                collapsible\n                key={groupTitle}\n                title={groupTitle}\n                fields={parents.map(parent =>\n                  getParentField(notificationType, notificationSettings, parent, onChange)\n                )}\n              />\n            ))\n          )}\n        </Form>\n        {canSearch && shouldPaginate && (\n          <Pagination pageLinks={projectsPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default NotificationSettingsByProjects;\n\nconst StyledSearchWrapper = styled(SearchWrapper)`\n  * {\n    width: 100%;\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\n\ntype Props = {\n  organizations: OrganizationSummary[];\n};\n\nfunction UnlinkedAlert({organizations}: Props) {\n  return (\n    <StyledAlert type=\"warning\" showIcon>\n      {t(\n        'You\\'ve selected Slack as your delivery method, but do not have a linked account for the following organizations. You\\'ll receive email notifications instead until you type \"/sentry link\" into your Slack workspace to link your account. If slash commands are not working, please re-install the Slack integration.'\n      )}\n      <ul>\n        {organizations.map(organization => (\n          <li key={organization.id}>{organization.slug}</li>\n        ))}\n      </ul>\n    </StyledAlert>\n  );\n}\n\nconst StyledAlert = styled(Alert)`\n  margin: 20px 0px;\n`;\n\nexport default UnlinkedAlert;\n","import {Fragment} from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Field} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport {Organization, OrganizationSummary} from 'sentry/types';\nimport {OrganizationIntegration} from 'sentry/types/integrations';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport {\n  ALL_PROVIDER_NAMES,\n  CONFIRMATION_MESSAGE,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {ACCOUNT_NOTIFICATION_FIELDS} from 'sentry/views/settings/account/notifications/fields';\nimport {\n  NOTIFICATION_SETTING_FIELDS,\n  QUOTA_FIELDS,\n} from 'sentry/views/settings/account/notifications/fields2';\nimport NotificationSettingsByOrganization from 'sentry/views/settings/account/notifications/notificationSettingsByOrganization';\nimport NotificationSettingsByProjects from 'sentry/views/settings/account/notifications/notificationSettingsByProjects';\nimport {Identity} from 'sentry/views/settings/account/notifications/types';\nimport UnlinkedAlert from 'sentry/views/settings/account/notifications/unlinkedAlert';\nimport {\n  getCurrentDefault,\n  getCurrentProviders,\n  getParentIds,\n  getStateToPutForDefault,\n  getStateToPutForParent,\n  getStateToPutForProvider,\n  isEverythingDisabled,\n  isGroupedByProject,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n} from 'sentry/views/settings/account/notifications/utils';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = {\n  notificationType: string;\n  organizations: Organization[];\n} & AsyncComponent['props'];\n\ntype State = {\n  identities: Identity[];\n  notificationSettings: NotificationSettingsObject;\n  organizationIntegrations: OrganizationIntegration[];\n} & AsyncComponent['state'];\n\nconst typeMappedChildren = {\n  quota: ['quotaErrors', 'quotaTransactions', 'quotaAttachments', 'quotaWarnings'],\n};\n\nconst getQueryParams = (notificationType: string) => {\n  // if we need multiple settings on this page\n  // then omit the type so we can load all settings\n  if (notificationType in typeMappedChildren) {\n    return null;\n  }\n  return {type: notificationType};\n};\n\nclass NotificationSettingsByType extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      identities: [],\n      organizationIntegrations: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {notificationType} = this.props;\n    return [\n      [\n        'notificationSettings',\n        `/users/me/notification-settings/`,\n        {query: getQueryParams(notificationType)},\n      ],\n      ['identities', `/users/me/identities/`, {query: {provider: 'slack'}}],\n      [\n        'organizationIntegrations',\n        `/users/me/organization-integrations/`,\n        {query: {provider: 'slack'}},\n      ],\n    ];\n  }\n\n  componentDidMount() {\n    trackAdvancedAnalyticsEvent('notification_settings.tuning_page_viewed', {\n      organization: null,\n      notification_type: this.props.notificationType,\n    });\n  }\n\n  trackTuningUpdated(tuningFieldType: string) {\n    trackAdvancedAnalyticsEvent('notification_settings.updated_tuning_setting', {\n      organization: null,\n      notification_type: this.props.notificationType,\n      tuning_field_type: tuningFieldType,\n    });\n  }\n\n  /* Methods responsible for updating state and hitting the API. */\n\n  getStateToPutForProvider = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForProvider(\n      notificationType,\n      notificationSettings,\n      changedData\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForDependentSetting = (\n    changedData: NotificationSettingsByProviderObject,\n    notificationType: string\n  ) => {\n    const value = changedData[notificationType];\n    const {notificationSettings} = this.state;\n\n    // parent setting will control the which providers we send to\n    // just set every provider to the same value for the child/dependent setting\n    const userSettings = ALL_PROVIDER_NAMES.reduce((accum, provider) => {\n      accum[provider] = value;\n      return accum;\n    }, {});\n\n    // setting is a user-only setting\n    const updatedNotificationSettings = {\n      [notificationType]: {\n        user: {\n          me: userSettings,\n        },\n      },\n    };\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForDefault = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForParent = (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForParent(\n      notificationType,\n      notificationSettings,\n      changedData,\n      parentId\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n    return updatedNotificationSettings;\n  };\n\n  /* Methods responsible for rendering the page. */\n\n  getInitialData(): {[key: string]: string | string[]} {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    // TODO: Backend should be in charge of providing defaults since it depends on the type\n    const provider = !isEverythingDisabled(notificationType, notificationSettings)\n      ? getCurrentProviders(notificationType, notificationSettings)\n      : ['email', 'slack'];\n\n    const childTypes: string[] = typeMappedChildren[notificationType] || [];\n    const childTypesDefaults = Object.fromEntries(\n      childTypes.map(childType => [\n        childType,\n        getCurrentDefault(childType, notificationSettings),\n      ])\n    );\n\n    return {\n      [notificationType]: getCurrentDefault(notificationType, notificationSettings),\n      provider,\n      ...childTypesDefaults,\n    };\n  }\n\n  getFields(): Field[] {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const help = isGroupedByProject(notificationType)\n      ? t('This is the default for all projects.')\n      : t('This is the default for all organizations.');\n\n    const defaultField: Field = Object.assign(\n      {},\n      NOTIFICATION_SETTING_FIELDS[notificationType],\n      {\n        help,\n        getData: data => this.getStateToPutForDefault(data),\n      }\n    );\n    if (isSufficientlyComplex(notificationType, notificationSettings)) {\n      defaultField.confirm = {never: CONFIRMATION_MESSAGE};\n    }\n\n    const fields: Field[] = [defaultField];\n    if (!isEverythingDisabled(notificationType, notificationSettings)) {\n      fields.push(\n        Object.assign(\n          {\n            help: t('Where personal notifications will be sent.'),\n            getData: data => this.getStateToPutForProvider(data),\n          },\n          NOTIFICATION_SETTING_FIELDS.provider\n        )\n      );\n    }\n\n    // if a quota notification is not disabled, add in our dependent fields\n    if (\n      notificationType === 'quota' &&\n      !isEverythingDisabled(notificationType, notificationSettings)\n    ) {\n      fields.push(\n        ...QUOTA_FIELDS.map(field => ({\n          ...field,\n          type: 'select' as const,\n          getData: data =>\n            this.getStateToPutForDependentSetting(\n              data as NotificationSettingsByProviderObject,\n              field.name\n            ),\n        }))\n      );\n    }\n\n    return fields;\n  }\n\n  getUnlinkedOrgs = (): OrganizationSummary[] => {\n    const {organizations} = this.props;\n    const {identities, organizationIntegrations} = this.state;\n    const integrationExternalIDsByOrganizationID = Object.fromEntries(\n      organizationIntegrations.map(organizationIntegration => [\n        organizationIntegration.organizationId,\n        organizationIntegration.externalId,\n      ])\n    );\n\n    const identitiesByExternalId = Object.fromEntries(\n      identities.map(identity => [identity?.identityProvider?.externalId, identity])\n    );\n\n    return organizations.filter(organization => {\n      const externalID = integrationExternalIDsByOrganizationID[organization.id];\n      const identity = identitiesByExternalId[externalID];\n      return identity === undefined || identity === null;\n    });\n  };\n\n  renderBody() {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n    const hasSlack = getCurrentProviders(notificationType, notificationSettings).includes(\n      'slack'\n    );\n    const unlinkedOrgs = this.getUnlinkedOrgs();\n    const {title, description} = ACCOUNT_NOTIFICATION_FIELDS[notificationType];\n    return (\n      <Fragment>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n        {hasSlack && unlinkedOrgs.length > 0 && (\n          <UnlinkedAlert organizations={unlinkedOrgs} />\n        )}\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={this.getInitialData()}\n          onSubmitSuccess={() => this.trackTuningUpdated('general')}\n        >\n          <JsonForm\n            title={\n              isGroupedByProject(notificationType)\n                ? t('All Projects')\n                : t('All Organizations')\n            }\n            fields={this.getFields()}\n          />\n        </Form>\n        {!isEverythingDisabled(notificationType, notificationSettings) &&\n          (isGroupedByProject(notificationType) ? (\n            <NotificationSettingsByProjects\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n              onSubmitSuccess={() => this.trackTuningUpdated('project')}\n            />\n          ) : (\n            <NotificationSettingsByOrganization\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n              onSubmitSuccess={() => this.trackTuningUpdated('organization')}\n            />\n          ))}\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettingsByType);\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {fields} from 'sentry/data/forms/accountNotificationSettings';\nimport {t} from 'sentry/locale';\nimport {Organization, Project, UserEmail} from 'sentry/types';\nimport withOrganizations from 'sentry/utils/withOrganizations';\nimport AsyncView from 'sentry/views/asyncView';\nimport {\n  ACCOUNT_NOTIFICATION_FIELDS,\n  FineTuneField,\n} from 'sentry/views/settings/account/notifications/fields';\nimport NotificationSettingsByType from 'sentry/views/settings/account/notifications/notificationSettingsByType';\nimport {\n  groupByOrganization,\n  isGroupedByProject,\n} from 'sentry/views/settings/account/notifications/utils';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\ntype ANBPProps = {\n  field: FineTuneField;\n  projects: Project[];\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                defaultValue={f.defaultValue}\n                name={f.name}\n                options={f.options}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\ntype ANBOProps = {\n  field: FineTuneField;\n  organizations: Organization[];\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            defaultValue={f.defaultValue}\n            name={f.name}\n            options={f.options}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{fineTuneType: string}, {}> & {\n    organizations: Organization[];\n  };\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  fineTuneData: Record<string, any> | null;\n  notifications: Record<string, any> | null;\n  projects: Project[] | null;\n};\n\nclass AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          }\n          if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {params} = this.props;\n    const {fineTuneType} = params;\n\n    if (\n      ['alerts', 'deploy', 'workflow', 'activeRelease', 'approval', 'quota'].includes(\n        fineTuneType\n      )\n    ) {\n      return <NotificationSettingsByType notificationType={fineTuneType} />;\n    }\n\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.options = this.emailChoices.map(({email}) => ({value: email, label: email}));\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n\nexport default AccountNotificationFineTuning;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport AsyncView from 'sentry/views/asyncView';\n\nexport type RenderSearch = React.ComponentProps<\n  typeof AsyncView.prototype.renderSearchInput\n>['children'];\n\nexport const SearchWrapper = styled('div')`\n  display: flex;\n  grid-template-columns: 1fr max-content;\n  gap: ${space(1.5)};\n  margin-top: ${space(4)};\n  margin-bottom: ${space(1.5)};\n  position: relative;\n`;\n"],"names":["route","fields","subscribeByDefault","name","type","label","t","help","workflowNotifications","choices","weeklyReports","disabled","deployNotifications","personalActivityNotifications","selfAssignOnResolve","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ACCOUNT_NOTIFICATION_FIELDS","alerts","description","options","value","defaultValue","defaultFieldName","workflow","activeRelease","deploy","reports","approval","quota","email","NotificationSettingsByOrganization","Component","notificationType","notificationSettings","onChange","onSubmitSuccess","organizations","props","saveOnBlur","apiMethod","apiEndpoint","initialData","getParentData","map","organization","getParentField","withOrganizations","NotificationSettingsByProjects","Object","values","project","length","projects","stateProjects","state","fromEntries","groupByOrganization","sortProjects","getDefaultState","super","getEndpoints","renderBody","projectsPageLinks","canSearch","getProjectCount","MIN_PROJECTS_FOR_SEARCH","shouldPaginate","MIN_PROJECTS_FOR_PAGINATION","Fragment","renderSearchInput","stateKey","url","placeholder","children","defaultSearchBar","StyledSearchWrapper","entries","getGroupedProjects","groupTitle","parents","collapsible","parent","pageLinks","SearchWrapper","UnlinkedAlert","StyledAlert","showIcon","slug","id","Alert","typeMappedChildren","getQueryParams","NotificationSettingsByType","changedData","updatedNotificationSettings","getStateToPutForProvider","setState","mergeNotificationSettings","user","me","ALL_PROVIDER_NAMES","accum","provider","getStateToPutForDefault","getParentIds","parentId","getStateToPutForParent","identities","organizationIntegrations","integrationExternalIDsByOrganizationID","organizationIntegration","organizationId","externalId","identitiesByExternalId","identity","identityProvider","filter","externalID","query","componentDidMount","trackAdvancedAnalyticsEvent","notification_type","trackTuningUpdated","tuningFieldType","tuning_field_type","getInitialData","isEverythingDisabled","getCurrentProviders","childTypes","childTypesDefaults","childType","getCurrentDefault","getFields","isGroupedByProject","defaultField","assign","NOTIFICATION_SETTING_FIELDS","getData","data","isSufficientlyComplex","confirm","never","CONFIRMATION_MESSAGE","push","QUOTA_FIELDS","field","getStateToPutForDependentSetting","hasSlack","includes","unlinkedOrgs","getUnlinkedOrgs","PanelBodyLineItem","PanelBody","p","theme","innerBorder","AccountNotificationsByProject","projectsByOrg","fieldConfig","org","projectFields","f","AccountNotificationsByOrganization","AccountNotificationsByOrganizationContainer","AccountNotificationFineTuning","fineTuneType","params","endpoints","emailChoices","emails","isVerified","sort","a","b","isPrimary","notifications","fineTuneData","isProject","hasProjects","hasButtons","Heading","space"],"sourceRoot":""}