{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_accountSecurityDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/components/recoveryCodes.tsx","webpack:///./app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityDetails.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport Confirm from 'sentry/components/confirm';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'sentry/components/panels';\nimport {IconCopy, IconDownload, IconPrint} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  codes: string[];\n  isEnrolled: boolean;\n  onRegenerateBackupCodes: () => void;\n  className?: string;\n};\n\nconst RecoveryCodes = ({\n  className,\n  isEnrolled,\n  codes,\n  onRegenerateBackupCodes,\n}: Props) => {\n  const printCodes = () => {\n    // eslint-disable-next-line dot-notation\n    const iframe = window.frames['printable'];\n    iframe.document.write(codes.join('<br>'));\n    iframe.print();\n    iframe.document.close();\n  };\n\n  if (!isEnrolled || !codes) {\n    return null;\n  }\n\n  const formattedCodes = codes.join(' \\n');\n\n  return (\n    <CodeContainer className={className}>\n      <PanelHeader hasButtons>\n        {t('Unused Codes')}\n\n        <Actions>\n          <Clipboard hideUnsupported value={formattedCodes}>\n            <Button size=\"sm\" aria-label={t('copy')}>\n              <IconCopy />\n            </Button>\n          </Clipboard>\n          <Button size=\"sm\" onClick={printCodes} aria-label={t('print')}>\n            <IconPrint />\n          </Button>\n          <Button\n            size=\"sm\"\n            download=\"sentry-recovery-codes.txt\"\n            href={`data:text/plain;charset=utf-8,${formattedCodes}`}\n            aria-label={t('download')}\n          >\n            <IconDownload />\n          </Button>\n          <Confirm\n            onConfirm={onRegenerateBackupCodes}\n            message={t(\n              'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'\n            )}\n          >\n            <Button priority=\"danger\" size=\"sm\">\n              {t('Regenerate Codes')}\n            </Button>\n          </Confirm>\n        </Actions>\n      </PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"warning\">\n          {t(\n            'Make sure to save a copy of your recovery codes and store them in a safe place.'\n          )}\n        </PanelAlert>\n        <div>{!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}</div>\n        {!codes.length && (\n          <EmptyMessage>{t('You have no more recovery codes to use')}</EmptyMessage>\n        )}\n      </PanelBody>\n      <iframe name=\"printable\" style={{display: 'none'}} />\n    </CodeContainer>\n  );\n};\n\nexport default RecoveryCodes;\n\nconst CodeContainer = styled(Panel)`\n  margin-top: ${space(4)};\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n`;\n\nconst Code = styled(PanelItem)`\n  font-family: ${p => p.theme.text.familyMono};\n  padding: ${space(2)};\n`;\n","import {Fragment, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DateTime from 'sentry/components/dateTime';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Input from 'sentry/components/input';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose, IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport ConfirmHeader from 'sentry/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst U2fEnrolledDetails = props => {\n  const {className, isEnrolled, devices, id, onRemoveU2fDevice, onRenameU2fDevice} =\n    props;\n\n  if (id !== 'u2f' || !isEnrolled) {\n    return null;\n  }\n\n  const hasDevices = devices?.length;\n  // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons\n  const isLastDevice = hasDevices === 1;\n  return (\n    <Panel className={className}>\n      <PanelHeader>{t('Device name')}</PanelHeader>\n\n      <PanelBody>\n        {!hasDevices && (\n          <EmptyMessage>{t('You have not added any U2F devices')}</EmptyMessage>\n        )}\n        {hasDevices &&\n          devices?.map((device, i) => (\n            <Device\n              key={i}\n              device={device}\n              isLastDevice={isLastDevice}\n              onRenameU2fDevice={onRenameU2fDevice}\n              onRemoveU2fDevice={onRemoveU2fDevice}\n            />\n          ))}\n        <AddAnotherPanelItem>\n          <Button type=\"button\" to=\"/settings/account/security/mfa/u2f/enroll/\" size=\"sm\">\n            {t('Add Another Device')}\n          </Button>\n        </AddAnotherPanelItem>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst Device = props => {\n  const {device, isLastDevice, onRenameU2fDevice, onRemoveU2fDevice} = props;\n  const [deviceName, setDeviceName] = useState(device.name);\n  const [isEditing, setEditting] = useState(false);\n\n  if (!isEditing) {\n    return (\n      <DevicePanelItem key={device.name}>\n        <DeviceInformation>\n          <Name>{device.name}</Name>\n          <FadedDateTime date={device.timestamp} />\n        </DeviceInformation>\n        <Actions>\n          <Button size=\"sm\" onClick={() => setEditting(true)}>\n            {t('Rename Device')}\n          </Button>\n        </Actions>\n        <Actions>\n          <Confirm\n            onConfirm={() => onRemoveU2fDevice(device)}\n            disabled={isLastDevice}\n            message={\n              <Fragment>\n                <ConfirmHeader>{t('Do you want to remove U2F device?')}</ConfirmHeader>\n                <TextBlock>\n                  {t(`Are you sure you want to remove the U2F device \"${device.name}\"?`)}\n                </TextBlock>\n              </Fragment>\n            }\n          >\n            <Button size=\"sm\" priority=\"danger\">\n              <Tooltip\n                disabled={!isLastDevice}\n                title={t('Can not remove last U2F device')}\n              >\n                <IconDelete size=\"xs\" />\n              </Tooltip>\n            </Button>\n          </Confirm>\n        </Actions>\n      </DevicePanelItem>\n    );\n  }\n\n  return (\n    <DevicePanelItem key={device.name}>\n      <DeviceInformation>\n        <DeviceNameInput\n          type=\"text\"\n          value={deviceName}\n          onChange={e => {\n            setDeviceName(e.target.value);\n          }}\n        />\n        <FadedDateTime date={device.timestamp} />\n      </DeviceInformation>\n      <Actions>\n        <Button\n          priority=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            onRenameU2fDevice(device, deviceName);\n            setEditting(false);\n          }}\n        >\n          Rename Device\n        </Button>\n      </Actions>\n\n      <Actions>\n        <Button\n          size=\"sm\"\n          title=\"Cancel rename\"\n          onClick={() => {\n            setDeviceName(device.name);\n            setEditting(false);\n          }}\n        >\n          <IconClose size=\"xs\" />\n        </Button>\n      </Actions>\n    </DevicePanelItem>\n  );\n};\n\nconst DeviceNameInput = styled(Input)`\n  width: 50%;\n  margin-right: ${space(2)};\n`;\n\nconst DevicePanelItem = styled(PanelItem)`\n  padding: 0;\n`;\n\nconst DeviceInformation = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1;\n  height: 72px;\n\n  padding: ${space(2)};\n  padding-right: 0;\n`;\n\nconst FadedDateTime = styled(DateTime)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  opacity: 0.6;\n`;\n\nconst Name = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  margin: ${space(2)};\n`;\n\nconst AddAnotherPanelItem = styled(PanelItem)`\n  justify-content: flex-end;\n  padding: ${space(2)};\n`;\n\nexport default styled(U2fEnrolledDetails)`\n  margin-top: ${space(4)};\n`;\n","/**\n * AccountSecurityDetails is only displayed when user is enrolled in the 2fa method.\n * It displays created + last used time of the 2fa method.\n *\n * Also displays 2fa method specific details.\n */\nimport {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport DateTime from 'sentry/components/dateTime';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Authenticator, AuthenticatorDevice} from 'sentry/types';\nimport AsyncView from 'sentry/views/asyncView';\nimport RecoveryCodes from 'sentry/views/settings/account/accountSecurity/components/recoveryCodes';\nimport RemoveConfirm from 'sentry/views/settings/account/accountSecurity/components/removeConfirm';\nimport U2fEnrolledDetails from 'sentry/views/settings/account/accountSecurity/components/u2fEnrolledDetails';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nconst ENDPOINT = '/users/me/authenticators/';\n\ntype AuthenticatorDateProps = {\n  /**\n   * Can be null or a Date object.\n   * Component will have value \"never\" if it is null\n   */\n  date: string | null;\n  label: string;\n};\n\nfunction AuthenticatorDate({label, date}: AuthenticatorDateProps) {\n  return (\n    <Fragment>\n      <DateLabel>{label}</DateLabel>\n      <div>{date ? <DateTime date={date} /> : t('never')}</div>\n    </Fragment>\n  );\n}\n\ntype Props = {\n  deleteDisabled: boolean;\n  onRegenerateBackupCodes: () => void;\n} & RouteComponentProps<{authId: string}, {}>;\n\ntype State = {\n  authenticator: Authenticator | null;\n} & AsyncView['state'];\n\nclass AccountSecurityDetails extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {authId} = params;\n\n    return [['authenticator', `${ENDPOINT}${authId}/`]];\n  }\n\n  handleRemove = async (device?: AuthenticatorDevice) => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // if the device is defined, it means that U2f is being removed\n    // reason for adding a trailing slash is a result of the endpoint on line 109 needing it but it can't be set there as if deviceId is None, the route will end with '//'\n    const deviceId = device ? `${device.key_handle}/` : '';\n    const deviceName = device ? device.name : t('Authenticator');\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(`${ENDPOINT}${authenticator.authId}/${deviceId}`, {\n        method: 'DELETE',\n      });\n      this.props.router.push('/settings/account/security');\n      addSuccessMessage(t('%s has been removed', deviceName));\n    } catch {\n      // Error deleting authenticator\n      this.setState({loading: false});\n      addErrorMessage(t('Error removing %s', deviceName));\n    }\n  };\n\n  handleRename = async (device: AuthenticatorDevice, deviceName: string) => {\n    const {authenticator} = this.state;\n\n    if (!authenticator?.authId) {\n      return;\n    }\n    // if the device is defined, it means that U2f is being renamed\n    // reason for adding a trailing slash is a result of the endpoint on line 109 needing it but it can't be set there as if deviceId is None, the route will end with '//'\n    const deviceId = device ? `${device.key_handle}/` : '';\n\n    this.setState({loading: true});\n    const data = {\n      name: deviceName,\n    };\n\n    try {\n      await this.api.requestPromise(`${ENDPOINT}${authenticator.authId}/${deviceId}`, {\n        method: 'PUT',\n        data,\n      });\n      this.props.router.push(`/settings/account/security/mfa/${authenticator.authId}`);\n      addSuccessMessage(t('Device was renamed'));\n    } catch {\n      this.setState({loading: false});\n      addErrorMessage(t('Error renaming the device'));\n    }\n  };\n\n  renderBody() {\n    const {authenticator} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const {deleteDisabled, onRegenerateBackupCodes} = this.props;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <span>{authenticator.name}</span>\n              <AuthenticatorStatus enabled={authenticator.isEnrolled} />\n            </Fragment>\n          }\n          action={\n            <AuthenticatorActions>\n              {authenticator.isEnrolled && authenticator.allowRotationInPlace && (\n                <Button to={`/settings/account/security/mfa/${authenticator.id}/enroll/`}>\n                  {t('Rotate Secret Key')}\n                </Button>\n              )}\n              {authenticator.isEnrolled && authenticator.removeButton && (\n                <Tooltip\n                  title={t(\n                    \"Two-factor authentication is required for at least one organization you're a member of.\"\n                  )}\n                  disabled={!deleteDisabled}\n                >\n                  <RemoveConfirm onConfirm={this.handleRemove} disabled={deleteDisabled}>\n                    <Button priority=\"danger\">{authenticator.removeButton}</Button>\n                  </RemoveConfirm>\n                </Tooltip>\n              )}\n            </AuthenticatorActions>\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        <AuthenticatorDates>\n          <AuthenticatorDate label={t('Created at')} date={authenticator.createdAt} />\n          <AuthenticatorDate label={t('Last used')} date={authenticator.lastUsedAt} />\n        </AuthenticatorDates>\n\n        <U2fEnrolledDetails\n          isEnrolled={authenticator.isEnrolled}\n          id={authenticator.id}\n          devices={authenticator.devices}\n          onRemoveU2fDevice={this.handleRemove}\n          onRenameU2fDevice={this.handleRename}\n        />\n\n        {authenticator.isEnrolled && authenticator.phone && (\n          <PhoneWrapper>\n            {t('Confirmation codes are sent to the following phone number')}:\n            <Phone>{authenticator.phone}</Phone>\n          </PhoneWrapper>\n        )}\n\n        <RecoveryCodes\n          onRegenerateBackupCodes={onRegenerateBackupCodes}\n          isEnrolled={authenticator.isEnrolled}\n          codes={authenticator.codes}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default AccountSecurityDetails;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-left: ${space(1)};\n`;\n\nconst AuthenticatorActions = styled('div')`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  > * {\n    margin-left: ${space(1)};\n  }\n`;\n\nconst AuthenticatorDates = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  grid-template-columns: max-content auto;\n`;\n\nconst DateLabel = styled('span')`\n  font-weight: bold;\n`;\n\nconst PhoneWrapper = styled('div')`\n  margin-top: ${space(4)};\n`;\n\nconst Phone = styled('span')`\n  font-weight: bold;\n  margin-left: ${space(1)};\n`;\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import {Fragment} from 'react';\n\nimport Confirm from 'sentry/components/confirm';\nimport {t} from 'sentry/locale';\nimport ConfirmHeader from 'sentry/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","RecoveryCodes","className","isEnrolled","codes","onRegenerateBackupCodes","formattedCodes","join","CodeContainer","hasButtons","t","Actions","hideUnsupported","value","size","onClick","iframe","window","frames","document","write","print","close","download","href","onConfirm","message","priority","type","length","map","code","Code","name","style","display","Panel","space","PanelItem","p","theme","text","familyMono","U2fEnrolledDetails","props","devices","id","onRemoveU2fDevice","onRenameU2fDevice","hasDevices","isLastDevice","device","i","Device","AddAnotherPanelItem","to","deviceName","setDeviceName","useState","isEditing","setEditting","DevicePanelItem","DeviceInformation","DeviceNameInput","onChange","e","target","FadedDateTime","date","timestamp","Name","disabled","Fragment","Input","DateTime","fontSizeRelativeSmall","ENDPOINT","AuthenticatorDate","label","DateLabel","AccountSecurityDetails","async","authenticator","state","authId","deviceId","key_handle","setState","loading","api","requestPromise","method","router","push","addSuccessMessage","addErrorMessage","data","getEndpoints","params","renderBody","deleteDisabled","AuthenticatorStatus","enabled","action","AuthenticatorActions","allowRotationInPlace","removeButton","handleRemove","description","AuthenticatorDates","createdAt","lastUsedAt","handleRename","phone","PhoneWrapper","Phone","CircleIndicator","RemoveConfirm"],"sourceRoot":""}