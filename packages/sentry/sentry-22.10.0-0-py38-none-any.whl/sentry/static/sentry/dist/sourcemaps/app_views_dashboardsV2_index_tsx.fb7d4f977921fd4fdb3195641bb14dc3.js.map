{"version":3,"file":"chunks/app_views_dashboardsV2_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/index.tsx","webpack:///./app/views/dashboardsV2/orgDashboards.tsx","webpack:///./app/views/dashboardsV2/view.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState} from './types';\nimport {DashboardBasicFeature} from './view';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  api: Client;\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction DashboardsV2Container(props: Props) {\n  const {organization, params, api, location, children} = props;\n\n  if (organization.features.includes('dashboards-edit')) {\n    return <Fragment>{children}</Fragment>;\n  }\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <ErrorBoundary>\n              <DashboardDetail\n                {...props}\n                initialState={DashboardState.VIEW}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                onDashboardUpdate={onDashboardUpdate}\n              />\n            </ErrorBoundary>\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withApi(withOrganization(DashboardsV2Container));\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\n\nimport {assignTempId} from './layoutUtils';\nimport {DashboardDetails, DashboardListItem} from './types';\nimport {hasSavedPageFilters} from './utils';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  onDashboardUpdate: (updatedDashboard: DashboardDetails) => void;\n};\n\ntype Props = {\n  api: Client;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n  location: Location;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.view',\n        eventName: 'Dashboards2: View dashboard',\n        organization_id: parseInt(this.props.organization.id, 10),\n        dashboard_id: params.dashboardId,\n      });\n    }\n\n    return endpoints;\n  }\n\n  onDashboardUpdate(updatedDashboard: DashboardDetails) {\n    this.setState({selectedDashboard: updatedDashboard});\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      const queryParamFilters = new Set([\n        'project',\n        'environment',\n        'statsPeriod',\n        'start',\n        'end',\n        'utc',\n        'release',\n      ]);\n      if (\n        organization.features.includes('dashboards-top-level-filter') &&\n        stateKey === 'selectedDashboard' &&\n        // Only redirect if there are saved filters and none of the filters\n        // appear in the query params\n        hasSavedPageFilters(data) &&\n        isEmpty(\n          Object.keys(location.query).filter(unsavedQueryParam =>\n            queryParamFilters.has(unsavedQueryParam)\n          )\n        )\n      ) {\n        browserHistory.replace({\n          ...location,\n          query: {\n            ...location.query,\n            project: data.projects,\n            environment: data.environment,\n            statsPeriod: data.period,\n            start: data.start,\n            end: data.end,\n            utc: data.utc,\n          },\n        });\n      }\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    const url = `/organizations/${organization.slug}/dashboard/${dashboardId}/`;\n    browserHistory.replace({\n      pathname: url,\n      query: {\n        ...location.query,\n      },\n    });\n  }\n\n  renderLoading() {\n    return (\n      <PageContent>\n        <LoadingIndicator />\n      </PageContent>\n    );\n  }\n\n  renderBody() {\n    const {children, organization} = this.props;\n    const {selectedDashboard, error} = this.state;\n    let dashboard = selectedDashboard;\n\n    if (organization.features.includes('dashboard-grid-layout')) {\n      // Ensure there are always tempIds for grid layout\n      // This is needed because there are cases where the dashboard\n      // renders before the onRequestSuccess setState is processed\n      // and will caused stacked widgets because of missing tempIds\n      dashboard = selectedDashboard\n        ? {\n            ...selectedDashboard,\n            widgets: selectedDashboard.widgets.map(assignTempId),\n          }\n        : null;\n    }\n\n    return children({\n      error,\n      dashboard,\n      dashboards: this.getDashboards(),\n      onDashboardUpdate: (updatedDashboard: DashboardDetails) =>\n        this.onDashboardUpdate(updatedDashboard),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n    const {loading, selectedDashboard} = this.state;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace({\n        pathname: `/organizations/${organization.slug}/dashboards/`,\n        query: {\n          ...location.query,\n        },\n      });\n      return null;\n    }\n\n    if (\n      loading &&\n      organization.features.includes('dashboards-top-level-filter') &&\n      selectedDashboard &&\n      hasSavedPageFilters(selectedDashboard) &&\n      isEmpty(location.query)\n    ) {\n      // Block dashboard from rendering if the dashboard has filters and\n      // the URL does not contain filters yet. The filters can either match the\n      // saved filters, or can be different (i.e. sharing an unsaved state)\n      return this.renderLoading();\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default OrgDashboards;\n","import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {updateDashboardVisit} from 'sentry/actionCreators/dashboards';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState, Widget} from './types';\nimport {constructWidgetFromQuery} from './utils';\n\nconst ALLOWED_PARAMS = [\n  'start',\n  'end',\n  'utc',\n  'period',\n  'project',\n  'environment',\n  'statsPeriod',\n];\n\ntype Props = RouteComponentProps<\n  {dashboardId: string; orgId: string; widgetId?: number},\n  {}\n> & {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const api = useApi();\n\n  const {organization, params, location} = props;\n  const dashboardId = params.dashboardId;\n  const orgSlug = organization.slug;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n  const [dashboardInitialState, setDashboardInitialState] = useState(DashboardState.VIEW);\n\n  useEffect(() => {\n    if (dashboardId && dashboardId !== 'default-overview') {\n      updateDashboardVisit(api, orgSlug, dashboardId);\n    }\n  }, [api, orgSlug, dashboardId]);\n\n  useEffect(() => {\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    // Clean up url after constructing widget from query string, only allow GHS params\n    if (constructedWidget) {\n      setDashboardInitialState(DashboardState.EDIT);\n      browserHistory.replace({\n        pathname: location.pathname,\n        query: pick(location.query, ALLOWED_PARAMS),\n      });\n    }\n  }, [location.pathname]);\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <ErrorBoundary>\n              <DashboardDetail\n                {...props}\n                initialState={dashboardInitialState}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                onDashboardUpdate={onDashboardUpdate}\n                newWidget={newWidget}\n                onSetNewWidget={() => setNewWidget(undefined)}\n              />\n            </ErrorBoundary>\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withOrganization(ViewEditDashboard);\n\ntype FeatureProps = {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nexport const DashboardBasicFeature = ({organization, children}: FeatureProps) => {\n  const renderDisabled = () => (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n};\n"],"names":["DashboardsV2Container","props","organization","params","api","location","children","features","includes","Fragment","DashboardBasicFeature","dashboard","dashboards","error","onDashboardUpdate","initialState","DashboardState","withApi","withOrganization","OrgDashboards","AsyncComponent","loading","reloading","errors","selectedDashboard","componentDidUpdate","prevProps","isEqual","dashboardId","this","remountComponent","getEndpoints","url","slug","endpoints","push","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","dashboard_id","updatedDashboard","setState","getDashboards","state","Array","isArray","onRequestSuccess","stateKey","data","queryParamFilters","Set","hasSavedPageFilters","isEmpty","Object","keys","query","filter","unsavedQueryParam","has","browserHistory","project","projects","environment","statsPeriod","period","start","end","utc","length","pathname","renderLoading","renderBody","widgets","map","assignTempId","renderError","values","find","resp","status","super","renderComponent","title","t","orgSlug","ALLOWED_PARAMS","ViewEditDashboard","useApi","newWidget","setNewWidget","useState","dashboardInitialState","setDashboardInitialState","useEffect","updateDashboardVisit","constructedWidget","constructWidgetFromQuery","pick","onSetNewWidget","undefined","hookName","renderDisabled","type"],"sourceRoot":""}