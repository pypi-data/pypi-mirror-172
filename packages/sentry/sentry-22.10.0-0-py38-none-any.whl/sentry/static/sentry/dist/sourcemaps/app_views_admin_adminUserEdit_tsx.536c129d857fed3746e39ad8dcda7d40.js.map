{"version":3,"file":"chunks/app_views_admin_adminUserEdit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/admin/adminUserEdit.tsx","webpack:///./app/views/asyncView.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps, openModal} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {User} from 'sentry/types';\nimport AsyncView from 'sentry/views/asyncView';\n\nconst userEditForm: JsonFormObject = {\n  title: 'User details',\n  fields: [\n    {\n      name: 'name',\n      type: 'string',\n      required: true,\n      label: t('Name'),\n    },\n    {\n      name: 'username',\n      type: 'string',\n      required: true,\n      label: t('Username'),\n      help: t('The username is the unique id of the user in the system'),\n    },\n    {\n      name: 'email',\n      type: 'string',\n      required: true,\n      label: t('Email'),\n      help: t('The users primary email address'),\n    },\n    {\n      name: 'isActive',\n      type: 'boolean',\n      required: true,\n      label: t('Active'),\n      help: t(\n        'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'\n      ),\n    },\n    {\n      name: 'isStaff',\n      type: 'boolean',\n      required: true,\n      label: t('Admin'),\n      help: t('Designates whether this user can perform administrative functions.'),\n    },\n    {\n      name: 'isSuperuser',\n      type: 'boolean',\n      required: true,\n      label: t('Superuser'),\n      help: t(\n        'Designates whether this user has all permissions without explicitly assigning them.'\n      ),\n    },\n  ],\n};\n\nconst REMOVE_BUTTON_LABEL = {\n  disable: t('Disable User'),\n  delete: t('Permanently Delete User'),\n};\n\ntype DeleteType = 'disable' | 'delete';\n\ntype RemoveModalProps = ModalRenderProps & {\n  onRemove: (type: DeleteType) => void;\n  user: User;\n};\n\ntype RemoveModalState = {\n  deleteType: DeleteType;\n};\n\nclass RemoveUserModal extends Component<RemoveModalProps, RemoveModalState> {\n  state: RemoveModalState = {\n    deleteType: 'disable',\n  };\n\n  onRemove = () => {\n    this.props.onRemove(this.state.deleteType);\n    this.props.closeModal();\n  };\n\n  render() {\n    const {user} = this.props;\n    const {deleteType} = this.state;\n\n    return (\n      <Fragment>\n        <RadioGroup\n          value={deleteType}\n          label={t('Remove user %s', user.email)}\n          onChange={type => this.setState({deleteType: type})}\n          choices={[\n            ['disable', t('Disable the account.')],\n            ['delete', t('Permanently remove the user and their data.')],\n          ]}\n        />\n        <ModalFooter>\n          <Button priority=\"danger\" onClick={this.onRemove}>\n            {REMOVE_BUTTON_LABEL[deleteType]}\n          </Button>\n          <Button onClick={this.props.closeModal}>{t('Cancel')}</Button>\n        </ModalFooter>\n      </Fragment>\n    );\n  }\n}\n\ntype Props = AsyncView['props'] & RouteComponentProps<{id: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  user: User | null;\n};\n\nclass AdminUserEdit extends AsyncView<Props, State> {\n  get userEndpoint() {\n    const {params} = this.props;\n    return `/users/${params.id}/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['user', this.userEndpoint]];\n  }\n\n  async deleteUser() {\n    await this.api.requestPromise(this.userEndpoint, {\n      method: 'DELETE',\n      data: {hardDelete: true, organizations: []},\n    });\n\n    addSuccessMessage(t(\"%s's account has been deleted.\", this.state.user?.email));\n    browserHistory.replace('/manage/users/');\n  }\n\n  async deactivateUser() {\n    const response = await this.api.requestPromise(this.userEndpoint, {\n      method: 'PUT',\n      data: {isActive: false},\n    });\n\n    this.setState({user: response});\n    this.formModel.setInitialData(response);\n    addSuccessMessage(t(\"%s's account has been deactivated.\", response.email));\n  }\n\n  removeUser = (actionTypes: DeleteType) =>\n    actionTypes === 'delete' ? this.deleteUser() : this.deactivateUser();\n\n  formModel = new FormModel();\n\n  renderBody() {\n    const {user} = this.state;\n\n    if (user === null) {\n      return null;\n    }\n\n    const openDeleteModal = () =>\n      openModal(opts => (\n        <RemoveUserModal user={user} onRemove={this.removeUser} {...opts} />\n      ));\n\n    return (\n      <Fragment>\n        <h3>{t('Users')}</h3>\n        <p>{t('Editing user: %s', user.email)}</p>\n        <Form\n          model={this.formModel}\n          initialData={user}\n          apiMethod=\"PUT\"\n          apiEndpoint={this.userEndpoint}\n          requireChanges\n          onSubmitError={addErrorMessage}\n          onSubmitSuccess={data => {\n            this.setState({user: data});\n            addSuccessMessage('User account updated.');\n          }}\n          extraButton={\n            <Button\n              type=\"button\"\n              onClick={openDeleteModal}\n              style={{marginLeft: space(1)}}\n              priority=\"danger\"\n            >\n              {t('Remove User')}\n            </Button>\n          }\n        >\n          <JsonForm forms={[userEditForm]} />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nconst ModalFooter = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  justify-content: end;\n  padding: 20px 30px;\n  margin: 20px -30px -30px;\n  border-top: 1px solid ${p => p.theme.border};\n`;\n\nexport default AdminUserEdit;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["userEditForm","title","fields","name","type","required","label","t","help","REMOVE_BUTTON_LABEL","disable","delete","RemoveUserModal","Component","deleteType","this","props","onRemove","state","closeModal","render","user","Fragment","value","email","onChange","setState","choices","ModalFooter","priority","onClick","AdminUserEdit","AsyncView","actionTypes","deleteUser","deactivateUser","FormModel","userEndpoint","params","id","getEndpoints","api","requestPromise","method","data","hardDelete","organizations","addSuccessMessage","browserHistory","response","isActive","formModel","setInitialData","renderBody","model","initialData","apiMethod","apiEndpoint","requireChanges","onSubmitError","addErrorMessage","onSubmitSuccess","extraButton","openModal","opts","removeUser","style","marginLeft","space","forms","p","theme","border","AsyncComponent","getTitle","renderComponent"],"sourceRoot":""}