{"version":3,"file":"chunks/app_components_featureFeedback_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"+6CAgCA,MAAMA,EAAiB,IAAIC,EAAAA,EAAc,CAEvCC,IAAK,uEACLC,UAAWC,EAAAA,EACXC,YAAaC,EAAAA,GACbC,aAAcC,EAAAA,KAGVC,EAAuB,EAC3BC,EAAAA,EAAAA,GAAE,8BACFA,EAAAA,EAAAA,GAAE,wBACFA,EAAAA,EAAAA,GAAE,iBAqCG,SAASC,EAAT,GAMsC,IANC,OAC5CC,EAD4C,KAE5CC,EAF4C,OAG5CC,EAH4C,WAI5CC,KACGC,GACwC,EAC3C,MAAM,aAACC,IAAgBC,EAAAA,EAAAA,GAAeC,EAAAA,IAChC,SAACC,EAAUC,gBAAiBC,IAAkBC,EAAAA,EAAAA,KAC9CC,GAAWC,EAAAA,EAAAA,KACXC,GAAQC,EAAAA,EAAAA,KACRC,EAAOC,EAAAA,EAAAA,IAAgB,QACvBC,EAAeD,EAAAA,EAAAA,IAAgB,iBAC9BE,EAAOC,IAAYC,EAAAA,EAAAA,eACLC,IAAnBlB,EAAMmB,SACD,CAACC,aAASF,EAAWG,oBAAgBH,GACtClB,EAAMsB,aAENC,GAAgBC,EAAAA,EAAAA,GAAU,eAAcd,EAAMe,YAAYC,UAE1DC,GAAUC,EAAAA,EAAAA,UAAQ,KACtB,GAAItB,GAAkBE,EAASqB,MAAMF,QACnC,OAAOvB,EAAS0B,MAAKC,GAAKA,EAAEC,KAAOxB,EAASqB,MAAMF,SAEpD,GACC,CAACrB,EAAgBF,EAAUI,EAASqB,MAAMF,UAEvCM,GAAeC,EAAAA,EAAAA,cAClBC,IACC,MAAMC,EAA0B,CAC9BC,QAAU,aAAYrC,EAAMsC,sBAC5BC,QAAS,CACPC,IAAKhC,EAASiC,UAEhBC,MAAO,CACLC,YAAa1C,GAAc2C,UAAY,GACvCC,UAAW5C,GAAc6C,QAAU,GACnCC,gBAAiBpB,GAASiB,UAAY,IAExCI,KAAM,CACJV,YAAatC,EAAMsC,aAErB1B,OACAqC,MAAO,QAGT,QAAuB/B,IAAnBlB,EAAMmB,SAAwB,CAChC,MAAM+B,EAAgBlD,EAAMkD,eAAiBzD,EAC7CT,EAAemE,aAAa,IACvBf,EACHC,QAAStB,EAAMM,gBAAgB+B,OAC1B,aAAYF,EAAcnC,EAAMK,cAAcL,EAAMM,iBACpD,aAAY6B,EAAcnC,EAAMK,YAExC,MACCpC,EAAemE,aAAa,IACvBf,KACCD,GAAmB,CAAC,KAI5BkB,EAAAA,EAAAA,KAAkB3D,EAAAA,EAAAA,GAAE,uDACpBK,GAAY,GAEd,CACES,EAASiC,SACT1C,EACAE,GAAc2C,SACd3C,GAAc6C,OACdnB,GAASiB,SACThC,EACAZ,EACAe,IAIEuC,GAAcpB,EAAAA,EAAAA,cAClB,IAA6D,IAA3Df,SAAUoC,GAAiD,EAC3D,OACE,QAAC3D,EAAD,CAAQ4D,aAAW,EAAnB,UACE,uBAAKD,KAFT,GAMF,CAAC3D,IAGG6D,GAAcvB,EAAAA,EAAAA,cAClB,IAMiD,IANhD,OACCwB,EADD,OAECC,EAFD,gBAGCxB,EAHD,sBAICyB,EAJD,gBAKCC,GAC+C,EAC/C,OACE,QAAC/D,EAAD,WACG+D,IACC,QAACC,EAAD,UAAyBD,IAE1BH,IACC,QAACK,EAAD,WACE,QAAC,KAAD,CAAQC,QAASN,EAAjB,UAA0BhE,EAAAA,EAAAA,GAAE,aAGhC,QAAC,KAAD,CAAWuE,IAAK,EAAhB,WACE,QAAC,KAAD,CAAQD,QAASjE,EAAjB,UAA8BL,EAAAA,EAAAA,GAAE,aAChC,QAAC,KAAD,CACEwE,SAAS,UACTC,WACqBjD,IAAnBlB,EAAMmB,UACDiD,EAAAA,EAAAA,IAAQrD,EAAMK,cAEbF,GADAxB,EAAAA,EAAAA,GAAE,sCAEJkE,EAENI,QAASL,GAAU,KAAO1B,EAAaE,IACvCkC,cACqBnD,IAAnBlB,EAAMmB,WACDiD,EAAAA,EAAAA,IAAQrD,EAAMK,UACfgD,EAAAA,EAAAA,IAAQR,GAbhB,SAgBGD,GAASjE,EAAAA,EAAAA,GAAE,QAAU6B,GAAgB7B,EAAAA,EAAAA,GAAE,WAAYA,EAAAA,EAAAA,GAAE,0BA5B9D,GAkCF,CAACI,EAAQyB,EAAexB,EAAYkC,EAAclB,EAAOf,EAAMmB,WAG3DmD,GAAYpC,EAAAA,EAAAA,cAChB,IAG+C,IAF7Cf,SAAUoD,EADX,sBAECC,GAAwB,GACqB,EAC7C,OACE,QAAC3E,EAAD,WACG0E,EACAzD,GAAgB0D,IACf,QAAC,IAAD,CAAOC,KAAK,OAAZ,UACGC,EAAAA,EAAAA,IACC,mKACA,CACEC,eAAe,QAAC,IAAD,CAAcC,KAAK,qCAR9C,GAgBF,CAAC/E,EAAMiB,IAST,QAAuBI,IAAnBlB,EAAMmB,SAAwB,CAChC,MAAM+B,EAAgBlD,EAAMkD,eAAiBzD,EAE7C,OACE,QAAC,EAAAoF,SAAD,YACE,QAACvB,EAAD,WAAc5D,EAAAA,EAAAA,GAAE,sBAChB,QAAC4E,EAAD,YACE,QAAC,IAAD,CACEQ,OAAOpF,EAAAA,EAAAA,GAAE,oBACTqF,KAAK,UACLC,QAAQ,EACRC,QAAS/B,EAAcgC,KAAI,CAACC,EAAcC,KAAf,CACzBC,MAAOD,EACPN,MAAOK,MAETG,aAAa5F,EAAAA,EAAAA,GAAE,2BACf2F,MAAOtE,EAAMK,QACbmE,SAAUF,GAASrE,EAAS,IAAID,EAAOK,QAASiE,IAChDG,0BAAwB,EACxBC,SAAO,EACPC,UAAQ,KAEV,QAAC,IAAD,CACEZ,OAAOpF,EAAAA,EAAAA,GAAE,uBACTsF,QAAQ,EACRU,UAAU,EACVF,0BAAwB,EACxBC,SAAO,EALT,UAOE,QAAC,IAAD,CACEV,KAAK,sBACLM,MAAOtE,EAAMM,eACbsE,KAAM,EACNC,UAAQ,EACRN,aAAa5F,EAAAA,EAAAA,GAAE,wBACf6F,SAAUM,GACR7E,EAAS,IACJD,EACHM,eAAgBwE,EAAMC,OAAOT,gBAMvC,QAAC5B,EAAD,CAAaI,gBAAiB7D,GAAO6D,oBAG1C,CAED,OACE,QAAC,EAAAgB,SAAD,UACG7E,EAAMmB,SAAS,CACdvB,OAAQ0D,EACRzD,KAAMyE,EACNxE,OAAQ2D,EACRsC,cA7DN,SAAkDC,EAAcX,GAC9D,MAAMY,EAAWC,IAAUnF,GAC3BkF,EAASD,GAASX,EAClBrE,EAASiF,EACV,EA0DKlF,WAIP,CA9NepB,EAAAA,YAAAA,gBAgOT,MAAMwG,EAAW,CAAH,oDAKfpC,GAAoB,OAAO,MAAP,qBAAH,iBACLqC,EAAAA,EAAAA,GAAM,GADD,gBAKjBtC,GAAyB,OAAO,MAAP,qBAAH,mD,iCCtSrB,SAASuC,EAAT,GAGqB,IAHoB,YAC9CC,EAAc,CAAC,KACZtG,GACuB,EAS1B,OACE,QAAC,KAAD,IAAYsG,EAAaC,MAAM,QAAC,KAAD,IAAmBvC,QATpD,SAAqBwC,IACnBC,EAAAA,EAAAA,YAAUC,IAAc,QAAC/G,EAAD,IAAmB+G,KAAgB1G,KAAW,CACpEmG,SAAQA,IAGVG,EAAYtC,UAAUwC,EACvB,EAGC,UACG9G,EAAAA,EAAAA,GAAE,kBAGR,CAjBe2G,EAAAA,YAAAA,iB,sGCZT,SAAS5F,IAEd,OADckG,EAAAA,EAAAA,KACDnG,QACd,C","sources":["webpack:///./app/components/featureFeedback/feedbackModal.tsx","webpack:///./app/components/featureFeedback/index.tsx","webpack:///./app/utils/useLocation.tsx"],"sourcesContent":["import React, {Fragment, useCallback, useMemo, useState} from 'react';\nimport {css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {\n  BrowserClient,\n  defaultIntegrations,\n  defaultStackParser,\n  makeFetchTransport,\n} from '@sentry/react';\nimport {Event} from '@sentry/types';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Textarea from 'sentry/components/forms/controls/textarea';\nimport Field from 'sentry/components/forms/field';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport {Data} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport OrganizationStore from 'sentry/stores/organizationStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useProjects from 'sentry/utils/useProjects';\n\nconst feedbackClient = new BrowserClient({\n  // feedback project under Sentry organization\n  dsn: 'https://3c5ef4e344a04a0694d187a1272e96de@o1.ingest.sentry.io/6356259',\n  transport: makeFetchTransport,\n  stackParser: defaultStackParser,\n  integrations: defaultIntegrations,\n});\n\nconst defaultFeedbackTypes = [\n  t(\"I don't like this feature\"),\n  t('I like this feature'),\n  t('Other reason'),\n];\n\nexport type ChildrenProps<T> = {\n  Body: (props: {\n    children: React.ReactNode;\n    showSelfHostedMessage?: boolean;\n  }) => ReturnType<ModalRenderProps['Body']>;\n  Footer: (props: {\n    onBack?: () => void;\n    onNext?: () => void;\n    primaryDisabledReason?: string;\n    secondaryAction?: React.ReactNode;\n    submitEventData?: Event;\n  }) => ReturnType<ModalRenderProps['Footer']>;\n  Header: (props: {children: React.ReactNode}) => ReturnType<ModalRenderProps['Header']>;\n  onFieldChange: <Field extends keyof T>(field: Field, value: T[Field]) => void;\n  state: T;\n};\n\ntype CustomFeedbackModal<T> = {\n  children: (props: ChildrenProps<T>) => React.ReactNode;\n  featureName: string;\n  initialData: T;\n};\n\ntype DefaultFeedbackModal = {\n  featureName: string;\n  children?: undefined;\n  feedbackTypes?: string[];\n  secondaryAction?: React.ReactNode;\n};\n\nexport type FeedbackModalProps<T extends Data> =\n  | DefaultFeedbackModal\n  | CustomFeedbackModal<T>;\n\nexport function FeedbackModal<T extends Data>({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  ...props\n}: FeedbackModalProps<T> & ModalRenderProps) {\n  const {organization} = useLegacyStore(OrganizationStore);\n  const {projects, initiallyLoaded: projectsLoaded} = useProjects();\n  const location = useLocation();\n  const theme = useTheme();\n  const user = ConfigStore.get('user');\n  const isSelfHosted = ConfigStore.get('isSelfHosted');\n  const [state, setState] = useState<T>(\n    props.children === undefined\n      ? ({subject: undefined, additionalInfo: undefined} as unknown as T)\n      : props.initialData\n  );\n  const isScreenSmall = useMedia(`(max-width: ${theme.breakpoints.small})`);\n\n  const project = useMemo(() => {\n    if (projectsLoaded && location.query.project) {\n      return projects.find(p => p.id === location.query.project);\n    }\n    return undefined;\n  }, [projectsLoaded, projects, location.query.project]);\n\n  const handleSubmit = useCallback(\n    (submitEventData?: Event) => {\n      const commonEventProps: Event = {\n        message: `Feedback: ${props.featureName} feature`,\n        request: {\n          url: location.pathname,\n        },\n        extra: {\n          orgFeatures: organization?.features ?? [],\n          orgAccess: organization?.access ?? [],\n          projectFeatures: project?.features ?? [],\n        },\n        tags: {\n          featureName: props.featureName,\n        },\n        user,\n        level: 'info',\n      };\n\n      if (props.children === undefined) {\n        const feedbackTypes = props.feedbackTypes ?? defaultFeedbackTypes;\n        feedbackClient.captureEvent({\n          ...commonEventProps,\n          message: state.additionalInfo?.trim()\n            ? `Feedback: ${feedbackTypes[state.subject]} - ${state.additionalInfo}`\n            : `Feedback: ${feedbackTypes[state.subject]}`,\n        });\n      } else {\n        feedbackClient.captureEvent({\n          ...commonEventProps,\n          ...(submitEventData ?? {}),\n        });\n      }\n\n      addSuccessMessage(t('Thanks for taking the time to provide us feedback!'));\n      closeModal();\n    },\n    [\n      location.pathname,\n      closeModal,\n      organization?.features,\n      organization?.access,\n      project?.features,\n      user,\n      props,\n      state,\n    ]\n  );\n\n  const ModalHeader = useCallback(\n    ({children: headerChildren}: {children: React.ReactNode}) => {\n      return (\n        <Header closeButton>\n          <h3>{headerChildren}</h3>\n        </Header>\n      );\n    },\n    [Header]\n  );\n\n  const ModalFooter = useCallback(\n    ({\n      onBack,\n      onNext,\n      submitEventData,\n      primaryDisabledReason,\n      secondaryAction,\n    }: Parameters<ChildrenProps<T>['Footer']>[0]) => {\n      return (\n        <Footer>\n          {secondaryAction && (\n            <SecondaryActionWrapper>{secondaryAction}</SecondaryActionWrapper>\n          )}\n          {onBack && (\n            <BackButtonWrapper>\n              <Button onClick={onBack}>{t('Back')}</Button>\n            </BackButtonWrapper>\n          )}\n          <ButtonBar gap={1}>\n            <Button onClick={closeModal}>{t('Cancel')}</Button>\n            <Button\n              priority=\"primary\"\n              title={\n                props.children === undefined\n                  ? !defined(state.subject)\n                    ? t('Required fields must be filled out')\n                    : undefined\n                  : primaryDisabledReason\n              }\n              onClick={onNext ?? (() => handleSubmit(submitEventData))}\n              disabled={\n                props.children === undefined\n                  ? !defined(state.subject)\n                  : defined(primaryDisabledReason)\n              }\n            >\n              {onNext ? t('Next') : isScreenSmall ? t('Submit') : t('Submit Feedback')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      );\n    },\n    [Footer, isScreenSmall, closeModal, handleSubmit, state, props.children]\n  );\n\n  const ModalBody = useCallback(\n    ({\n      children: bodyChildren,\n      showSelfHostedMessage = true,\n    }: Parameters<ChildrenProps<T>['Body']>[0]) => {\n      return (\n        <Body>\n          {bodyChildren}\n          {isSelfHosted && showSelfHostedMessage && (\n            <Alert type=\"info\">\n              {tct(\n                \"You agree that any feedback you submit is subject to Sentry's [privacyPolicy:Privacy Policy] and Sentry may use such feedback without restriction or obligation.\",\n                {\n                  privacyPolicy: <ExternalLink href=\"https://sentry.io/privacy/\" />,\n                }\n              )}\n            </Alert>\n          )}\n        </Body>\n      );\n    },\n    [Body, isSelfHosted]\n  );\n\n  function handleFieldChange<Field extends keyof T>(field: Field, value: T[Field]) {\n    const newState = cloneDeep(state);\n    newState[field] = value;\n    setState(newState);\n  }\n\n  if (props.children === undefined) {\n    const feedbackTypes = props.feedbackTypes ?? defaultFeedbackTypes;\n\n    return (\n      <Fragment>\n        <ModalHeader>{t('Submit Feedback')}</ModalHeader>\n        <ModalBody>\n          <SelectField\n            label={t('Type of feedback')}\n            name=\"subject\"\n            inline={false}\n            options={feedbackTypes.map((feedbackType, index) => ({\n              value: index,\n              label: feedbackType,\n            }))}\n            placeholder={t('Select type of feedback')}\n            value={state.subject}\n            onChange={value => setState({...state, subject: value})}\n            flexibleControlStateSize\n            stacked\n            required\n          />\n          <Field\n            label={t('Additional feedback')}\n            inline={false}\n            required={false}\n            flexibleControlStateSize\n            stacked\n          >\n            <Textarea\n              name=\"additional-feedback\"\n              value={state.additionalInfo}\n              rows={5}\n              autosize\n              placeholder={t('What did you expect?')}\n              onChange={event =>\n                setState({\n                  ...state,\n                  additionalInfo: event.target.value,\n                })\n              }\n            />\n          </Field>\n        </ModalBody>\n        <ModalFooter secondaryAction={props?.secondaryAction} />\n      </Fragment>\n    );\n  }\n\n  return (\n    <Fragment>\n      {props.children({\n        Header: ModalHeader,\n        Body: ModalBody,\n        Footer: ModalFooter,\n        onFieldChange: handleFieldChange,\n        state,\n      })}\n    </Fragment>\n  );\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 680px;\n`;\n\nconst BackButtonWrapper = styled('div')`\n  margin-right: ${space(1)};\n  width: 100%;\n`;\n\nconst SecondaryActionWrapper = styled('div')`\n  flex: 1;\n  align-self: center;\n`;\n","import React from 'react';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport {\n  FeedbackModal,\n  FeedbackModalProps,\n  modalCss,\n} from 'sentry/components/featureFeedback/feedbackModal';\nimport {Data} from 'sentry/components/forms/types';\nimport {IconMegaphone} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\nexport type FeatureFeedbackProps<T extends Data> = FeedbackModalProps<T> & {\n  buttonProps?: Partial<ButtonProps>;\n  secondaryAction?: React.ReactNode;\n};\n\n// Provides a button that, when clicked, opens a modal with a form that,\n// when filled and submitted, will send feedback to Sentry (feedbacks project).\nexport function FeatureFeedback<T extends Data>({\n  buttonProps = {},\n  ...props\n}: FeatureFeedbackProps<T>) {\n  function handleClick(e: React.MouseEvent) {\n    openModal(modalProps => <FeedbackModal {...modalProps} {...props} />, {\n      modalCss,\n    });\n\n    buttonProps.onClick?.(e);\n  }\n\n  return (\n    <Button {...buttonProps} icon={<IconMegaphone />} onClick={handleClick}>\n      {t('Give Feedback')}\n    </Button>\n  );\n}\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\ntype DefaultQuery<T = string> = {\n  [key: string]: T | T[] | null | undefined;\n};\n\nexport function useLocation<Q extends Query = DefaultQuery>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n"],"names":["feedbackClient","BrowserClient","dsn","transport","makeFetchTransport","stackParser","defaultStackParser","integrations","defaultIntegrations","defaultFeedbackTypes","t","FeedbackModal","Header","Body","Footer","closeModal","props","organization","useLegacyStore","OrganizationStore","projects","initiallyLoaded","projectsLoaded","useProjects","location","useLocation","theme","useTheme","user","ConfigStore","isSelfHosted","state","setState","useState","undefined","children","subject","additionalInfo","initialData","isScreenSmall","useMedia","breakpoints","small","project","useMemo","query","find","p","id","handleSubmit","useCallback","submitEventData","commonEventProps","message","featureName","request","url","pathname","extra","orgFeatures","features","orgAccess","access","projectFeatures","tags","level","feedbackTypes","captureEvent","trim","addSuccessMessage","ModalHeader","headerChildren","closeButton","ModalFooter","onBack","onNext","primaryDisabledReason","secondaryAction","SecondaryActionWrapper","BackButtonWrapper","onClick","gap","priority","title","defined","disabled","ModalBody","bodyChildren","showSelfHostedMessage","type","tct","privacyPolicy","href","Fragment","label","name","inline","options","map","feedbackType","index","value","placeholder","onChange","flexibleControlStateSize","stacked","required","rows","autosize","event","target","onFieldChange","field","newState","cloneDeep","modalCss","space","FeatureFeedback","buttonProps","icon","e","openModal","modalProps","useRouteContext"],"sourceRoot":""}