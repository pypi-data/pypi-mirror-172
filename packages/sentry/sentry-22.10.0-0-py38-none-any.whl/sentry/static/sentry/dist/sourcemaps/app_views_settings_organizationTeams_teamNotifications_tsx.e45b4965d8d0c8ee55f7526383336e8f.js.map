{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamNotifications_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/teamNotifications.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconDelete} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {ExternalTeam, Integration, Organization, Team} from 'sentry/types';\nimport {toTitleCase} from 'sentry/utils';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype Props = RouteComponentProps<{orgId: string; teamId: string}, {}> & {\n  organization: Organization;\n  team: Team;\n};\n\ntype State = AsyncView['state'] & {\n  integrations: Integration[];\n  teamDetails: Team;\n};\n\nconst DOCS_LINK =\n  'https://docs.sentry.io/product/integrations/notification-incidents/slack/#team-notifications';\nconst NOTIFICATION_PROVIDERS = ['slack'];\n\nclass TeamNotificationSettings extends AsyncView<Props, State> {\n  getTitle() {\n    return 'Team Notification Settings';\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, team} = this.props;\n    return [\n      [\n        'teamDetails',\n        `/teams/${organization.slug}/${team.slug}/`,\n        {query: {expand: ['externalTeams']}},\n      ],\n      [\n        'integrations',\n        `/organizations/${organization.slug}/integrations/`,\n        {query: {includeConfig: 0}},\n      ],\n    ];\n  }\n\n  handleDelete = async (mapping: ExternalTeam) => {\n    try {\n      const {organization, team} = this.props;\n      const endpoint = `/teams/${organization.slug}/${team.slug}/external-teams/${mapping.id}/`;\n      await this.api.requestPromise(endpoint, {\n        method: 'DELETE',\n      });\n      addSuccessMessage(t('Deletion successful'));\n      this.fetchData();\n    } catch {\n      addErrorMessage(t('An error occurred'));\n    }\n  };\n\n  renderBody() {\n    return (\n      <Panel>\n        <PanelHeader>{t('Notifications')}</PanelHeader>\n        <PanelBody>{this.renderPanelBody()}</PanelBody>\n      </Panel>\n    );\n  }\n\n  renderPanelBody() {\n    const {organization} = this.props;\n    const {teamDetails, integrations} = this.state;\n\n    const notificationIntegrations = integrations.filter(integration =>\n      NOTIFICATION_PROVIDERS.includes(integration.provider.key)\n    );\n    if (!notificationIntegrations.length) {\n      return (\n        <EmptyMessage>\n          {t('No Notification Integrations have been installed yet.')}\n        </EmptyMessage>\n      );\n    }\n\n    const externalTeams = (teamDetails.externalTeams || []).filter(externalTeam =>\n      NOTIFICATION_PROVIDERS.includes(externalTeam.provider)\n    );\n\n    if (!externalTeams.length) {\n      return (\n        <EmptyMessage>\n          <div>{t('No teams have been linked yet.')}</div>\n          <NotDisabledSubText>\n            {tct('Head over to Slack and type [code] to get started. [link].', {\n              code: <code>/sentry link team</code>,\n              link: <ExternalLink href={DOCS_LINK}>{t('Learn more')}</ExternalLink>,\n            })}\n          </NotDisabledSubText>\n        </EmptyMessage>\n      );\n    }\n\n    const integrationsById = Object.fromEntries(\n      notificationIntegrations.map(integration => [integration.id, integration])\n    );\n\n    const access = new Set(organization.access);\n    const hasAccess = access.has('team:write');\n\n    return externalTeams.map(externalTeam => (\n      <FormFieldWrapper key={externalTeam.id}>\n        <StyledFormField\n          disabled\n          label={\n            <div>\n              <NotDisabledText>\n                {toTitleCase(externalTeam.provider)}:\n                {integrationsById[externalTeam.integrationId].name}\n              </NotDisabledText>\n              <NotDisabledSubText>\n                {tct('Unlink this channel in Slack with [code]. [link].', {\n                  code: <code>/sentry unlink team</code>,\n                  link: <ExternalLink href={DOCS_LINK}>{t('Learn more')}</ExternalLink>,\n                })}\n              </NotDisabledSubText>\n            </div>\n          }\n          name=\"externalName\"\n          value={externalTeam.externalName}\n        />\n        <DeleteButtonWrapper>\n          <Tooltip\n            title={t(\n              'You must be an organization owner, manager or admin to remove a Slack team link'\n            )}\n            disabled={hasAccess}\n          >\n            <Confirm\n              disabled={!hasAccess}\n              onConfirm={() => this.handleDelete(externalTeam)}\n              message={t('Are you sure you want to remove this Slack team link?')}\n            >\n              <Button\n                size=\"sm\"\n                icon={<IconDelete size=\"md\" />}\n                aria-label={t('delete')}\n                disabled={!hasAccess}\n              />\n            </Confirm>\n          </Tooltip>\n        </DeleteButtonWrapper>\n      </FormFieldWrapper>\n    ));\n  }\n}\nexport default withOrganization(TeamNotificationSettings);\n\nconst NotDisabledText = styled('div')`\n  color: ${p => p.theme.textColor};\n  line-height: ${space(2)};\n`;\nconst NotDisabledSubText = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  line-height: 1.4;\n  margin-top: ${space(1)};\n`;\nconst FormFieldWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst StyledFormField = styled(TextField)`\n  flex: 1;\n`;\nconst DeleteButtonWrapper = styled('div')`\n  margin-right: ${space(4)};\n  padding-right: ${space(0.5)};\n`;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","DOCS_LINK","NOTIFICATION_PROVIDERS","TeamNotificationSettings","async","organization","team","props","endpoint","slug","mapping","id","api","requestPromise","method","addSuccessMessage","t","fetchData","addErrorMessage","getEndpoints","query","expand","includeConfig","renderBody","renderPanelBody","teamDetails","integrations","state","notificationIntegrations","filter","integration","includes","provider","key","length","externalTeams","externalTeam","NotDisabledSubText","tct","code","link","href","integrationsById","Object","fromEntries","map","hasAccess","Set","access","has","FormFieldWrapper","StyledFormField","disabled","label","NotDisabledText","toTitleCase","integrationId","name","value","externalName","DeleteButtonWrapper","onConfirm","handleDelete","message","size","icon","withOrganization","p","theme","textColor","space","subText","fontSizeRelativeSmall","TextField"],"sourceRoot":""}