{"version":3,"file":"chunks/app_utils_replays_fetchReplayList_tsx-app_views_replays_replayTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/replays/fetchReplayList.tsx","webpack:///./app/utils/useLocation.tsx","webpack:///./app/components/replays/replayHighlight.tsx","webpack:///./app/views/replays/replayTable.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport {mapResponseToReplayRecord} from 'sentry/utils/replays/replayDataUtils';\nimport type RequestError from 'sentry/utils/requestError/requestError';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\nexport const DEFAULT_SORT = '-startedAt';\n\nexport const REPLAY_LIST_FIELDS = [\n  'countErrors',\n  'duration',\n  'finishedAt',\n  'id',\n  'projectId',\n  'startedAt',\n  'urls',\n  'user',\n];\n\ntype State = {\n  fetchError: undefined | RequestError;\n  isFetching: boolean;\n  pageLinks: null | string;\n  replays: undefined | ReplayListRecord[];\n};\n\ntype Result = State;\n\nasync function fetchReplayList({\n  api,\n  organization,\n  location,\n  eventView,\n}): Promise<Result> {\n  try {\n    const path = `/organizations/${organization.slug}/replays/`;\n\n    const [{data: records}, _textStatus, resp] = await api.requestPromise(path, {\n      includeAllArgs: true,\n      query: {\n        ...eventView.getEventsAPIPayload(location),\n        cursor: location.query.cursor,\n      },\n    });\n\n    const pageLinks = resp?.getResponseHeader('Link') ?? '';\n\n    return {\n      fetchError: undefined,\n      isFetching: false,\n      pageLinks,\n      replays: records.map(mapResponseToReplayRecord),\n    };\n  } catch (error) {\n    if (error.responseJSON?.detail) {\n      return {\n        fetchError: error.responseJSON.detail,\n        isFetching: false,\n        pageLinks: null,\n        replays: [],\n      };\n    }\n    Sentry.captureException(error);\n    return {\n      fetchError: error,\n      isFetching: false,\n      pageLinks: null,\n      replays: [],\n    };\n  }\n}\n\nexport default fetchReplayList;\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\ntype DefaultQuery<T = string> = {\n  [key: string]: T | T[] | null | undefined;\n};\n\nexport function useLocation<Q extends Query = DefaultQuery>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n","import ScoreBar from 'sentry/components/scoreBar';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\ninterface Props {\n  replay: undefined | Pick<ReplayListRecord, 'countErrors' | 'duration' | 'urls'>;\n}\n\nconst palette = new Array(10).fill([CHART_PALETTE[0][0]]);\n\nfunction ReplayHighlight({replay}: Props) {\n  let score = 1;\n\n  if (replay) {\n    const {countErrors, duration, urls} = replay;\n    const pagesVisited = urls.length;\n\n    const pagesVisitedOverTime = pagesVisited / (duration || 1);\n\n    score = (countErrors * 25 + pagesVisited * 5 + pagesVisitedOverTime) / 10;\n    // negatively score sub 5 second replays\n    if (duration <= 5) {\n      score = score - 10 / (duration || 1);\n    }\n\n    score = Math.floor(Math.min(10, Math.max(1, score)));\n  }\n\n  return <ScoreBar size={20} score={score} palette={palette} radius={0} />;\n}\n\nexport default ReplayHighlight;\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Duration from 'sentry/components/duration';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport {PanelTable} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport ReplayHighlight from 'sentry/components/replays/replayHighlight';\nimport {StringWalker} from 'sentry/components/replays/walker/urlWalker';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconArrow, IconCalendar} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport {spanOperationRelativeBreakdownRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport type {ReplayListRecordWithTx} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysFromTransaction';\nimport type {ReplayListLocationQuery, ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  isFetching: boolean;\n  replays: undefined | ReplayListRecord[] | ReplayListRecordWithTx[];\n  showProjectColumn: boolean;\n  sort: Sort;\n  fetchError?: Error;\n  showSlowestTxColumn?: boolean;\n};\n\ntype TableProps = {\n  showProjectColumn: boolean;\n  showSlowestTxColumn: boolean;\n};\n\ntype RowProps = {\n  minWidthIsSmall: boolean;\n  organization: Organization;\n  referrer: string;\n  replay: ReplayListRecord | ReplayListRecordWithTx;\n  showProjectColumn: boolean;\n  showSlowestTxColumn: boolean;\n};\n\nfunction SortableHeader({\n  fieldName,\n  label,\n  sort,\n}: {\n  fieldName: string;\n  label: string;\n  sort: Sort;\n}) {\n  const location = useLocation<ReplayListLocationQuery>();\n\n  const arrowDirection = sort.kind === 'asc' ? 'up' : 'down';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <SortLink\n      role=\"columnheader\"\n      aria-sort={\n        sort.field.endsWith(fieldName)\n          ? sort.kind === 'asc'\n            ? 'ascending'\n            : 'descending'\n          : 'none'\n      }\n      to={{\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          sort: sort.kind === 'desc' ? fieldName : '-' + fieldName,\n        },\n      }}\n    >\n      {label} {sort.field === fieldName && sortArrow}\n    </SortLink>\n  );\n}\n\nfunction ReplayTable({\n  isFetching,\n  replays,\n  showProjectColumn,\n  sort,\n  fetchError,\n  showSlowestTxColumn = false,\n}: Props) {\n  const routes = useRoutes();\n  const referrer = encodeURIComponent(getRouteStringFromRoutes(routes));\n\n  const organization = useOrganization();\n  const theme = useTheme();\n  const minWidthIsSmall = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const tableHeaders = [\n    t('Session'),\n    showProjectColumn && minWidthIsSmall && (\n      <SortableHeader\n        key=\"projectId\"\n        sort={sort}\n        fieldName=\"projectId\"\n        label={t('Project')}\n      />\n    ),\n    showSlowestTxColumn && minWidthIsSmall && (\n      <Header key=\"slowestTransaction\">\n        {t('Slowest Transaction')}\n        <QuestionTooltip\n          size=\"xs\"\n          position=\"top\"\n          title={t(\n            'The duration of the slowest transaction operation that was recorded during the replay session.'\n          )}\n        />\n      </Header>\n    ),\n    minWidthIsSmall && (\n      <SortableHeader\n        key=\"startedAt\"\n        sort={sort}\n        fieldName=\"startedAt\"\n        label={t('Start Time')}\n      />\n    ),\n    <SortableHeader\n      key=\"duration\"\n      sort={sort}\n      fieldName=\"duration\"\n      label={t('Duration')}\n    />,\n    <SortableHeader\n      key=\"countErrors\"\n      sort={sort}\n      fieldName=\"countErrors\"\n      label={t('Errors')}\n    />,\n    <Header key=\"activity\">\n      {t('Activity')}{' '}\n      <QuestionTooltip\n        size=\"xs\"\n        position=\"top\"\n        title={t(\n          'Activity represents how much user activity happened in a replay. It is determined by the number of errors encountered, duration, and UI events.'\n        )}\n      />\n    </Header>,\n  ].filter(Boolean);\n\n  if (fetchError && !isFetching) {\n    return (\n      <StyledPanelTable\n        headers={tableHeaders}\n        showProjectColumn={showProjectColumn}\n        isLoading={false}\n        showSlowestTxColumn={showSlowestTxColumn}\n      >\n        <StyledAlert type=\"error\" showIcon>\n          {typeof fetchError === 'string'\n            ? fetchError\n            : t(\n                'Sorry, the list of replays could not be loaded. This could be due to invalid search parameters or an internal systems error.'\n              )}\n        </StyledAlert>\n      </StyledPanelTable>\n    );\n  }\n\n  return (\n    <StyledPanelTable\n      isLoading={isFetching}\n      isEmpty={replays?.length === 0}\n      showProjectColumn={showProjectColumn}\n      showSlowestTxColumn={showSlowestTxColumn}\n      headers={tableHeaders}\n    >\n      {replays?.map(replay => (\n        <ReplayTableRow\n          key={replay.id}\n          minWidthIsSmall={minWidthIsSmall}\n          organization={organization}\n          referrer={referrer}\n          replay={replay}\n          showProjectColumn={showProjectColumn}\n          showSlowestTxColumn={showSlowestTxColumn}\n        />\n      ))}\n    </StyledPanelTable>\n  );\n}\n\nfunction ReplayTableRow({\n  minWidthIsSmall,\n  organization,\n  referrer,\n  replay,\n  showProjectColumn,\n  showSlowestTxColumn,\n}: RowProps) {\n  const location = useLocation();\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === replay.projectId);\n  const hasTxEvent = 'txEvent' in replay;\n  const txDuration = hasTxEvent ? replay.txEvent?.['transaction.duration'] : undefined;\n\n  return (\n    <Fragment>\n      <UserBadge\n        avatarSize={32}\n        displayName={\n          <Link\n            to={`/organizations/${organization.slug}/replays/${project?.slug}:${replay.id}/?referrer=${referrer}`}\n          >\n            {replay.user.displayName || ''}\n          </Link>\n        }\n        user={{\n          username: replay.user.displayName || '',\n          email: replay.user.email || '',\n          id: replay.user.id || '',\n          ip_address: replay.user.ip_address || '',\n          name: replay.user.name || '',\n        }}\n        // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n        displayEmail={<StringWalker urls={replay.urls} />}\n      />\n      {showProjectColumn && minWidthIsSmall && (\n        <Item>{project ? <ProjectBadge project={project} avatarSize={16} /> : null}</Item>\n      )}\n      {minWidthIsSmall && showSlowestTxColumn && (\n        <Item>\n          {hasTxEvent ? (\n            <SpanOperationBreakdown>\n              {txDuration ? <TxDuration>{txDuration}ms</TxDuration> : null}\n              {spanOperationRelativeBreakdownRenderer(replay.txEvent, {\n                organization,\n                location,\n              })}\n            </SpanOperationBreakdown>\n          ) : null}\n        </Item>\n      )}\n      {minWidthIsSmall && (\n        <Item>\n          <TimeSinceWrapper>\n            {minWidthIsSmall && <StyledIconCalendarWrapper color=\"gray500\" size=\"sm\" />}\n            <TimeSince date={replay.startedAt} />\n          </TimeSinceWrapper>\n        </Item>\n      )}\n      <Item>\n        <Duration seconds={Math.floor(replay.duration)} exact abbreviation />\n      </Item>\n      <Item data-test-id=\"replay-table-count-errors\">{replay.countErrors || 0}</Item>\n      <Item>\n        <ReplayHighlight replay={replay} />\n      </Item>\n    </Fragment>\n  );\n}\n\nfunction getColCount(props: TableProps) {\n  let colCount = 4;\n  if (props.showSlowestTxColumn) {\n    colCount += 1;\n  }\n  if (props.showProjectColumn) {\n    colCount += 1;\n  }\n  return colCount;\n}\n\nconst StyledPanelTable = styled(PanelTable)<TableProps>`\n  ${p => `grid-template-columns: minmax(0, 1fr) repeat(${getColCount(p)}, max-content);`}\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr) repeat(3, min-content);\n  }\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nconst Item = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst SpanOperationBreakdown = styled('div')`\n  width: 100%;\n  text-align: right;\n`;\n\nconst TxDuration = styled('div')`\n  color: ${p => p.theme.gray500};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(0.5)};\n`;\n\nconst TimeSinceWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(auto, max-content));\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst StyledIconCalendarWrapper = styled(IconCalendar)`\n  position: relative;\n  top: -1px;\n`;\n\nconst StyledAlert = styled(Alert)`\n  border-radius: 0;\n  border-width: 1px 0 0 0;\n  grid-column: 1/-1;\n  margin-bottom: 0;\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, max-content);\n  gap: ${space(0.5)};\n  align-items: center;\n`;\n\nexport default ReplayTable;\n"],"names":["DEFAULT_SORT","REPLAY_LIST_FIELDS","async","api","organization","location","eventView","path","slug","data","records","_textStatus","resp","requestPromise","includeAllArgs","query","getEventsAPIPayload","cursor","fetchError","undefined","isFetching","pageLinks","getResponseHeader","replays","map","mapResponseToReplayRecord","error","responseJSON","detail","Sentry","useLocation","useRouteContext","palette","Array","fill","CHART_PALETTE","ReplayHighlight","replay","score","countErrors","duration","urls","pagesVisited","length","Math","floor","min","max","size","radius","SortableHeader","fieldName","label","sort","arrowDirection","kind","sortArrow","color","direction","SortLink","role","field","endsWith","to","pathname","ReplayTable","showProjectColumn","showSlowestTxColumn","routes","useRoutes","referrer","encodeURIComponent","getRouteStringFromRoutes","useOrganization","theme","useTheme","minWidthIsSmall","useMedia","breakpoints","small","tableHeaders","t","Header","position","title","filter","Boolean","StyledPanelTable","headers","isLoading","StyledAlert","type","showIcon","isEmpty","ReplayTableRow","id","projects","useProjects","project","find","p","projectId","hasTxEvent","txDuration","txEvent","Fragment","avatarSize","displayName","user","username","email","ip_address","name","displayEmail","Item","SpanOperationBreakdown","TxDuration","spanOperationRelativeBreakdownRenderer","TimeSinceWrapper","StyledIconCalendarWrapper","date","startedAt","seconds","exact","abbreviation","PanelTable","props","colCount","getColCount","Link","gray500","fontSizeMedium","space","IconCalendar","Alert"],"sourceRoot":""}