{"version":3,"file":"chunks/app_views_settings_organizationProjects_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsProjectItem.tsx","webpack:///./app/views/settings/organizationProjects/projectStatsGraph.tsx","webpack:///./app/views/settings/organizationProjects/index.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport BookmarkStar from 'sentry/components/projects/bookmarkStar';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction ProjectItem({project, organization}: Props) {\n  const [isBookmarked, setBookmarked] = useState(project.isBookmarked);\n\n  return (\n    <Wrapper>\n      <BookmarkStar\n        organization={organization}\n        project={project}\n        isBookmarked={isBookmarked}\n        onToggle={state => setBookmarked(state)}\n      />\n      <ProjectBadge\n        to={`/settings/${organization.slug}/projects/${project.slug}/`}\n        avatarSize={18}\n        project={project}\n      />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  align-items: center;\n  gap: ${space(1.5)};\n`;\n\nexport default ProjectItem;\n","import {Fragment} from 'react';\nimport LazyLoad from 'react-lazyload';\n\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\n\ntype Props = {\n  project: Project;\n  stats?: Project['stats'];\n};\n\nconst ProjectStatsGraph = ({project, stats}: Props) => {\n  stats = stats || project.stats || [];\n  const series: Series[] = [\n    {\n      seriesName: t('Events'),\n      data: stats.map(point => ({name: point[0] * 1000, value: point[1]})),\n    },\n  ];\n\n  return (\n    <Fragment>\n      {series && (\n        <LazyLoad height={25} debounce={50}>\n          <MiniBarChart isGroupedByDate showTimeInTooltip series={series} height={25} />\n        </LazyLoad>\n      )}\n    </Fragment>\n  );\n};\n\nexport default ProjectStatsGraph;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {sortProjects} from 'sentry/utils';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ProjectListItem from 'sentry/views/settings/components/settingsProjectItem';\n\nimport ProjectStatsGraph from './projectStatsGraph';\n\nconst ITEMS_PER_PAGE = 50;\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype ProjectStats = Record<string, Required<Project['stats']>>;\n\ntype State = AsyncView['state'] & {\n  projectList: Project[] | null;\n  projectListPageLinks: string | null;\n  projectStats: ProjectStats | null;\n};\n\nclass OrganizationProjects extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n    const {location} = this.props;\n    const query = decodeScalar(location.query.query);\n    return [\n      [\n        'projectList',\n        `/organizations/${orgId}/projects/`,\n        {\n          query: {\n            query,\n            per_page: ITEMS_PER_PAGE,\n          },\n        },\n      ],\n      [\n        'projectStats',\n        `/organizations/${orgId}/stats/`,\n        {\n          query: {\n            since: new Date().getTime() / 1000 - 3600 * 24,\n            stat: 'generated',\n            group: 'project',\n            per_page: ITEMS_PER_PAGE,\n          },\n        },\n      ],\n    ];\n  }\n\n  getTitle(): string {\n    const {organization} = this.props;\n    return routeTitleGen(t('Projects'), organization.slug, false);\n  }\n\n  renderLoading(): React.ReactNode {\n    return this.renderBody();\n  }\n\n  renderBody(): React.ReactNode {\n    const {projectList, projectListPageLinks, projectStats} = this.state;\n    const {organization} = this.props;\n    const canCreateProjects = new Set(organization.access).has('project:admin');\n\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"sm\"\n        disabled={!canCreateProjects}\n        title={\n          !canCreateProjects\n            ? t('You do not have permission to create projects')\n            : undefined\n        }\n        to={`/organizations/${organization.slug}/projects/new/`}\n        icon={<IconAdd size=\"xs\" isCircled />}\n      >\n        {t('Create Project')}\n      </Button>\n    );\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title=\"Projects\" action={action} />\n        <SearchWrapper>\n          {this.renderSearchInput({\n            updateRoute: true,\n            placeholder: t('Search Projects'),\n            className: 'search',\n          })}\n        </SearchWrapper>\n        <Panel>\n          <PanelHeader>{t('Projects')}</PanelHeader>\n          <PanelBody>\n            {projectList ? (\n              sortProjects(projectList).map(project => (\n                <GridPanelItem key={project.id}>\n                  <ProjectListItemWrapper>\n                    <ProjectListItem project={project} organization={organization} />\n                  </ProjectListItemWrapper>\n                  <ProjectStatsGraphWrapper>\n                    {projectStats ? (\n                      <ProjectStatsGraph\n                        key={project.id}\n                        project={project}\n                        stats={projectStats[project.id]}\n                      />\n                    ) : (\n                      <Placeholder height=\"25px\" />\n                    )}\n                  </ProjectStatsGraphWrapper>\n                </GridPanelItem>\n              ))\n            ) : (\n              <LoadingIndicator />\n            )}\n            {projectList && projectList.length === 0 && (\n              <EmptyMessage>{t('No projects found.')}</EmptyMessage>\n            )}\n          </PanelBody>\n        </Panel>\n        {projectListPageLinks && (\n          <Pagination pageLinks={projectListPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationProjects);\n\nconst SearchWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst GridPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  padding: 0;\n`;\n\nconst ProjectListItemWrapper = styled('div')`\n  padding: ${space(2)};\n  flex: 1;\n`;\n\nconst ProjectStatsGraphWrapper = styled('div')`\n  padding: ${space(2)};\n  width: 25%;\n  margin-left: ${space(2)};\n`;\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ProjectItem","project","organization","isBookmarked","setBookmarked","useState","Wrapper","onToggle","state","to","slug","avatarSize","space","ProjectStatsGraph","stats","series","seriesName","t","data","map","point","name","value","Fragment","height","debounce","isGroupedByDate","showTimeInTooltip","OrganizationProjects","getEndpoints","orgId","props","params","location","query","decodeScalar","per_page","since","Date","getTime","stat","group","routeTitleGen","renderLoading","renderBody","projectList","projectListPageLinks","projectStats","canCreateProjects","Set","access","has","action","priority","size","disabled","undefined","icon","isCircled","SearchWrapper","renderSearchInput","updateRoute","placeholder","className","sortProjects","GridPanelItem","ProjectListItemWrapper","ProjectStatsGraphWrapper","id","length","pageLinks","withOrganization","PanelItem"],"sourceRoot":""}