{"version":3,"file":"chunks/app_components_tagDistributionMeter_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uqBAgCA,SAASA,EAAT,GAWU,IAXoB,UAC5BC,GAAY,EADgB,SAE5BC,GAAW,EAFiB,cAG5BC,EAAgB,KAAM,MAHM,YAI5BC,EAAc,MAAM,uBAAIC,EAAAA,EAAAA,GAAE,sBAJE,YAK5BC,EAAc,KAAM,MALQ,mBAM5BC,GAAqB,EANO,SAO5BC,EAP4B,MAQ5BC,EAR4B,YAS5BC,EAT4B,WAU5BC,GACQ,EAoHR,MAAMC,EAAeJ,EAASK,QAAO,CAACC,EAAKC,IAAUD,EAAMC,EAAMC,OAAO,GAaxE,OAZiBJ,EAAeF,GAG9BF,EAASS,KAAK,CACZC,SAAS,EACTC,MAAMd,EAAAA,EAAAA,GAAE,SACRU,MAAO,QACPC,MAAON,EAAcE,EACrBQ,IAAK,MAKP,QAACC,EAAD,WAjIF,WACE,IAAKC,MAAMC,QAAQf,IAAaA,EAASgB,QAAU,EACjD,OACE,QAACC,EAAD,WACE,QAACC,EAAD,UAAYjB,MAKlB,MAAMkB,EAAiBnB,EAAS,GAC1BoB,GAAMC,EAAAA,EAAAA,IAAQF,EAAeX,MAAON,GACpCoB,EAAWC,KAAKC,MAAMJ,GAoB5B,OACE,QAACH,EAAD,YACE,QAACC,EAAD,UAAYjB,KACZ,QAACwB,EAAD,WApBK,YADCxB,GAGF,QAACyB,EAAD,WACE,QAAC,IAAD,CACEC,QAASR,EAAeR,KACxBiB,QAAQ,EACRC,mBAAiB,EACjBC,YAAa/B,EACbgC,UAAQ,OAKP,QAACL,EAAD,UAAQP,EAAeR,OAAQd,EAAAA,EAAAA,GAAE,SASvCJ,GAAaC,EAAW,MAAO,QAACsC,EAAD,WAAUV,EAAV,YAIvC,CA0FIW,GAvFCxC,EACKE,IAGLD,GACK,QAACwC,EAAD,UAAapC,MAGF,IAAhBI,GACK,QAACgC,EAAD,UAAatC,OAIpB,QAACsC,EAAD,UACGlC,EAASmC,KAAI,CAAC5B,EAAO6B,KACpB,MAAMhB,GAAMC,EAAAA,EAAAA,IAAQd,EAAMC,MAAON,GAC3BoB,EAAWC,KAAKC,MAAMJ,GAgBtBiB,GACJ,QAAC,EAAAC,SAAD,YACE,eAAKC,UAAU,WAAf,SAfK,YADCtC,GAGF,QAAC,IAAD,CACE0B,QAASpB,EAAMI,KACfiB,QAAQ,EACRE,YAAa/B,IAIVQ,EAAMI,OAAQd,EAAAA,EAAAA,GAAE,SAOxByB,EAFH,OAMIkB,EAA6B,CACjCJ,QACAK,GAAIlC,EAAMK,IACV8B,QAAS,IAAMvC,IAAaF,EAAOM,IAGrC,OACE,eACE,eAAe,OAAMN,aAAiBM,EAAMA,QAE5CoC,MAAO,CAACC,MAAOxB,EAAM,KAHvB,UAKE,QAAC,IAAD,CAASnB,MAAOoC,EAAaQ,qBAAqB,QAAlD,SACGtC,EAAMG,SACL,QAACoC,EAAD,CAAc,cAAYjD,EAAAA,EAAAA,GAAE,YAE5B,QAACkD,EAAD,CACE,cAAYlD,EAAAA,EAAAA,GACV,gDACAI,EACAM,EAAMA,UAEJiC,OAbLjC,EAAMA,MAHf,QA8CT,CAlJQf,EAAAA,YAAAA,uBAoJT,UAEMwD,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGInC,GAAa,OAAO,MAAP,qBAAH,kBACGoC,EAAAA,EAAAA,GAAM,GADT,KAIVf,GAAa,OAAO,MAAP,qBAAH,+CAGGgB,GAAKA,EAAEC,MAAMC,cAHhB,KAMVnC,GAAQ,OAAO,MAAP,qBAAH,2BAEIiC,GAAKA,EAAEC,MAAME,eAFjB,iDAIQJ,EAAAA,EAAAA,GAAM,KAJd,qBAQL/B,GAAY,OAAO,MAAP,qBAAH,UACJgC,GAAKA,EAAEC,MAAMG,WADT,sBAGXJ,GAAKA,EAAEC,MAAMI,kBAHF,KAMT9B,GAAmB,OAAO,MAAP,qBAAH,uBAEXyB,GAAKA,EAAEC,MAAMK,SAFF,sBAMhB9B,GAAQ,OAAO,MAAP,sBACVwB,GAAKA,EAAEC,MAAMI,kBADN,qBAKLvB,GAAU,OAAO,MAAP,qBAAH,oEAGKiB,EAAAA,EAAAA,GAAM,IAHX,WAIFC,GAAKA,EAAEC,MAAMG,WAJX,KAOPR,GAAe,OAAO,OAAP,qBAAH,oFAMIE,EAAOA,EAAOhC,OAAS,GAN3B,KASZ+B,GAAU,OAAOU,EAAAA,EAAP,CAAcC,kBAAmBC,EAAAA,EAAjC,oBAAH,qFAMST,GAAKF,EAAOE,EAAEd,QANvB,oB","sources":["webpack:///./app/components/tagDistributionMeter.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport {TagSegment} from 'sentry/actionCreators/events';\nimport Link from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport Version from 'sentry/components/version';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {percent} from 'sentry/utils';\n\ntype Props = {\n  segments: TagSegment[];\n  title: string;\n  totalValues: number;\n  hasError?: boolean;\n  isLoading?: boolean;\n  onTagClick?: (title: string, value: TagSegment) => void;\n  renderEmpty?: () => React.ReactNode;\n  renderError?: () => React.ReactNode;\n  renderLoading?: () => React.ReactNode;\n  showReleasePackage?: boolean;\n};\n\ntype SegmentValue = {\n  index: number;\n  onClick: () => void;\n  to: LocationDescriptor;\n};\n\nfunction TagDistributionMeter({\n  isLoading = false,\n  hasError = false,\n  renderLoading = () => null,\n  renderEmpty = () => <p>{t('No recent data.')}</p>,\n  renderError = () => null,\n  showReleasePackage = false,\n  segments,\n  title,\n  totalValues,\n  onTagClick,\n}: Props) {\n  function renderTitle() {\n    if (!Array.isArray(segments) || segments.length <= 0) {\n      return (\n        <Title>\n          <TitleType>{title}</TitleType>\n        </Title>\n      );\n    }\n\n    const largestSegment = segments[0];\n    const pct = percent(largestSegment.count, totalValues);\n    const pctLabel = Math.floor(pct);\n    const renderLabel = () => {\n      switch (title) {\n        case 'release':\n          return (\n            <Label>\n              <Version\n                version={largestSegment.name}\n                anchor={false}\n                tooltipRawVersion\n                withPackage={showReleasePackage}\n                truncate\n              />\n            </Label>\n          );\n        default:\n          return <Label>{largestSegment.name || t('n/a')}</Label>;\n      }\n    };\n\n    return (\n      <Title>\n        <TitleType>{title}</TitleType>\n        <TitleDescription>\n          {renderLabel()}\n          {isLoading || hasError ? null : <Percent>{pctLabel}%</Percent>}\n        </TitleDescription>\n      </Title>\n    );\n  }\n\n  function renderSegments() {\n    if (isLoading) {\n      return renderLoading();\n    }\n\n    if (hasError) {\n      return <SegmentBar>{renderError()}</SegmentBar>;\n    }\n\n    if (totalValues === 0) {\n      return <SegmentBar>{renderEmpty()}</SegmentBar>;\n    }\n\n    return (\n      <SegmentBar>\n        {segments.map((value, index) => {\n          const pct = percent(value.count, totalValues);\n          const pctLabel = Math.floor(pct);\n          const renderTooltipValue = () => {\n            switch (title) {\n              case 'release':\n                return (\n                  <Version\n                    version={value.name}\n                    anchor={false}\n                    withPackage={showReleasePackage}\n                  />\n                );\n              default:\n                return value.name || t('n/a');\n            }\n          };\n\n          const tooltipHtml = (\n            <Fragment>\n              <div className=\"truncate\">{renderTooltipValue()}</div>\n              {pctLabel}%\n            </Fragment>\n          );\n\n          const segmentProps: SegmentValue = {\n            index,\n            to: value.url,\n            onClick: () => onTagClick?.(title, value),\n          };\n\n          return (\n            <div\n              data-test-id={`tag-${title}-segment-${value.value}`}\n              key={value.value}\n              style={{width: pct + '%'}}\n            >\n              <Tooltip title={tooltipHtml} containerDisplayMode=\"block\">\n                {value.isOther ? (\n                  <OtherSegment aria-label={t('Other')} />\n                ) : (\n                  <Segment\n                    aria-label={t(\n                      'Add the %s %s segment tag to the search query',\n                      title,\n                      value.value\n                    )}\n                    {...segmentProps}\n                  />\n                )}\n              </Tooltip>\n            </div>\n          );\n        })}\n      </SegmentBar>\n    );\n  }\n\n  const totalVisible = segments.reduce((sum, value) => sum + value.count, 0);\n  const hasOther = totalVisible < totalValues;\n\n  if (hasOther) {\n    segments.push({\n      isOther: true,\n      name: t('Other'),\n      value: 'other',\n      count: totalValues - totalVisible,\n      url: '',\n    });\n  }\n\n  return (\n    <TagSummary>\n      {renderTitle()}\n      {renderSegments()}\n    </TagSummary>\n  );\n}\n\nexport default TagDistributionMeter;\n\nconst COLORS = [\n  '#3A3387',\n  '#5F40A3',\n  '#8C4FBD',\n  '#B961D3',\n  '#DE76E4',\n  '#EF91E8',\n  '#F7B2EC',\n  '#FCD8F4',\n  '#FEEBF9',\n];\n\nconst TagSummary = styled('div')`\n  margin-bottom: ${space(1)};\n`;\n\nconst SegmentBar = styled('div')`\n  display: flex;\n  overflow: hidden;\n  border-radius: ${p => p.theme.borderRadius};\n`;\n\nconst Title = styled('div')`\n  display: flex;\n  font-size: ${p => p.theme.fontSizeSmall};\n  justify-content: space-between;\n  margin-bottom: ${space(0.25)};\n  line-height: 1.1;\n`;\n\nconst TitleType = styled('div')`\n  color: ${p => p.theme.textColor};\n  font-weight: bold;\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst TitleDescription = styled('div')`\n  display: flex;\n  color: ${p => p.theme.gray300};\n  text-align: right;\n`;\n\nconst Label = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  max-width: 150px;\n`;\n\nconst Percent = styled('div')`\n  font-weight: bold;\n  font-variant-numeric: tabular-nums;\n  padding-left: ${space(0.5)};\n  color: ${p => p.theme.textColor};\n`;\n\nconst OtherSegment = styled('span')`\n  display: block;\n  width: 100%;\n  height: 16px;\n  color: inherit;\n  outline: none;\n  background-color: ${COLORS[COLORS.length - 1]};\n`;\n\nconst Segment = styled(Link, {shouldForwardProp: isPropValid})<SegmentValue>`\n  display: block;\n  width: 100%;\n  height: 16px;\n  color: inherit;\n  outline: none;\n  background-color: ${p => COLORS[p.index]};\n  border-radius: 0;\n`;\n"],"names":["TagDistributionMeter","isLoading","hasError","renderLoading","renderEmpty","t","renderError","showReleasePackage","segments","title","totalValues","onTagClick","totalVisible","reduce","sum","value","count","push","isOther","name","url","TagSummary","Array","isArray","length","Title","TitleType","largestSegment","pct","percent","pctLabel","Math","floor","TitleDescription","Label","version","anchor","tooltipRawVersion","withPackage","truncate","Percent","renderTitle","SegmentBar","map","index","tooltipHtml","Fragment","className","segmentProps","to","onClick","style","width","containerDisplayMode","OtherSegment","Segment","COLORS","space","p","theme","borderRadius","fontSizeSmall","textColor","overflowEllipsis","gray300","Link","shouldForwardProp","isPropValid"],"sourceRoot":""}