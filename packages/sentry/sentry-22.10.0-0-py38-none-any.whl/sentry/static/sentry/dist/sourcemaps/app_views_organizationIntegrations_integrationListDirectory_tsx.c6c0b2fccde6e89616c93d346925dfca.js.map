{"version":3,"file":"chunks/app_views_organizationIntegrations_integrationListDirectory_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/sentryAppIcon.tsx","webpack:///./app/utils/fuzzySearch.tsx","webpack:///./app/views/organizationIntegrations/constants.tsx","webpack:///./app/views/organizationIntegrations/createIntegrationButton.tsx","webpack:///./app/views/organizationIntegrations/integrationAlertContainer.tsx","webpack:///./app/views/organizationIntegrations/integrationRow.tsx","webpack:///./app/views/organizationIntegrations/integrationListDirectory.tsx","webpack:///./app/views/organizationIntegrations/integrationStatus.tsx","webpack:///./app/views/organizationIntegrations/pluginDeprecationAlert.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx"],"sourcesContent":["import SentryAppAvatar from 'sentry/components/avatar/sentryAppAvatar';\nimport {AvatarSentryApp} from 'sentry/types';\n\ntype Props = {\n  sentryApp: AvatarSentryApp;\n  size: number;\n};\n\nconst SentryAppIcon = ({sentryApp, size}: Props) => {\n  return <SentryAppAvatar sentryApp={sentryApp} size={size} isColor />;\n};\n\nexport default SentryAppIcon;\n","import type Fuse from 'fuse.js';\n\n// See http://fusejs.io/ for more information\nconst DEFAULT_FUSE_OPTIONS: Fuse.IFuseOptions<any> = {\n  includeScore: true,\n  includeMatches: true,\n  threshold: 0.4,\n  location: 0,\n  distance: 75,\n  minMatchCharLength: 2,\n};\n\nexport async function createFuzzySearch<\n  T = string,\n  Options extends Fuse.IFuseOptions<T> = Fuse.IFuseOptions<T>\n>(objects: T[], options: Options): Promise<Fuse<T>> {\n  if (!options.keys) {\n    throw new Error('You need to define `options.keys`');\n  }\n\n  const fuseImported = await import('fuse.js');\n  const fuse = {Fuse: fuseImported.default};\n\n  return new fuse.Fuse(objects, {\n    ...DEFAULT_FUSE_OPTIONS,\n    ...options,\n  });\n}\n\n// re-export fuse type to make it easier to use\nexport type {Fuse};\n","export const INSTALLED = 'Installed' as const;\nexport const NOT_INSTALLED = 'Not Installed' as const;\nexport const PENDING = 'Pending' as const;\nexport const DISABLED = 'Disabled' as const;\nexport const LEARN_MORE = 'Learn More' as const;\n\nexport const COLORS = {\n  [INSTALLED]: 'success',\n  [NOT_INSTALLED]: 'gray300',\n  [DISABLED]: 'gray300',\n  [PENDING]: 'pink300',\n  [LEARN_MORE]: 'gray300',\n} as const;\n\n/**\n * Integrations in the integration directory should be sorted by their popularity (weight).\n * The weights should reflect the relative popularity of each integration are hardcoded, except for\n * Sentry-apps which read popularity from the db.\n */\n\nexport const POPULARITY_WEIGHT: {\n  [key: string]: number;\n} = {\n  // First-party-integrations\n  slack: 50,\n  github: 20,\n  jira: 10,\n  bitbucket: 10,\n  gitlab: 10,\n  pagerduty: 10,\n  vsts: 10,\n  jira_server: 10,\n  bitbucket_server: 10,\n  github_enterprise: 10,\n  vercel: 10,\n  msteams: 10,\n  aws_lambda: 10,\n\n  // Plugins\n  webhooks: 10,\n  asana: 8,\n  trello: 8,\n  heroku: 8,\n  pivotal: 8,\n  twilio: 8,\n  pushover: 5,\n  redmine: 5,\n  phabricator: 5,\n  opsgenie: 5,\n  victorops: 5,\n  sessionstack: 5,\n  segment: 2,\n  'amazon-sqs': 2,\n  splunk: 2,\n} as const;\n","import {openCreateNewIntegrationModal} from 'sentry/actionCreators/modal';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {IntegrationView} from 'sentry/utils/analytics/integrations';\nimport {PlatformEvents} from 'sentry/utils/analytics/integrations/platformAnalyticsEvents';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype CreateIntegrationButtonProps = {\n  analyticsView: IntegrationView['view'];\n  organization: Organization;\n};\n\n/**\n * Button to open the modal to create a new public/internal integration (Sentry App)\n */\nfunction CreateIntegrationButton({\n  organization,\n  analyticsView,\n}: CreateIntegrationButtonProps) {\n  const permissionTooltipText = t(\n    'Manager or Owner permissions are required to create a new integration'\n  );\n\n  return (\n    <Access organization={organization} access={['org:write']}>\n      {({hasAccess}) => (\n        <Button\n          size=\"sm\"\n          priority=\"primary\"\n          disabled={!hasAccess}\n          title={!hasAccess ? permissionTooltipText : undefined}\n          onClick={() => {\n            openCreateNewIntegrationModal({organization});\n            trackIntegrationAnalytics(PlatformEvents.OPEN_CREATE_MODAL, {\n              organization,\n              view: analyticsView,\n            });\n          }}\n        >\n          {t('Create New Integration')}\n        </Button>\n      )}\n    </Access>\n  );\n}\n\nexport default withOrganization(CreateIntegrationButton);\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nexport default styled('div')`\n  padding: 0px ${space(3)} 0px 68px;\n`;\n","import styled from '@emotion/styled';\nimport startCase from 'lodash/startCase';\n\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {PanelItem} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport space from 'sentry/styles/space';\nimport {\n  IntegrationInstallationStatus,\n  Organization,\n  PluginWithProjectList,\n  SentryApp,\n} from 'sentry/types';\nimport {\n  convertIntegrationTypeToSnakeCase,\n  trackIntegrationAnalytics,\n} from 'sentry/utils/integrationUtil';\n\nimport AlertContainer from './integrationAlertContainer';\nimport IntegrationStatus from './integrationStatus';\nimport PluginDeprecationAlert from './pluginDeprecationAlert';\n\ntype Props = {\n  categories: string[];\n  configurations: number;\n  displayName: string;\n  organization: Organization;\n  publishStatus: 'unpublished' | 'published' | 'internal';\n  slug: string;\n  type: 'plugin' | 'firstParty' | 'sentryApp' | 'docIntegration';\n  /**\n   * If provided, render an alert message with this text.\n   */\n  alertText?: string;\n  customAlert?: React.ReactNode;\n  customIcon?: React.ReactNode;\n  plugin?: PluginWithProjectList;\n  /**\n   * If `alertText` was provided, this text overrides the \"Resolve now\" message\n   * in the alert.\n   */\n  resolveText?: string;\n  status?: IntegrationInstallationStatus;\n};\n\nconst urlMap = {\n  plugin: 'plugins',\n  firstParty: 'integrations',\n  sentryApp: 'sentry-apps',\n  docIntegration: 'document-integrations',\n};\n\nconst IntegrationRow = (props: Props) => {\n  const {\n    organization,\n    type,\n    slug,\n    displayName,\n    status,\n    publishStatus,\n    configurations,\n    categories,\n    alertText,\n    resolveText,\n    plugin,\n    customAlert,\n    customIcon,\n  } = props;\n\n  const baseUrl =\n    publishStatus === 'internal'\n      ? `/settings/${organization.slug}/developer-settings/${slug}/`\n      : `/settings/${organization.slug}/${urlMap[type]}/${slug}/`;\n\n  const renderDetails = () => {\n    if (type === 'sentryApp') {\n      return publishStatus !== 'published' && <PublishStatus status={publishStatus} />;\n    }\n    // TODO: Use proper translations\n    return configurations > 0 ? (\n      <StyledLink to={`${baseUrl}?tab=configurations`}>{`${configurations} Configuration${\n        configurations > 1 ? 's' : ''\n      }`}</StyledLink>\n    ) : null;\n  };\n\n  const renderStatus = () => {\n    // status should be undefined for document integrations\n    if (status) {\n      return <IntegrationStatus status={status} />;\n    }\n    return <LearnMore to={baseUrl}>{t('Learn More')}</LearnMore>;\n  };\n\n  return (\n    <PanelRow noPadding data-test-id={slug}>\n      <FlexContainer>\n        {customIcon ?? <PluginIcon size={36} pluginId={slug} />}\n        <TitleContainer>\n          <IntegrationName to={baseUrl}>{displayName}</IntegrationName>\n          <IntegrationDetails>\n            {renderStatus()}\n            {renderDetails()}\n          </IntegrationDetails>\n        </TitleContainer>\n        <TagsContainer>\n          {categories?.map(category => (\n            <CategoryTag\n              key={category}\n              category={category === 'api' ? 'API' : startCase(category)}\n              priority={category === publishStatus}\n            />\n          ))}\n        </TagsContainer>\n      </FlexContainer>\n      {alertText && (\n        <AlertContainer>\n          <Alert\n            type=\"warning\"\n            showIcon\n            trailingItems={\n              <ResolveNowButton\n                href={`${baseUrl}?tab=configurations&referrer=directory_resolve_now`}\n                size=\"xs\"\n                onClick={() =>\n                  trackIntegrationAnalytics('integrations.resolve_now_clicked', {\n                    integration_type: convertIntegrationTypeToSnakeCase(type),\n                    integration: slug,\n                    organization,\n                  })\n                }\n              >\n                {resolveText || t('Resolve Now')}\n              </ResolveNowButton>\n            }\n          >\n            {alertText}\n          </Alert>\n        </AlertContainer>\n      )}\n      {customAlert}\n      {plugin?.deprecationDate && (\n        <PluginDeprecationAlertWrapper>\n          <PluginDeprecationAlert organization={organization} plugin={plugin} />\n        </PluginDeprecationAlertWrapper>\n      )}\n    </PanelRow>\n  );\n};\n\nconst PluginDeprecationAlertWrapper = styled('div')`\n  padding: 0px ${space(3)} 0px 68px;\n`;\n\nconst PanelRow = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst FlexContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(2)};\n`;\n\nconst TitleContainer = styled('div')`\n  flex: 1;\n  padding: 0 16px;\n  white-space: nowrap;\n`;\n\nconst TagsContainer = styled('div')`\n  flex: 3;\n  text-align: right;\n  padding: 0 ${space(2)};\n`;\n\nconst IntegrationName = styled(Link)`\n  font-weight: bold;\n`;\n\nconst IntegrationDetails = styled('div')`\n  display: flex;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.gray300};\n  &:before {\n    content: '|';\n    color: ${p => p.theme.gray200};\n    margin-right: ${space(0.75)};\n  }\n`;\n\nconst LearnMore = styled(Link)`\n  color: ${p => p.theme.gray300};\n`;\n\ntype PublishStatusProps = {status: SentryApp['status']; theme?: any};\n\nconst PublishStatus = styled(({status, ...props}: PublishStatusProps) => (\n  <div {...props}>{t(`${status}`)}</div>\n))`\n  color: ${(props: PublishStatusProps) =>\n    props.status === 'published' ? props.theme.success : props.theme.gray300};\n  font-weight: light;\n  margin-right: ${space(0.75)};\n  text-transform: capitalize;\n  &:before {\n    content: '|';\n    color: ${p => p.theme.gray200};\n    margin-right: ${space(0.75)};\n    font-weight: normal;\n  }\n`;\n\n// TODO(Priscila): Replace this component with the Tag component\nconst CategoryTag = styled(\n  ({\n    priority: _priority,\n    category,\n    ...p\n  }: {\n    category: string;\n    priority: boolean;\n    theme?: any;\n  }) => <div {...p}>{category}</div>\n)`\n  display: inline-block;\n  padding: 1px 10px;\n  background: ${p => (p.priority ? p.theme.purple200 : p.theme.gray100)};\n  border-radius: 20px;\n  font-size: ${space(1.5)};\n  margin: ${space(0.25)} ${space(0.5)};\n  line-height: ${space(3)};\n  text-align: center;\n  color: ${p => (p.priority ? p.theme.white : p.theme.gray500)};\n`;\n\nconst ResolveNowButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  float: right;\n`;\n\nexport default IntegrationRow;\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport flatten from 'lodash/flatten';\nimport groupBy from 'lodash/groupBy';\nimport startCase from 'lodash/startCase';\nimport uniq from 'lodash/uniq';\nimport * as qs from 'query-string';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport DocIntegrationAvatar from 'sentry/components/avatar/docIntegrationAvatar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport SearchBar from 'sentry/components/searchBar';\nimport SentryAppIcon from 'sentry/components/sentryAppIcon';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  AppOrProviderOrPlugin,\n  DocIntegration,\n  Integration,\n  IntegrationProvider,\n  Organization,\n  PluginWithProjectList,\n  SentryApp,\n  SentryAppInstallation,\n} from 'sentry/types';\nimport {createFuzzySearch, Fuse} from 'sentry/utils/fuzzySearch';\nimport {\n  getAlertText,\n  getCategoriesForIntegration,\n  getSentryAppInstallStatus,\n  isDocIntegration,\n  isPlugin,\n  isSentryApp,\n  trackIntegrationAnalytics,\n} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport CreateIntegrationButton from 'sentry/views/organizationIntegrations/createIntegrationButton';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/organization/permissionAlert';\n\nimport {POPULARITY_WEIGHT} from './constants';\nimport IntegrationRow from './integrationRow';\n\nconst FirstPartyIntegrationAlert = HookOrDefault({\n  hookName: 'component:first-party-integration-alert',\n  defaultComponent: () => null,\n});\n\nconst fuseOptions = {\n  threshold: 0.3,\n  location: 0,\n  distance: 100,\n  includeScore: true as const,\n  keys: ['slug', 'key', 'name', 'id'],\n};\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  hideHeader: boolean;\n  organization: Organization;\n};\n\ntype State = {\n  appInstalls: SentryAppInstallation[] | null;\n  config: {providers: IntegrationProvider[]} | null;\n  displayedList: AppOrProviderOrPlugin[];\n  docIntegrations: DocIntegration[] | null;\n  integrations: Integration[] | null;\n  list: AppOrProviderOrPlugin[];\n  orgOwnedApps: SentryApp[] | null;\n  plugins: PluginWithProjectList[] | null;\n  publishedApps: SentryApp[] | null;\n  searchInput: string;\n  selectedCategory: string;\n  extraApp?: SentryApp;\n  fuzzy?: Fuse<AppOrProviderOrPlugin>;\n};\n\nconst TEXT_SEARCH_ANALYTICS_DEBOUNCE_IN_MS = 1000;\n\nexport class IntegrationListDirectory extends AsyncComponent<\n  Props & AsyncComponent['props'],\n  State & AsyncComponent['state']\n> {\n  // Some integrations require visiting a different website to add them. When\n  // we come back to the tab we want to show our integrations as soon as we can.\n  shouldReload = true;\n  reloadOnVisible = true;\n  shouldReloadOnVisible = true;\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      list: [],\n      displayedList: [],\n      selectedCategory: '',\n    };\n  }\n\n  onLoadAllEndpointsSuccess() {\n    const {publishedApps, orgOwnedApps, extraApp, plugins, docIntegrations} = this.state;\n    const published = publishedApps || [];\n    // If we have an extra app in state from query parameter, add it as org owned app\n    if (orgOwnedApps !== null && extraApp) {\n      orgOwnedApps.push(extraApp);\n    }\n\n    // we don't want the app to render twice if its the org that created\n    // the published app.\n    const orgOwned = orgOwnedApps?.filter(\n      app => !published.find(p => p.slug === app.slug)\n    );\n\n    /**\n     * We should have three sections:\n     * 1. Public apps and integrations available to everyone\n     * 2. Unpublished apps available to that org\n     * 3. Internal apps available to that org\n     */\n\n    const combined = ([] as AppOrProviderOrPlugin[])\n      .concat(published)\n      .concat(orgOwned ?? [])\n      .concat(this.providers)\n      .concat(plugins ?? [])\n      .concat(docIntegrations ?? []);\n\n    const list = this.sortIntegrations(combined);\n\n    const {searchInput, selectedCategory} = this.getFilterParameters();\n\n    this.setState({list, searchInput, selectedCategory}, () => {\n      this.updateDisplayedList();\n      this.trackPageViewed();\n    });\n  }\n\n  trackPageViewed() {\n    // count the number of installed apps\n\n    const {integrations, publishedApps, plugins} = this.state;\n    const integrationsInstalled = new Set();\n    // add installed integrations\n    integrations?.forEach((integration: Integration) => {\n      integrationsInstalled.add(integration.provider.key);\n    });\n    // add sentry apps\n    publishedApps?.filter(this.getAppInstall).forEach((sentryApp: SentryApp) => {\n      integrationsInstalled.add(sentryApp.slug);\n    });\n    // add plugins\n    plugins?.forEach((plugin: PluginWithProjectList) => {\n      if (plugin.projectList.length) {\n        integrationsInstalled.add(plugin.slug);\n      }\n    });\n    trackIntegrationAnalytics(\n      'integrations.index_viewed',\n      {\n        integrations_installed: integrationsInstalled.size,\n        view: 'integrations_directory',\n        organization: this.props.organization,\n      },\n      {startSession: true}\n    );\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId} = this.props.params;\n    const baseEndpoints: ([string, string, any] | [string, string])[] = [\n      ['config', `/organizations/${orgId}/config/integrations/`],\n      [\n        'integrations',\n        `/organizations/${orgId}/integrations/`,\n        {query: {includeConfig: 0}},\n      ],\n      ['orgOwnedApps', `/organizations/${orgId}/sentry-apps/`],\n      ['publishedApps', '/sentry-apps/', {query: {status: 'published'}}],\n      ['appInstalls', `/organizations/${orgId}/sentry-app-installations/`],\n      ['plugins', `/organizations/${orgId}/plugins/configs/`],\n      ['docIntegrations', '/doc-integrations/'],\n    ];\n    /**\n     * optional app to load for super users\n     * should only be done for unpublished integrations from another org\n     * but no checks are in place to ensure the above condition\n     */\n    const extraAppSlug = new URLSearchParams(this.props.location.search).get('extra_app');\n    if (extraAppSlug) {\n      baseEndpoints.push(['extraApp', `/sentry-apps/${extraAppSlug}/`]);\n    }\n\n    return baseEndpoints;\n  }\n\n  // State\n\n  get unmigratableReposByOrg() {\n    // Group by [GitHub|BitBucket|VSTS] Org name\n    return groupBy(this.state.unmigratableRepos, repo => repo.name.split('/')[0]);\n  }\n\n  get providers(): IntegrationProvider[] {\n    return this.state.config?.providers ?? [];\n  }\n\n  getAppInstall = (app: SentryApp) =>\n    this.state.appInstalls?.find(i => i.app.slug === app.slug);\n\n  // Returns 0 if uninstalled, 1 if pending, and 2 if installed\n  getInstallValue(integration: AppOrProviderOrPlugin) {\n    const {integrations} = this.state;\n\n    if (isPlugin(integration)) {\n      return integration.projectList.length > 0 ? 2 : 0;\n    }\n\n    if (isSentryApp(integration)) {\n      const install = this.getAppInstall(integration);\n      if (install) {\n        return install.status === 'pending' ? 1 : 2;\n      }\n      return 0;\n    }\n\n    if (isDocIntegration(integration)) {\n      return 0;\n    }\n\n    return integrations?.find(i => i.provider.key === integration.key) ? 2 : 0;\n  }\n\n  getPopularityWeight = (integration: AppOrProviderOrPlugin) => {\n    if (isSentryApp(integration) || isDocIntegration(integration)) {\n      return integration?.popularity ?? 1;\n    }\n    return POPULARITY_WEIGHT[integration.slug] ?? 1;\n  };\n\n  sortByName = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) =>\n    a.slug.localeCompare(b.slug);\n\n  sortByPopularity = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) => {\n    const weightA = this.getPopularityWeight(a);\n    const weightB = this.getPopularityWeight(b);\n    return weightB - weightA;\n  };\n\n  sortByInstalled = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) =>\n    this.getInstallValue(b) - this.getInstallValue(a);\n\n  sortIntegrations(integrations: AppOrProviderOrPlugin[]) {\n    return integrations.sort((a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) => {\n      // sort by whether installed first\n      const diffWeight = this.sortByInstalled(a, b);\n      if (diffWeight !== 0) {\n        return diffWeight;\n      }\n      // then sort by popularity\n      const diffPop = this.sortByPopularity(a, b);\n      if (diffPop !== 0) {\n        return diffPop;\n      }\n      // then sort by name\n      return this.sortByName(a, b);\n    });\n  }\n\n  async componentDidUpdate(_: Props, prevState: State) {\n    if (this.state.list.length !== prevState.list.length) {\n      await this.createSearch();\n    }\n  }\n\n  async createSearch() {\n    const {list} = this.state;\n    this.setState({\n      fuzzy: await createFuzzySearch(list || [], fuseOptions),\n    });\n  }\n\n  debouncedTrackIntegrationSearch = debounce((search: string, numResults: number) => {\n    trackIntegrationAnalytics('integrations.directory_item_searched', {\n      view: 'integrations_directory',\n      search_term: search,\n      num_results: numResults,\n      organization: this.props.organization,\n    });\n  }, TEXT_SEARCH_ANALYTICS_DEBOUNCE_IN_MS);\n\n  /**\n   * Get filter parameters and guard against `qs.parse` returning arrays.\n   */\n  getFilterParameters = (): {searchInput: string; selectedCategory: string} => {\n    const {category, search} = qs.parse(this.props.location.search);\n\n    const selectedCategory = Array.isArray(category) ? category[0] : category || '';\n    const searchInput = Array.isArray(search) ? search[0] : search || '';\n\n    return {searchInput, selectedCategory};\n  };\n\n  /**\n   * Update the query string with the current filter parameter values.\n   */\n  updateQueryString = () => {\n    const {searchInput, selectedCategory} = this.state;\n\n    const searchString = qs.stringify({\n      ...qs.parse(this.props.location.search),\n      search: searchInput ? searchInput : undefined,\n      category: selectedCategory ? selectedCategory : undefined,\n    });\n\n    browserHistory.replace({\n      pathname: this.props.location.pathname,\n      search: searchString ? `?${searchString}` : undefined,\n    });\n  };\n\n  /**\n   * Filter the integrations list by ANDing together the search query and the category select.\n   */\n  updateDisplayedList = (): AppOrProviderOrPlugin[] => {\n    const {fuzzy, list, searchInput, selectedCategory} = this.state;\n\n    let displayedList = list;\n\n    if (searchInput && fuzzy) {\n      const searchResults = fuzzy.search(searchInput);\n      displayedList = this.sortIntegrations(searchResults.map(i => i.item));\n    }\n\n    if (selectedCategory) {\n      displayedList = displayedList.filter(integration =>\n        getCategoriesForIntegration(integration).includes(selectedCategory)\n      );\n    }\n\n    this.setState({displayedList});\n\n    return displayedList;\n  };\n\n  handleSearchChange = (value: string) => {\n    this.setState({searchInput: value}, () => {\n      this.updateQueryString();\n      const result = this.updateDisplayedList();\n      if (value) {\n        this.debouncedTrackIntegrationSearch(value, result.length);\n      }\n    });\n  };\n\n  onCategorySelect = ({value: category}: {value: string}) => {\n    this.setState({selectedCategory: category}, () => {\n      this.updateQueryString();\n      this.updateDisplayedList();\n\n      if (category) {\n        trackIntegrationAnalytics('integrations.directory_category_selected', {\n          view: 'integrations_directory',\n          category,\n          organization: this.props.organization,\n        });\n      }\n    });\n  };\n\n  // Rendering\n  renderProvider = (provider: IntegrationProvider) => {\n    const {organization} = this.props;\n    // find the integration installations for that provider\n    const integrations =\n      this.state.integrations?.filter(i => i.provider.key === provider.key) ?? [];\n\n    return (\n      <IntegrationRow\n        key={`row-${provider.key}`}\n        data-test-id=\"integration-row\"\n        organization={organization}\n        type=\"firstParty\"\n        slug={provider.slug}\n        displayName={provider.name}\n        status={integrations.length ? 'Installed' : 'Not Installed'}\n        publishStatus=\"published\"\n        configurations={integrations.length}\n        categories={getCategoriesForIntegration(provider)}\n        alertText={getAlertText(integrations)}\n        resolveText={t('Update Now')}\n        customAlert={\n          <FirstPartyIntegrationAlert integrations={integrations} wrapWithContainer />\n        }\n      />\n    );\n  };\n\n  renderPlugin = (plugin: PluginWithProjectList) => {\n    const {organization} = this.props;\n    const isLegacy = plugin.isHidden;\n    const displayName = `${plugin.name} ${isLegacy ? '(Legacy)' : ''}`;\n    // hide legacy integrations if we don't have any projects with them\n    if (isLegacy && !plugin.projectList.length) {\n      return null;\n    }\n    return (\n      <IntegrationRow\n        key={`row-plugin-${plugin.id}`}\n        data-test-id=\"integration-row\"\n        organization={organization}\n        type=\"plugin\"\n        slug={plugin.slug}\n        displayName={displayName}\n        status={plugin.projectList.length ? 'Installed' : 'Not Installed'}\n        publishStatus=\"published\"\n        configurations={plugin.projectList.length}\n        categories={getCategoriesForIntegration(plugin)}\n        plugin={plugin}\n      />\n    );\n  };\n\n  // render either an internal or non-internal app\n  renderSentryApp = (app: SentryApp) => {\n    const {organization} = this.props;\n    const status = getSentryAppInstallStatus(this.getAppInstall(app));\n    const categories = getCategoriesForIntegration(app);\n\n    return (\n      <IntegrationRow\n        key={`sentry-app-row-${app.slug}`}\n        data-test-id=\"integration-row\"\n        organization={organization}\n        type=\"sentryApp\"\n        slug={app.slug}\n        displayName={app.name}\n        status={status}\n        publishStatus={app.status}\n        configurations={0}\n        categories={categories}\n        customIcon={<SentryAppIcon sentryApp={app} size={36} />}\n      />\n    );\n  };\n\n  renderDocIntegration = (doc: DocIntegration) => {\n    const {organization} = this.props;\n    return (\n      <IntegrationRow\n        key={`doc-int-${doc.slug}`}\n        data-test-id=\"integration-row\"\n        organization={organization}\n        type=\"docIntegration\"\n        slug={doc.slug}\n        displayName={doc.name}\n        publishStatus=\"published\"\n        configurations={0}\n        categories={getCategoriesForIntegration(doc)}\n        customIcon={<DocIntegrationAvatar docIntegration={doc} size={36} />}\n      />\n    );\n  };\n\n  renderIntegration = (integration: AppOrProviderOrPlugin) => {\n    if (isSentryApp(integration)) {\n      return this.renderSentryApp(integration);\n    }\n    if (isPlugin(integration)) {\n      return this.renderPlugin(integration);\n    }\n    if (isDocIntegration(integration)) {\n      return this.renderDocIntegration(integration);\n    }\n    return this.renderProvider(integration);\n  };\n\n  renderBody() {\n    const {\n      params: {orgId},\n    } = this.props;\n    const {displayedList, list, searchInput, selectedCategory} = this.state;\n\n    const title = t('Integrations');\n    const categoryList = uniq(flatten(list.map(getCategoriesForIntegration))).sort();\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} orgSlug={orgId} />\n\n        {!this.props.hideHeader && (\n          <SettingsPageHeader\n            title={title}\n            body={\n              <ActionContainer>\n                <SelectControl\n                  name=\"select-categories\"\n                  onChange={this.onCategorySelect}\n                  value={selectedCategory}\n                  options={[\n                    {value: '', label: t('All Categories')},\n                    ...categoryList.map(category => ({\n                      value: category,\n                      label: startCase(category),\n                    })),\n                  ]}\n                />\n                <SearchBar\n                  query={searchInput || ''}\n                  onChange={this.handleSearchChange}\n                  placeholder={t('Filter Integrations...')}\n                  aria-label={t('Filter')}\n                  width=\"100%\"\n                  data-test-id=\"search-bar\"\n                />\n              </ActionContainer>\n            }\n            action={<CreateIntegrationButton analyticsView=\"integrations_directory\" />}\n          />\n        )}\n\n        <PermissionAlert access={['org:integrations']} />\n        <Panel>\n          <PanelBody data-test-id=\"integration-panel\">\n            {displayedList.length ? (\n              displayedList.map(this.renderIntegration)\n            ) : (\n              <EmptyResultsContainer>\n                <EmptyResultsBody>\n                  {tct('No Integrations found for \"[searchTerm]\".', {\n                    searchTerm: searchInput,\n                  })}\n                </EmptyResultsBody>\n                <EmptyResultsBodyBold>\n                  {t(\"Not seeing what you're looking for?\")}\n                </EmptyResultsBodyBold>\n                <EmptyResultsBody>\n                  {tct('[link:Build it on the Sentry Integration Platform.]', {\n                    link: (\n                      <ExternalLink href=\"https://docs.sentry.io/product/integrations/integration-platform/\" />\n                    ),\n                  })}\n                </EmptyResultsBody>\n              </EmptyResultsContainer>\n            )}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nconst ActionContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 240px auto;\n  gap: ${space(2)};\n`;\n\nconst EmptyResultsContainer = styled('div')`\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst EmptyResultsBody = styled('div')`\n  font-size: 16px;\n  line-height: 28px;\n  color: ${p => p.theme.gray300};\n  padding-bottom: ${space(2)};\n`;\n\nconst EmptyResultsBodyBold = styled(EmptyResultsBody)`\n  font-weight: bold;\n`;\n\nexport default withOrganization(IntegrationListDirectory);\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {IntegrationInstallationStatus} from 'sentry/types';\n\nimport {COLORS} from './constants';\n\ntype StatusProps = {\n  status: IntegrationInstallationStatus;\n};\n\nconst StatusWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationStatus = styled(({status, ...p}: StatusProps) => {\n  const theme = useTheme();\n\n  return (\n    <StatusWrapper>\n      <CircleIndicator size={6} color={theme[COLORS[status]]} />\n      <div {...p}>{`${t(status)}`}</div>\n    </StatusWrapper>\n  );\n})`\n  color: ${p => p.theme[COLORS[p.status]]};\n  margin-left: ${space(0.5)};\n  font-weight: light;\n  margin-right: ${space(0.75)};\n`;\n\nexport default IntegrationStatus;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, PluginWithProjectList} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  organization: Organization;\n  plugin: PluginWithProjectList;\n};\n\ntype State = {};\n\nclass PluginDeprecationAlert extends Component<Props, State> {\n  render() {\n    const {organization, plugin} = this.props;\n\n    // Short-circuit if not deprecated.\n    if (!plugin.deprecationDate) {\n      return <Fragment />;\n    }\n    const resource = plugin.altIsSentryApp ? 'sentry-apps' : 'integrations';\n    const upgradeUrl = `/settings/${organization.slug}/${resource}/${plugin.firstPartyAlternative}/`;\n    const queryParams = `?${\n      plugin.altIsSentryApp ? '' : 'tab=configurations&'\n    }referrer=directory_upgrade_now`;\n    return (\n      <div>\n        <Alert\n          type=\"warning\"\n          showIcon\n          trailingItems={\n            <UpgradeNowButton\n              href={`${upgradeUrl}${queryParams}`}\n              size=\"xs\"\n              onClick={() =>\n                trackIntegrationAnalytics('integrations.resolve_now_clicked', {\n                  integration_type: 'plugin',\n                  integration: plugin.slug,\n                  organization,\n                })\n              }\n            >\n              {t('Upgrade Now')}\n            </UpgradeNowButton>\n          }\n        >\n          {`This integration is being deprecated on ${plugin.deprecationDate}. Please upgrade to avoid any disruption.`}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nconst UpgradeNowButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  float: right;\n`;\n\nexport default PluginDeprecationAlert;\n","import {ReactNode} from 'react';\n\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'> & {\n    message?: ReactNode;\n  };\n\nconst PermissionAlert = ({\n  access = ['org:write'],\n  message = t(\n    'These settings can only be edited by users with the organization owner or manager role.'\n  ),\n  ...props\n}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" showIcon {...props}>\n          {message}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n"],"names":["SentryAppIcon","sentryApp","size","isColor","DEFAULT_FUSE_OPTIONS","includeScore","includeMatches","threshold","location","distance","minMatchCharLength","async","createFuzzySearch","objects","options","keys","Error","default","COLORS","POPULARITY_WEIGHT","slack","github","jira","bitbucket","gitlab","pagerduty","vsts","jira_server","bitbucket_server","github_enterprise","vercel","msteams","aws_lambda","webhooks","asana","trello","heroku","pivotal","twilio","pushover","redmine","phabricator","opsgenie","victorops","sessionstack","segment","splunk","CreateIntegrationButton","organization","analyticsView","permissionTooltipText","t","access","hasAccess","priority","disabled","title","undefined","onClick","openCreateNewIntegrationModal","trackIntegrationAnalytics","PlatformEvents","view","withOrganization","space","urlMap","plugin","firstParty","docIntegration","IntegrationRow","props","type","slug","displayName","status","publishStatus","configurations","categories","alertText","resolveText","customAlert","customIcon","baseUrl","PanelRow","noPadding","FlexContainer","pluginId","TitleContainer","IntegrationName","to","IntegrationDetails","LearnMore","PublishStatus","StyledLink","TagsContainer","map","category","CategoryTag","startCase","showIcon","trailingItems","ResolveNowButton","href","integration_type","convertIntegrationTypeToSnakeCase","integration","deprecationDate","PluginDeprecationAlertWrapper","PanelItem","Link","p","theme","fontSizeSmall","gray300","gray200","success","_priority","purple200","gray100","white","gray500","Button","subText","FirstPartyIntegrationAlert","HookOrDefault","hookName","defaultComponent","fuseOptions","IntegrationListDirectory","AsyncComponent","app","this","state","appInstalls","find","i","isSentryApp","isDocIntegration","popularity","a","b","localeCompare","weightA","getPopularityWeight","getInstallValue","debounce","search","numResults","search_term","num_results","qs","selectedCategory","Array","isArray","searchInput","searchString","browserHistory","pathname","fuzzy","list","displayedList","searchResults","sortIntegrations","item","filter","getCategoriesForIntegration","includes","setState","value","updateQueryString","result","updateDisplayedList","debouncedTrackIntegrationSearch","length","provider","integrations","key","name","getAlertText","wrapWithContainer","isLegacy","isHidden","projectList","id","getSentryAppInstallStatus","getAppInstall","doc","renderSentryApp","isPlugin","renderPlugin","renderDocIntegration","renderProvider","getDefaultState","super","onLoadAllEndpointsSuccess","publishedApps","orgOwnedApps","extraApp","plugins","docIntegrations","published","push","orgOwned","combined","concat","providers","getFilterParameters","trackPageViewed","integrationsInstalled","Set","forEach","add","integrations_installed","startSession","getEndpoints","orgId","params","baseEndpoints","query","includeConfig","extraAppSlug","URLSearchParams","get","unmigratableReposByOrg","groupBy","unmigratableRepos","repo","split","config","install","sort","diffWeight","sortByInstalled","diffPop","sortByPopularity","sortByName","_","prevState","createSearch","renderBody","categoryList","uniq","flatten","Fragment","orgSlug","hideHeader","body","ActionContainer","onChange","onCategorySelect","label","handleSearchChange","placeholder","width","action","renderIntegration","EmptyResultsContainer","EmptyResultsBody","tct","searchTerm","EmptyResultsBodyBold","link","StatusWrapper","useTheme","color","PluginDeprecationAlert","Component","render","resource","altIsSentryApp","upgradeUrl","firstPartyAlternative","queryParams","UpgradeNowButton","PermissionAlert","message"],"sourceRoot":""}