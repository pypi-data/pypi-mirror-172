{"version":3,"file":"chunks/app_views_projectInstall_newProject_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/slugify.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"sourcesContent":["// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {Component, Fragment} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {PlatformIcon} from 'platformicons';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport Input from 'sentry/components/input';\nimport PageHeading from 'sentry/components/pageHeading';\nimport PlatformPicker from 'sentry/components/platformPicker';\nimport TeamSelector from 'sentry/components/teamSelector';\nimport categoryList from 'sentry/data/platformCategories';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport getPlatformName from 'sentry/utils/getPlatformName';\nimport slugify from 'sentry/utils/slugify';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withTeams from 'sentry/utils/withTeams';\nimport IssueAlertOptions from 'sentry/views/projectInstall/issueAlertOptions';\n\nconst getCategoryName = (category?: string) =>\n  categoryList.find(({id}) => id === category)?.id;\n\ntype Props = WithRouterProps & {\n  api: any;\n  organization: Organization;\n  teams: Team[];\n};\n\ntype PlatformName = React.ComponentProps<typeof PlatformIcon>['platform'];\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\ntype State = {\n  dataFragment: IssueAlertFragment | undefined;\n  error: boolean;\n  inFlight: boolean;\n  platform: PlatformName | null;\n  projectName: string;\n  team: string;\n};\n\nclass CreateProject extends Component<Props, State> {\n  constructor(props: Props, context) {\n    super(props, context);\n\n    const {teams, location} = props;\n    const {query} = location;\n    const accessTeams = teams.filter((team: Team) => team.hasAccess);\n\n    const team = query.team || (accessTeams.length && accessTeams[0].slug);\n    const platform = getPlatformName(query.platform) ? query.platform : '';\n\n    this.state = {\n      error: false,\n      projectName: getPlatformName(platform) || '',\n      team,\n      platform,\n      inFlight: false,\n      dataFragment: undefined,\n    };\n  }\n\n  componentDidMount() {\n    trackAdvancedAnalyticsEvent('project_creation_page.viewed', {\n      organization: this.props.organization,\n    });\n  }\n\n  get defaultCategory() {\n    const {query} = this.props.location;\n    return getCategoryName(query.category);\n  }\n\n  renderProjectForm() {\n    const {organization} = this.props;\n    const {projectName, platform, team} = this.state;\n\n    const createProjectForm = (\n      <CreateProjectForm onSubmit={this.createProject}>\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInputWrap>\n            <StyledPlatformIcon platform={platform ?? ''} size={20} />\n            <ProjectNameInput\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('project-name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => this.setState({projectName: slugify(e.target.value)})}\n            />\n          </ProjectNameInputWrap>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <TeamSelector\n              name=\"select-team\"\n              menuPlacement=\"auto\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => this.setState({team: choice.value})}\n              teamFilter={(filterTeam: Team) => filterTeam.hasAccess}\n            />\n            <Button\n              borderless\n              data-test-id=\"create-team\"\n              type=\"button\"\n              icon={<IconAdd isCircled />}\n              onClick={() =>\n                openCreateTeamModal({\n                  organization,\n                  onClose: ({slug}) => this.setState({team: slug}),\n                })\n              }\n              title={t('Create a team')}\n              aria-label={t('Create a team')}\n            />\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!this.canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    );\n\n    return (\n      <Fragment>\n        <PageHeading withMargins>{t('Give your project a name')}</PageHeading>\n        {createProjectForm}\n      </Fragment>\n    );\n  }\n\n  get canSubmitForm() {\n    const {projectName, team, inFlight} = this.state;\n    const {shouldCreateCustomRule, conditions} = this.state.dataFragment || {};\n\n    return (\n      !inFlight &&\n      team &&\n      projectName !== '' &&\n      (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value))\n    );\n  }\n\n  createProject = async e => {\n    e.preventDefault();\n    const {organization, api} = this.props;\n    const {projectName, platform, team, dataFragment} = this.state;\n    const {slug} = organization;\n    const {\n      shouldCreateCustomRule,\n      name,\n      conditions,\n      actions,\n      actionMatch,\n      frequency,\n      defaultRules,\n    } = dataFragment || {};\n\n    this.setState({inFlight: true});\n\n    if (!projectName) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureMessage('No project name');\n      });\n    }\n\n    try {\n      const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n        method: 'POST',\n        data: {\n          name: projectName,\n          platform,\n          default_rules: defaultRules ?? true,\n        },\n      });\n\n      let ruleId: string | undefined;\n      if (shouldCreateCustomRule) {\n        const ruleData = await api.requestPromise(\n          `/projects/${organization.slug}/${projectData.slug}/rules/`,\n          {\n            method: 'POST',\n            data: {\n              name,\n              conditions,\n              actions,\n              actionMatch,\n              frequency,\n            },\n          }\n        );\n        ruleId = ruleData.id;\n      }\n      trackAdvancedAnalyticsEvent('project_creation_page.created', {\n        organization,\n        issue_alert: defaultRules\n          ? 'Default'\n          : shouldCreateCustomRule\n          ? 'Custom'\n          : 'No Rule',\n        project_id: projectData.id,\n        rule_id: ruleId || '',\n      });\n\n      ProjectsStore.onCreateSuccess(projectData, organization.slug);\n\n      const platformKey = platform || 'other';\n      const nextUrl = `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`;\n      browserHistory.push(nextUrl);\n    } catch (err) {\n      this.setState({\n        inFlight: false,\n        error: err.responseJSON.detail,\n      });\n\n      // Only log this if the error is something other than:\n      // * The user not having access to create a project, or,\n      // * A project with that slug already exists\n      if (err.status !== 403 && err.status !== 409) {\n        Sentry.withScope(scope => {\n          scope.setExtra('err', err);\n          scope.setExtra('props', this.props);\n          scope.setExtra('state', this.state);\n          Sentry.captureMessage('Project creation failed');\n        });\n      }\n    }\n  };\n\n  setPlatform = (platformId: PlatformName | null) =>\n    this.setState(({projectName, platform}: State) => ({\n      platform: platformId,\n      projectName:\n        !projectName || (platform && getPlatformName(platform) === projectName)\n          ? getPlatformName(platformId) || ''\n          : projectName,\n    }));\n\n  render() {\n    const {platform, error} = this.state;\n\n    return (\n      <Fragment>\n        {error && <Alert type=\"error\">{error}</Alert>}\n\n        <div data-test-id=\"onboarding-info\">\n          <PageHeading withMargins>{t('Create a new Project')}</PageHeading>\n          <HelpText>\n            {t(\n              `Projects allow you to scope error and transaction events to a specific\n               application in your organization. For example, you might have separate\n               projects for your API server and frontend client.`\n            )}\n          </HelpText>\n          <PageHeading withMargins>{t('Choose a platform')}</PageHeading>\n          <PlatformPicker\n            platform={platform}\n            defaultCategory={this.defaultCategory}\n            setPlatform={this.setPlatform}\n            organization={this.props.organization}\n            showOther\n          />\n          <IssueAlertOptions\n            onChange={updatedData => {\n              this.setState({dataFragment: updatedData});\n            }}\n          />\n          {this.renderProjectForm()}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\n// TODO(davidenwang): change to functional component and replace withTeams with useTeams\nexport default withApi(withRouter(withOrganization(withTeams(CreateProject))));\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px minmax(250px, max-content) max-content;\n  gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst ProjectNameInputWrap = styled('div')`\n  position: relative;\n`;\n\nconst ProjectNameInput = styled(Input)`\n  padding-left: calc(${p => p.theme.formPadding.md.paddingLeft}px * 1.5 + 20px);\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  position: absolute;\n  top: 50%;\n  left: ${p => p.theme.formPadding.md.paddingLeft}px;\n  transform: translateY(-50%);\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import {Team} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useTeams from 'sentry/utils/useTeams';\n\ntype InjectedTeamsProps = {\n  teams?: Team[];\n};\n\n/**\n * Higher order component that provides a list of teams\n *\n * @deprecated Prefer `useTeams` or `<Teams />`.\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) => {\n  const WithTeams: React.FC<\n    Omit<P, keyof InjectedTeamsProps> & InjectedTeamsProps\n  > = props => {\n    const {teams} = useTeams();\n    return <WrappedComponent teams={teams} {...(props as P)} />;\n  };\n\n  WithTeams.displayName = `withTeams(${getDisplayName(WrappedComponent)})`;\n\n  return WithTeams;\n};\n\nexport default withTeams;\n","import styled from '@emotion/styled';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport space from 'sentry/styles/space';\nimport CreateProject from 'sentry/views/projectInstall/createProject';\n\nconst NewProject = () => (\n  <SentryDocumentTitle>\n    <Container>\n      <div className=\"container\">\n        <Content>\n          <CreateProject />\n        </Content>\n      </div>\n    </Container>\n  </SentryDocumentTitle>\n);\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"names":["slugify","str","toLowerCase","replace","CreateProject","Component","constructor","props","context","super","async","e","preventDefault","organization","api","this","projectName","platform","team","dataFragment","state","slug","shouldCreateCustomRule","name","conditions","actions","actionMatch","frequency","defaultRules","setState","inFlight","Sentry","scope","setExtra","projectData","requestPromise","method","data","default_rules","ruleId","id","trackAdvancedAnalyticsEvent","issue_alert","project_id","rule_id","ProjectsStore","platformKey","nextUrl","browserHistory","err","error","responseJSON","detail","status","platformId","getPlatformName","teams","location","query","accessTeams","filter","hasAccess","length","undefined","componentDidMount","defaultCategory","category","categoryList","renderProjectForm","createProjectForm","CreateProjectForm","onSubmit","createProject","FormLabel","t","ProjectNameInputWrap","StyledPlatformIcon","size","ProjectNameInput","type","placeholder","autoComplete","value","onChange","target","TeamSelectInput","menuPlacement","clearable","choice","teamFilter","filterTeam","borderless","icon","isCircled","onClick","openCreateTeamModal","onClose","title","priority","disabled","canSubmitForm","Fragment","withMargins","every","condition","render","HelpText","setPlatform","showOther","updatedData","withApi","withRouter","withOrganization","WrappedComponent","WithTeams","useTeams","displayName","getDisplayName","withTeams","space","p","theme","background","fontSizeExtraLarge","Input","formPadding","md","paddingLeft","PlatformIcon","subText","NewProject","Container","className","Content"],"sourceRoot":""}