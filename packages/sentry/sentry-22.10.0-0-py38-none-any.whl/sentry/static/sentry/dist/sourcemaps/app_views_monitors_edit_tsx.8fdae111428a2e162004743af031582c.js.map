{"version":3,"file":"chunks/app_views_monitors_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/monitors/edit.tsx","webpack:///./app/views/monitors/monitorForm.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport AsyncView from 'sentry/views/asyncView';\n\nimport MonitorForm from './monitorForm';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{monitorId: string; orgId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  monitor: Monitor | null;\n};\n\nexport default class EditMonitor extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    return [['monitor', `/monitors/${params.monitorId}/`]];\n  }\n\n  onUpdate = (data: Monitor) =>\n    this.setState(state => ({monitor: {...state.monitor, ...data}}));\n\n  onSubmitSuccess = (data: Monitor) =>\n    browserHistory.push(`/organizations/${this.props.params.orgId}/monitors/${data.id}/`);\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;\n    }\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  renderBody() {\n    const {monitor} = this.state;\n\n    if (monitor === null) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <h1>Edit Monitor</h1>\n\n        <MonitorForm\n          monitor={monitor}\n          apiMethod=\"PUT\"\n          apiEndpoint={`/monitors/${monitor.id}/`}\n          onSubmitSuccess={this.onSubmitSuccess}\n        />\n      </Fragment>\n    );\n  }\n}\n","import {Component, Fragment} from 'react';\nimport {Observer} from 'mobx-react';\n\nimport Access from 'sentry/components/acl/access';\nimport Field from 'sentry/components/forms/field';\nimport NumberField from 'sentry/components/forms/fields/numberField';\nimport SelectField from 'sentry/components/forms/fields/selectField';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {PageFilters, Project, SelectValue} from 'sentry/types';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {Monitor, MonitorConfig, MonitorTypes, ScheduleType} from './types';\n\nconst SCHEDULE_TYPES: SelectValue<ScheduleType>[] = [\n  {value: 'crontab', label: 'Crontab'},\n  {value: 'interval', label: 'Interval'},\n];\n\nconst MONITOR_TYPES: SelectValue<MonitorTypes>[] = [\n  {value: 'cron_job', label: 'Cron Job'},\n];\n\nconst INTERVALS: SelectValue<string>[] = [\n  {value: 'minute', label: 'minute(s)'},\n  {value: 'hour', label: 'hour(s)'},\n  {value: 'day', label: 'day(s)'},\n  {value: 'week', label: 'week(s)'},\n  {value: 'month', label: 'month(s)'},\n  {value: 'year', label: 'year(s)'},\n];\n\ntype Props = {\n  apiEndpoint: string;\n  apiMethod: Form['props']['apiMethod'];\n  onSubmitSuccess: Form['props']['onSubmitSuccess'];\n  projects: Project[];\n  selection: PageFilters;\n  monitor?: Monitor;\n};\n\ntype TransformedData = {\n  config?: Partial<MonitorConfig>;\n};\n\nfunction transformData(_data: Record<string, any>, model: FormModel) {\n  return model.fields.toJSON().reduce<TransformedData>((data, [k, v]) => {\n    if (k.indexOf('config.') !== 0) {\n      data[k] = v;\n      return data;\n    }\n\n    if (!data.config) {\n      data.config = {};\n    }\n    if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n      if (!Array.isArray(data.config.schedule)) {\n        data.config.schedule = [null, null];\n      }\n    }\n\n    if (k === 'config.schedule.frequency') {\n      data.config!.schedule![0] = parseInt(v as string, 10);\n    } else if (k === 'config.schedule.interval') {\n      data.config!.schedule![1] = v;\n    } else {\n      data.config[k.substr(7)] = v;\n    }\n\n    return data;\n  }, {});\n}\n\nclass MonitorForm extends Component<Props> {\n  form = new FormModel({transformData});\n\n  formDataFromConfig(type: MonitorTypes, config: MonitorConfig) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  render() {\n    const {monitor} = this.props;\n    const selectedProjectId = this.props.selection.projects[0];\n    const selectedProject = selectedProjectId\n      ? this.props.projects.find(p => p.id === selectedProjectId + '')\n      : null;\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Form\n            allowUndo\n            requireChanges\n            apiEndpoint={this.props.apiEndpoint}\n            apiMethod={this.props.apiMethod}\n            model={this.form}\n            initialData={\n              monitor\n                ? {\n                    name: monitor.name,\n                    type: monitor.type,\n                    project: monitor.project.slug,\n                    ...this.formDataFromConfig(monitor.type, monitor.config),\n                  }\n                : {\n                    project: selectedProject ? selectedProject.slug : null,\n                  }\n            }\n            onSubmitSuccess={this.props.onSubmitSuccess}\n          >\n            <Panel>\n              <PanelHeader>{t('Details')}</PanelHeader>\n\n              <PanelBody>\n                {monitor && (\n                  <Field label={t('ID')}>\n                    <div className=\"controls\">\n                      <TextCopyInput>{monitor.id}</TextCopyInput>\n                    </div>\n                  </Field>\n                )}\n                <SelectField\n                  name=\"project\"\n                  label={t('Project')}\n                  disabled={!hasAccess}\n                  options={this.props.projects\n                    .filter(p => p.isMember)\n                    .map(p => ({value: p.slug, label: p.slug}))}\n                  required\n                />\n                <TextField\n                  name=\"name\"\n                  placeholder={t('My Cron Job')}\n                  label={t('Name')}\n                  disabled={!hasAccess}\n                  required\n                />\n              </PanelBody>\n            </Panel>\n            <Panel>\n              <PanelHeader>{t('Config')}</PanelHeader>\n\n              <PanelBody>\n                <SelectField\n                  name=\"type\"\n                  label={t('Type')}\n                  disabled={!hasAccess}\n                  options={MONITOR_TYPES}\n                  required\n                />\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('type')) {\n                      case 'cron_job':\n                        return (\n                          <Fragment>\n                            <NumberField\n                              name=\"config.max_runtime\"\n                              label={t('Max Runtime')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The maximum runtime (in minutes) a check-in is allowed before it's marked as a failure.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                            <SelectField\n                              name=\"config.schedule_type\"\n                              label={t('Schedule Type')}\n                              disabled={!hasAccess}\n                              options={SCHEDULE_TYPES}\n                              required\n                            />\n                          </Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('config.schedule_type')) {\n                      case 'crontab':\n                        return (\n                          <Fragment>\n                            <TextField\n                              name=\"config.schedule\"\n                              label={t('Schedule')}\n                              disabled={!hasAccess}\n                              placeholder=\"*/5 * * * *\"\n                              required\n                              help={tct(\n                                'Changes to the schedule will apply on the next check-in. See [link:Wikipedia] for crontab syntax.',\n                                {\n                                  link: <a href=\"https://en.wikipedia.org/wiki/Cron\" />,\n                                }\n                              )}\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </Fragment>\n                        );\n                      case 'interval':\n                        return (\n                          <Fragment>\n                            <NumberField\n                              name=\"config.schedule.frequency\"\n                              label={t('Frequency')}\n                              disabled={!hasAccess}\n                              placeholder=\"e.g. 1\"\n                              required\n                            />\n                            <SelectField\n                              name=\"config.schedule.interval\"\n                              label={t('Interval')}\n                              disabled={!hasAccess}\n                              options={INTERVALS}\n                              required\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n              </PanelBody>\n            </Panel>\n          </Form>\n        )}\n      </Access>\n    );\n  }\n}\n\nexport default withPageFilters(withProjects(MonitorForm));\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","EditMonitor","data","setState","state","monitor","browserHistory","props","params","orgId","id","getEndpoints","monitorId","name","renderBody","Fragment","apiMethod","apiEndpoint","onSubmitSuccess","SCHEDULE_TYPES","value","label","MONITOR_TYPES","INTERVALS","transformData","_data","model","fields","toJSON","reduce","k","v","indexOf","config","Array","isArray","schedule","parseInt","substr","MonitorForm","Component","FormModel","formDataFromConfig","type","rv","schedule_type","checkin_margin","max_runtime","selectedProjectId","selection","projects","selectedProject","find","p","access","hasAccess","allowUndo","requireChanges","form","initialData","project","slug","t","className","disabled","options","filter","isMember","map","required","placeholder","getValue","help","tct","link","href","withPageFilters","withProjects"],"sourceRoot":""}