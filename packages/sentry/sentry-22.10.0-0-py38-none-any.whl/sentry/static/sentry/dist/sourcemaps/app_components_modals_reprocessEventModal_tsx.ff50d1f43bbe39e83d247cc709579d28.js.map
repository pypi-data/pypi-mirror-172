{"version":3,"file":"chunks/app_components_modals_reprocessEventModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"w2BAeA,MAAMA,EAAU,EACdC,EAAAA,EAAAA,IACE,+IACA,CAACC,QAAQ,wBAEXD,EAAAA,EAAAA,IACE,qJACA,CACEC,QAAQ,qBACRC,MACE,QAAC,IAAD,CAAcC,KAAK,uGAIzBC,EAAAA,EAAAA,GACE,0FAIEC,EAA6C,CACjD,CAAC,QAAQD,EAAAA,EAAAA,GAAE,SACX,CAAC,UAAUA,EAAAA,EAAAA,GAAE,YAcf,MAAME,UAA+BC,EAAAA,UAAwB,uDAC5C,CAACC,eAAWC,KADgC,6BAG3C,KACd,MAAM,WAACC,GAAcC,KAAKC,MAE1BF,IACAG,OAAOC,SAASC,QAAhB,KAPyD,qCAclCP,IACvBG,KAAKK,SAAS,CAACR,UAAWS,OAAOT,SAAcC,GAA/C,GAfyD,CAU3DS,eACEC,EAAAA,EAAAA,KAAgBf,EAAAA,EAAAA,GAAE,iDACnB,CAMDgB,SACE,MAAM,aAACC,EAAD,OAAeC,EAAf,KAAuBC,EAAvB,WAA6Bb,EAA7B,QAAyCc,GAAWb,KAAKC,OACzD,UAACJ,GAAaG,KAAKc,MAEnBC,EAAY,kBADFL,EAAaM,eACwBH,kBAC/CI,GAAQxB,EAAAA,EAAAA,GAAE,oBAEhB,OACE,QAAC,EAAAyB,SAAD,YACE,QAACP,EAAD,CAAQQ,aAAW,EAAnB,SAAqBF,KACrB,QAACL,EAAD,YACE,QAACQ,EAAD,WACG3B,EAAAA,EAAAA,GACC,mHAGJ,QAAC4B,EAAD,CAAYC,OAAO,SAAnB,SACGlC,EAAQmC,KAAI,CAACC,EAAQC,KACpB,QAAC,IAAD,UAAuBD,GAARC,QAGnB,QAACL,EAAD,WACG/B,EAAAA,EAAAA,IAAI,kEAAmE,CACtEE,MACE,QAAC,IAAD,CAAcC,KAAK,uEAIzB,QAAC,IAAD,CACEkC,YAAaT,EACbU,YAAaZ,EACba,UAAU,OACVC,YAAa,CAAChC,eAAWC,EAAWgC,gBAAiB,QACrDC,gBAAiB/B,KAAKgC,cACtBC,cAAejC,KAAKO,YACpB2B,SAAUnC,EACVoC,YAAY,eARd,WAUE,QAAC,IAAD,CACEC,KAAK,YACLC,OAAO5C,EAAAA,EAAAA,GAAE,sCACT6C,MAAM7C,EAAAA,EAAAA,GAAE,kEACR8C,aAAa9C,EAAAA,EAAAA,GAAE,wBACf+C,SAAUxC,KAAKyC,sBACfC,IAAK,KAGP,QAAC,IAAD,CACEC,cAAY,EACZN,OAAO5C,EAAAA,EAAAA,GAAE,oBACT6C,MAAM7C,EAAAA,EAAAA,GAAE,wDACR2C,KAAK,kBACLQ,QAASlD,EACTmD,cAAwB/C,IAAdD,YAMrB,EA7EGF,EAAAA,YAAAA,yBAgFN,UAEMyB,GAAe,OAAO,IAAP,sBAAH,cACH0B,GAAKA,EAAEC,MAAMC,eADV,KAIZ3B,GAAa,OAAO4B,EAAAA,EAAP,sBAAH,QACPC,EAAAA,EAAAA,GAAM,GADC,mBAEGA,EAAAA,EAAAA,GAAM,GAFT,eAGDJ,GAAKA,EAAEC,MAAMI,gBAHZ,I","sources":["webpack:///./app/components/modals/reprocessEventModal.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport NumberField from 'sentry/components/forms/fields/numberField';\nimport RadioField from 'sentry/components/forms/fields/radioField';\nimport Form from 'sentry/components/forms/form';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Group, Organization} from 'sentry/types';\n\nconst impacts = [\n  tct(\n    \"[strong:Quota applies.] Every event you choose to reprocess counts against your plan's quota. Rate limits and spike protection do not apply.\",\n    {strong: <strong />}\n  ),\n  tct(\n    '[strong:Attachment storage required.] If your events come from minidumps or unreal crash reports, you must have [link:attachment storage] enabled.',\n    {\n      strong: <strong />,\n      link: (\n        <ExternalLink href=\"https://docs.sentry.io/platforms/native/enriching-events/attachments/#crash-reports-and-privacy\" />\n      ),\n    }\n  ),\n  t(\n    'Please wait one hour after upload before attempting to reprocess missing debug files.'\n  ),\n];\n\nconst remainingEventsChoices: [string, string][] = [\n  ['keep', t('Keep')],\n  ['delete', t('Delete')],\n];\n\nexport type ReprocessEventModalOptions = {\n  groupId: Group['id'];\n  organization: Organization;\n};\n\ntype Props = ModalRenderProps & ReprocessEventModalOptions;\n\ntype State = {\n  maxEvents?: number;\n};\n\nclass ReprocessingEventModal extends Component<Props, State> {\n  state: State = {maxEvents: undefined};\n\n  handleSuccess = () => {\n    const {closeModal} = this.props;\n\n    closeModal();\n    window.location.reload();\n  };\n\n  handleError() {\n    addErrorMessage(t('Failed to reprocess. Please check your input.'));\n  }\n\n  handleMaxEventsChange = (maxEvents: string) => {\n    this.setState({maxEvents: Number(maxEvents) || undefined});\n  };\n\n  render() {\n    const {organization, Header, Body, closeModal, groupId} = this.props;\n    const {maxEvents} = this.state;\n    const orgSlug = organization.slug;\n    const endpoint = `/organizations/${orgSlug}/issues/${groupId}/reprocessing/`;\n    const title = t('Reprocess Events');\n\n    return (\n      <Fragment>\n        <Header closeButton>{title}</Header>\n        <Body>\n          <Introduction>\n            {t(\n              'Reprocessing applies new debug files and grouping enhancements to this Issue. Please consider these impacts:'\n            )}\n          </Introduction>\n          <StyledList symbol=\"bullet\">\n            {impacts.map((impact, index) => (\n              <ListItem key={index}>{impact}</ListItem>\n            ))}\n          </StyledList>\n          <Introduction>\n            {tct('For more information, please refer to [link:the documentation.]', {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/error-monitoring/reprocessing/\" />\n              ),\n            })}\n          </Introduction>\n          <Form\n            submitLabel={title}\n            apiEndpoint={endpoint}\n            apiMethod=\"POST\"\n            initialData={{maxEvents: undefined, remainingEvents: 'keep'}}\n            onSubmitSuccess={this.handleSuccess}\n            onSubmitError={this.handleError}\n            onCancel={closeModal}\n            footerClass=\"modal-footer\"\n          >\n            <NumberField\n              name=\"maxEvents\"\n              label={t('Number of events to be reprocessed')}\n              help={t('If you set a limit, we will reprocess your most recent events.')}\n              placeholder={t('Reprocess all events')}\n              onChange={this.handleMaxEventsChange}\n              min={1}\n            />\n\n            <RadioField\n              orientInline\n              label={t('Remaining events')}\n              help={t('What to do with the events that are not reprocessed.')}\n              name=\"remainingEvents\"\n              choices={remainingEventsChoices}\n              disabled={maxEvents === undefined}\n            />\n          </Form>\n        </Body>\n      </Fragment>\n    );\n  }\n}\n\nexport default ReprocessingEventModal;\n\nconst Introduction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst StyledList = styled(List)`\n  gap: ${space(1)};\n  margin-bottom: ${space(4)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n"],"names":["impacts","tct","strong","link","href","t","remainingEventsChoices","ReprocessingEventModal","Component","maxEvents","undefined","closeModal","this","props","window","location","reload","setState","Number","handleError","addErrorMessage","render","organization","Header","Body","groupId","state","endpoint","slug","title","Fragment","closeButton","Introduction","StyledList","symbol","map","impact","index","submitLabel","apiEndpoint","apiMethod","initialData","remainingEvents","onSubmitSuccess","handleSuccess","onSubmitError","onCancel","footerClass","name","label","help","placeholder","onChange","handleMaxEventsChange","min","orientInline","choices","disabled","p","theme","fontSizeLarge","List","space","fontSizeMedium"],"sourceRoot":""}