{"version":3,"file":"chunks/app_views_settings_organizationApiKeys_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/linkWithConfirmation.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeysList.tsx","webpack:///./app/views/settings/organizationApiKeys/index.tsx"],"sourcesContent":["import {ButtonProps} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\n\nimport Anchor from './anchor';\n\ntype Props = {\n  message: React.ReactNode;\n  onConfirm: () => void;\n  title: string;\n  children?: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  priority?: ButtonProps['priority'];\n};\n\n/**\n * <Confirm> is a more generic version of this component\n */\nfunction LinkWithConfirmation({\n  className,\n  disabled,\n  title,\n  children,\n  ...otherProps\n}: Props) {\n  return (\n    <Confirm {...otherProps} disabled={disabled}>\n      <Anchor href=\"#\" className={className} disabled={disabled} title={title}>\n        {children}\n      </Anchor>\n    </Confirm>\n  );\n}\n\nexport default LinkWithConfirmation;\n","import {PlainRoute} from 'react-router';\nimport {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: PlainRoute[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {PlainRoute, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport LinkWithConfirmation from 'sentry/components/links/linkWithConfirmation';\nimport {PanelTable} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {IconAdd, IconDelete} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport {DeprecatedApiKey} from './types';\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  /**\n   * Busy differs from loading in that busy is a result of an action like removing\n   */\n  busy: boolean;\n  keys: DeprecatedApiKey[];\n\n  /**\n   * Loading refers to fetching the API Keys\n   */\n  loading: boolean;\n\n  onAddApiKey: () => {};\n\n  onRemove: (id: DeprecatedApiKey['id']) => {};\n  routes: PlainRoute[];\n};\n\nfunction OrganizationApiKeysList({\n  params,\n  routes,\n  keys,\n  busy,\n  loading,\n  onAddApiKey,\n  onRemove,\n}: Props) {\n  const hasKeys = keys && keys.length;\n\n  const action = (\n    <Button\n      priority=\"primary\"\n      size=\"sm\"\n      icon={<IconAdd size=\"xs\" isCircled />}\n      busy={busy}\n      disabled={busy}\n      onClick={onAddApiKey}\n    >\n      {t('New API Key')}\n    </Button>\n  );\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('API Keys')} action={action} />\n\n      <TextBlock>\n        {tct(\n          `API keys grant access to the [api:developer web API].\n          If you're looking to configure a Sentry client, you'll need a\n          client key which is available in your project settings.`,\n          {\n            api: <ExternalLink href=\"https://docs.sentry.io/api/\" />,\n          }\n        )}\n      </TextBlock>\n\n      <AlertLink to=\"/settings/account/api/auth-tokens/\" priority=\"info\">\n        {tct(\n          'Until Sentry supports OAuth, you might want to switch to using [tokens:Auth Tokens] instead.',\n          {\n            tokens: <u />,\n          }\n        )}\n      </AlertLink>\n\n      <PanelTable\n        isLoading={loading}\n        isEmpty={!hasKeys}\n        emptyMessage={t('No API keys for this organization')}\n        headers={[t('Name'), t('Key'), t('Actions')]}\n      >\n        {keys &&\n          keys.map(({id, key, label}) => {\n            const apiDetailsUrl = recreateRoute(`${id}/`, {\n              params,\n              routes,\n            });\n\n            return (\n              <Fragment key={key}>\n                <Cell>\n                  <Link to={apiDetailsUrl}>{label}</Link>\n                </Cell>\n\n                <TextCopyInput size=\"sm\" monospace>\n                  {key}\n                </TextCopyInput>\n\n                <Cell>\n                  <LinkWithConfirmation\n                    aria-label={t('Remove API Key')}\n                    className=\"btn btn-default btn-sm\"\n                    onConfirm={() => onRemove(id)}\n                    message={t('Are you sure you want to remove this API key?')}\n                    title={t('Remove API Key?')}\n                  >\n                    <IconDelete size=\"xs\" css={{position: 'relative', top: '2px'}} />\n                  </LinkWithConfirmation>\n                </Cell>\n              </Fragment>\n            );\n          })}\n      </PanelTable>\n    </div>\n  );\n}\n\nconst Cell = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport default OrganizationApiKeysList;\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport OrganizationApiKeysList from './organizationApiKeysList';\nimport {DeprecatedApiKey} from './types';\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  keys: DeprecatedApiKey[];\n} & AsyncView['state'];\n\n/**\n * API Keys are deprecated, but there may be some legacy customers that still use it\n */\nclass OrganizationApiKeys extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['keys', `/organizations/${this.props.params.orgId}/api-keys/`]];\n  }\n\n  getTitle() {\n    return routeTitleGen(t('API Keys'), this.props.organization.slug, false);\n  }\n\n  handleRemove = async (id: string) => {\n    const oldKeys = [...this.state.keys];\n\n    this.setState(state => ({\n      keys: state.keys.filter(({id: existingId}) => existingId !== id),\n    }));\n\n    try {\n      await this.api.requestPromise(\n        `/organizations/${this.props.params.orgId}/api-keys/${id}/`,\n        {\n          method: 'DELETE',\n          data: {},\n        }\n      );\n    } catch {\n      this.setState({keys: oldKeys, busy: false});\n      addErrorMessage(t('Error removing key'));\n    }\n  };\n\n  handleAddApiKey = async () => {\n    this.setState({\n      busy: true,\n    });\n\n    try {\n      const data = await this.api.requestPromise(\n        `/organizations/${this.props.params.orgId}/api-keys/`,\n        {\n          method: 'POST',\n          data: {},\n        }\n      );\n\n      if (data) {\n        this.setState({busy: false});\n        browserHistory.push(\n          recreateRoute(`${data.id}/`, {\n            params: this.props.params,\n            routes: this.props.routes,\n          })\n        );\n        addSuccessMessage(t(`Created a new API key \"${data.label}\"`));\n      }\n    } catch {\n      this.setState({busy: false});\n    }\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    return (\n      <OrganizationApiKeysList\n        loading={this.state.loading}\n        busy={this.state.busy}\n        keys={this.state.keys}\n        onRemove={this.handleRemove}\n        onAddApiKey={this.handleAddApiKey}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(OrganizationApiKeys);\n"],"names":["LinkWithConfirmation","className","disabled","title","children","otherProps","href","recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","OrganizationApiKeysList","keys","busy","loading","onAddApiKey","onRemove","hasKeys","length","action","priority","size","icon","isCircled","onClick","t","tct","api","tokens","isLoading","isEmpty","emptyMessage","headers","id","key","label","apiDetailsUrl","Fragment","Cell","monospace","onConfirm","message","css","OrganizationApiKeys","async","oldKeys","state","setState","filter","existingId","requestPromise","props","orgId","method","data","addErrorMessage","browserHistory","addSuccessMessage","getEndpoints","routeTitleGen","organization","slug","renderLoading","renderBody","handleRemove","handleAddApiKey","withOrganization"],"sourceRoot":""}