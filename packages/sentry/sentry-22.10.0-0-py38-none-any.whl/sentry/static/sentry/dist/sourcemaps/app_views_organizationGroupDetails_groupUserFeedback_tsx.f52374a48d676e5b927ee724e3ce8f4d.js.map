{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupUserFeedback_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/organizationGroupDetails/groupUserFeedback.tsx","webpack:///./app/views/organizationGroupDetails/utils.tsx","webpack:///../node_modules/lodash/orderBy.js"],"sourcesContent":["import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport isEqual from 'lodash/isEqual';\n\nimport EventUserFeedback from 'sentry/components/events/userFeedback';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Group, Organization, Project, UserReport} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport {UserFeedbackEmpty} from 'sentry/views/userFeedback/userFeedbackEmpty';\n\nimport {fetchGroupUserReports} from './utils';\n\ntype RouteParams = {\n  groupId: string;\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  environments: string[];\n  group: Group;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  reportList: UserReport[];\n  pageLinks?: string | null;\n};\n\nclass GroupUserFeedback extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    reportList: [],\n    pageLinks: '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      !isEqual(prevProps.params, this.props.params) ||\n      prevProps.location.pathname !== this.props.location.pathname ||\n      prevProps.location.search !== this.props.location.search\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchGroupUserReports(this.props.group.id, {\n      ...this.props.params,\n      cursor: this.props.location.query.cursor || '',\n    })\n      .then(([data, _, resp]) => {\n        this.setState({\n          error: false,\n          loading: false,\n          reportList: data,\n          pageLinks: resp?.getResponseHeader('Link'),\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      });\n  };\n\n  render() {\n    const {reportList, loading, error} = this.state;\n    const {organization, group} = this.props;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (reportList.length) {\n      return (\n        <Layout.Body>\n          <Layout.Main>\n            {reportList.map((item, idx) => (\n              <EventUserFeedback\n                key={idx}\n                report={item}\n                orgId={organization.slug}\n                issueId={group.id}\n              />\n            ))}\n            <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n          </Layout.Main>\n        </Layout.Body>\n      );\n    }\n\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <UserFeedbackEmpty projectIds={[group.project.id]} />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nexport default withOrganization(GroupUserFeedback);\n","import orderBy from 'lodash/orderBy';\n\nimport {bulkUpdate} from 'sentry/actionCreators/group';\nimport {Client} from 'sentry/api';\nimport {t, tct} from 'sentry/locale';\nimport {Group, GroupActivity} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\n\n/**\n * Fetches group data and mark as seen\n *\n * @param orgId organization slug\n * @param groupId groupId\n * @param eventId eventId or \"latest\" or \"oldest\"\n * @param envNames\n * @param projectId project slug required for eventId that is not latest or oldest\n */\nexport async function fetchGroupEvent(\n  api: Client,\n  orgId: string,\n  groupId: string,\n  eventId: string,\n  envNames: string[],\n  projectId?: string\n): Promise<Event> {\n  const url =\n    eventId === 'latest' || eventId === 'oldest'\n      ? `/issues/${groupId}/events/${eventId}/`\n      : `/projects/${orgId}/${projectId}/events/${eventId}/?group_id=${groupId}`;\n\n  const query: {environment?: string[]} = {};\n  if (envNames.length !== 0) {\n    query.environment = envNames;\n  }\n\n  const data = await api.requestPromise(url, {query});\n  return data;\n}\n\nexport function markEventSeen(\n  api: Client,\n  orgId: string,\n  projectId: string,\n  groupId: string\n) {\n  bulkUpdate(\n    api,\n    {\n      orgId,\n      projectId,\n      itemIds: [groupId],\n      failSilently: true,\n      data: {hasSeen: true},\n    },\n    {}\n  );\n}\n\nexport function fetchGroupUserReports(groupId: string, query: Record<string, string>) {\n  const api = new Client();\n\n  return api.requestPromise(`/issues/${groupId}/user-reports/`, {\n    includeAllArgs: true,\n    query,\n  });\n}\n\n/**\n * Returns the environment name for an event or null\n *\n * @param event\n */\nexport function getEventEnvironment(event: Event) {\n  const tag = event.tags.find(({key}) => key === 'environment');\n\n  return tag ? tag.value : null;\n}\n\nconst SUBSCRIPTION_REASONS = {\n  commented: t(\n    \"You're receiving workflow notifications because you have commented on this issue.\"\n  ),\n  assigned: t(\n    \"You're receiving workflow notifications because you were assigned to this issue.\"\n  ),\n  bookmarked: t(\n    \"You're receiving workflow notifications because you have bookmarked this issue.\"\n  ),\n  changed_status: t(\n    \"You're receiving workflow notifications because you have changed the status of this issue.\"\n  ),\n  mentioned: t(\n    \"You're receiving workflow notifications because you have been mentioned in this issue.\"\n  ),\n};\n\n/**\n * @param group\n * @param removeLinks add/remove links to subscription reasons text (default: false)\n * @returns Reason for subscription\n */\nexport function getSubscriptionReason(group: Group, removeLinks = false) {\n  if (group.subscriptionDetails && group.subscriptionDetails.disabled) {\n    return tct('You have [link:disabled workflow notifications] for this project.', {\n      link: removeLinks ? <span /> : <a href=\"/account/settings/notifications/\" />,\n    });\n  }\n\n  if (!group.isSubscribed) {\n    return t('Subscribe to workflow notifications for this issue');\n  }\n\n  if (group.subscriptionDetails) {\n    const {reason} = group.subscriptionDetails;\n    if (reason === 'unknown') {\n      return t(\n        \"You're receiving workflow notifications because you are subscribed to this issue.\"\n      );\n    }\n\n    if (reason && SUBSCRIPTION_REASONS.hasOwnProperty(reason)) {\n      return SUBSCRIPTION_REASONS[reason];\n    }\n  }\n\n  return tct(\n    \"You're receiving updates because you are [link:subscribed to workflow notifications] for this project.\",\n    {\n      link: removeLinks ? <span /> : <a href=\"/account/settings/notifications/\" />,\n    }\n  );\n}\n\nexport function getGroupMostRecentActivity(activities: GroupActivity[]) {\n  // Most recent activity\n  return orderBy([...activities], ({dateCreated}) => new Date(dateCreated), ['desc'])[0];\n}\n\nexport enum ReprocessingStatus {\n  REPROCESSED_AND_HASNT_EVENT = 'reprocessed_and_hasnt_event',\n  REPROCESSED_AND_HAS_EVENT = 'reprocessed_and_has_event',\n  REPROCESSING = 'reprocessing',\n  NO_STATUS = 'no_status',\n}\n\n// Reprocessing Checks\nexport function getGroupReprocessingStatus(\n  group: Group,\n  mostRecentActivity?: GroupActivity\n) {\n  const {status, count, activity: activities} = group;\n  const groupCount = Number(count);\n\n  switch (status) {\n    case 'reprocessing':\n      return ReprocessingStatus.REPROCESSING;\n    case 'unresolved': {\n      const groupMostRecentActivity =\n        mostRecentActivity ?? getGroupMostRecentActivity(activities);\n      if (groupMostRecentActivity?.type === 'reprocess') {\n        if (groupCount === 0) {\n          return ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT;\n        }\n        return ReprocessingStatus.REPROCESSED_AND_HAS_EVENT;\n      }\n      return ReprocessingStatus.NO_STATUS;\n    }\n    default:\n      return ReprocessingStatus.NO_STATUS;\n  }\n}\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n"],"names":["GroupUserFeedback","Component","loading","error","reportList","pageLinks","this","setState","fetchGroupUserReports","props","group","id","params","cursor","location","query","then","data","_","resp","getResponseHeader","catch","componentDidMount","fetchData","componentDidUpdate","prevProps","isEqual","pathname","search","render","state","organization","onRetry","length","map","item","idx","report","orgId","slug","issueId","fullWidth","projectIds","project","withOrganization","async","fetchGroupEvent","api","groupId","eventId","envNames","projectId","url","environment","requestPromise","markEventSeen","bulkUpdate","itemIds","failSilently","hasSeen","Client","includeAllArgs","getEventEnvironment","event","tag","tags","find","key","value","SUBSCRIPTION_REASONS","commented","t","assigned","bookmarked","changed_status","mentioned","getSubscriptionReason","removeLinks","subscriptionDetails","disabled","tct","link","href","isSubscribed","reason","hasOwnProperty","getGroupMostRecentActivity","activities","orderBy","dateCreated","Date","ReprocessingStatus","getGroupReprocessingStatus","mostRecentActivity","status","count","activity","groupCount","Number","REPROCESSING","type","REPROCESSED_AND_HASNT_EVENT","REPROCESSED_AND_HAS_EVENT","NO_STATUS","baseOrderBy","isArray","module","exports","collection","iteratees","orders","guard","undefined"],"sourceRoot":""}