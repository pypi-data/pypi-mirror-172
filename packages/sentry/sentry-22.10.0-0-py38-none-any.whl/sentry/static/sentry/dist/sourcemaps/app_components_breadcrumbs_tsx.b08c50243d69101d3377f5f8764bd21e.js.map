{"version":3,"file":"chunks/app_components_breadcrumbs_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/crumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/divider.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport {IconChevron} from 'sentry/icons';\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\nimport BreadcrumbDropdown, {\n  BreadcrumbDropdownProps,\n} from 'sentry/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nexport interface Crumb {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n\n  /**\n   * It will keep the page filter values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preservePageFilters?: boolean;\n\n  /**\n   * Link of the crumb\n   */\n  to?: LinkProps['to'] | null;\n}\n\nexport interface CrumbDropdown {\n  /**\n   * Items of the crumb dropdown\n   */\n  items: BreadcrumbDropdownProps['items'];\n\n  /**\n   * Name of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Callback function for when an item is selected\n   */\n  onSelect: BreadcrumbDropdownProps['onSelect'];\n}\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: (Crumb | CrumbDropdown)[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n}\n\nfunction isCrumbDropdown(crumb: Crumb | CrumbDropdown): crumb is CrumbDropdown {\n  return (crumb as CrumbDropdown).items !== undefined;\n}\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    const lastCrumb = crumbs[crumbs.length - 1];\n    if (!isCrumbDropdown(lastCrumb)) {\n      lastCrumb.to = null;\n    }\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map((crumb, index) => {\n        if (isCrumbDropdown(crumb)) {\n          const {label, ...crumbProps} = crumb;\n          return (\n            <BreadcrumbDropdown\n              key={index}\n              isLast={index >= crumbs.length - 1}\n              route={{}}\n              name={label}\n              {...crumbProps}\n            />\n          );\n        }\n        const {label, to, preservePageFilters, key} = crumb;\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink\n                to={to}\n                preservePageFilters={preservePageFilters}\n                data-test-id=\"breadcrumb-link\"\n              >\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => css`\n  ${p.theme.overflowEllipsis}\n  font-size: ${p.theme.fontSizeLarge};\n  color: ${p.theme.gray300};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\ninterface BreadcrumbLinkProps {\n  to: LinkProps['to'];\n  children?: React.ReactNode;\n  preservePageFilters?: boolean;\n}\n\nconst BreadcrumbLink = styled(\n  ({preservePageFilters, to, ...props}: BreadcrumbLinkProps) =>\n    preservePageFilters ? (\n      <GlobalSelectionLink to={to as LocationDescriptor} {...props} />\n    ) : (\n      <Link to={to} {...props} />\n    )\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n  max-width: 400px;\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import {Component} from 'react';\n\nimport DropdownAutoCompleteMenu from 'sentry/components/dropdownAutoComplete/menu';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport Crumb from 'sentry/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'sentry/views/settings/components/settingsBreadcrumb/divider';\n\nimport {RouteWithName} from './types';\n\nconst EXIT_DELAY = 0;\n\ninterface AdditionalDropdownProps\n  extends Pick<\n    React.ComponentProps<typeof DropdownAutoCompleteMenu>,\n    'onChange' | 'busyItemsStillVisible'\n  > {}\n\nexport interface BreadcrumbDropdownProps extends AdditionalDropdownProps {\n  items: Item[];\n  name: React.ReactNode;\n  onSelect: (item: Item) => void;\n  route: RouteWithName;\n  enterDelay?: number;\n  hasMenu?: boolean;\n  isLast?: boolean;\n}\n\ntype State = {\n  isOpen: boolean;\n};\n\nclass BreadcrumbDropdown extends Component<BreadcrumbDropdownProps, State> {\n  state: State = {\n    isOpen: false,\n  };\n\n  componentWillUnmount() {\n    window.clearTimeout(this.enteringTimeout);\n    window.clearTimeout(this.leavingTimeout);\n  }\n\n  enteringTimeout: number | undefined = undefined;\n  leavingTimeout: number | undefined = undefined;\n\n  open = () => {\n    this.setState({isOpen: true});\n  };\n\n  close = () => {\n    this.setState({isOpen: false});\n  };\n\n  handleStateChange = () => {};\n\n  // Adds a delay when mouse hovers on actor (in this case the breadcrumb)\n  handleMouseEnterActor = () => {\n    window.clearTimeout(this.leavingTimeout);\n    window.clearTimeout(this.enteringTimeout);\n\n    this.enteringTimeout = window.setTimeout(\n      () => this.open(),\n      this.props.enterDelay ?? 0\n    );\n  };\n\n  // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open\n  handleMouseEnter = () => {\n    window.clearTimeout(this.leavingTimeout);\n    window.clearTimeout(this.enteringTimeout);\n    this.open();\n  };\n\n  // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for\n  // mouseLeave into\n  handleMouseLeave = () => {\n    window.clearTimeout(this.enteringTimeout);\n    this.leavingTimeout = window.setTimeout(() => this.close(), EXIT_DELAY);\n  };\n\n  // Close immediately when actor is clicked clicked\n  handleClickActor = () => {\n    this.close();\n  };\n\n  // Close immediately when clicked outside\n  handleClose = () => {\n    this.close();\n  };\n\n  render() {\n    const {hasMenu, route, isLast, name, items, onSelect, ...dropdownProps} = this.props;\n\n    return (\n      <DropdownAutoCompleteMenu\n        blendCorner={false}\n        onOpen={this.handleMouseEnter}\n        onClose={this.close}\n        isOpen={this.state.isOpen}\n        menuProps={{\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n        }}\n        items={items}\n        onSelect={onSelect}\n        virtualizedHeight={41}\n        {...dropdownProps}\n      >\n        {({getActorProps, actions, isOpen}) => (\n          <Crumb\n            {...getActorProps({\n              onClick: this.handleClickActor.bind(this, actions),\n              onMouseEnter: this.handleMouseEnterActor.bind(this, actions),\n              onMouseLeave: this.handleMouseLeave.bind(this, actions),\n            })}\n          >\n            <span>{name || route.name} </span>\n            <Divider isHover={hasMenu && isOpen} isLast={isLast} />\n          </Crumb>\n        )}\n      </DropdownAutoCompleteMenu>\n    );\n  }\n}\n\nexport default BreadcrumbDropdown;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nconst Crumb = styled('div')`\n  display: flex;\n  align-items: center;\n  position: relative;\n  font-size: 18px;\n  color: ${p => p.theme.subText};\n  padding-right: ${space(1)};\n  cursor: pointer;\n  white-space: nowrap;\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default Crumb;\n","import styled from '@emotion/styled';\n\nimport {IconChevron} from 'sentry/icons';\n\ntype Props = {\n  isHover?: boolean;\n  isLast?: boolean;\n};\n\nconst Divider = ({isHover, isLast}: Props) =>\n  isLast ? null : (\n    <StyledDivider>\n      <StyledIconChevron direction={isHover ? 'down' : 'right'} size=\"14px\" />\n    </StyledDivider>\n  );\n\nconst StyledIconChevron = styled(IconChevron)`\n  display: block;\n`;\n\nconst StyledDivider = styled('span')`\n  display: inline-block;\n  margin-left: 6px;\n  color: ${p => p.theme.gray200};\n  position: relative;\n`;\n\nexport default Divider;\n"],"names":["BreadcrumbList","space","isCrumbDropdown","crumb","undefined","items","Breadcrumbs","crumbs","linkLastItem","props","length","lastCrumb","to","map","index","label","crumbProps","isLast","route","name","preservePageFilters","key","labelKey","mapKey","Fragment","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","css","theme","overflowEllipsis","fontSizeLarge","gray300","textColor","subText","IconChevron","BreadcrumbDropdown","Component","isOpen","this","setState","window","clearTimeout","leavingTimeout","enteringTimeout","setTimeout","open","enterDelay","close","componentWillUnmount","render","hasMenu","onSelect","dropdownProps","blendCorner","onOpen","handleMouseEnter","onClose","state","menuProps","onMouseEnter","onMouseLeave","handleMouseLeave","virtualizedHeight","getActorProps","actions","onClick","handleClickActor","bind","handleMouseEnterActor","isHover","StyledIconChevron","StyledDivider","gray200"],"sourceRoot":""}