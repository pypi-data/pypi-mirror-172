{"version":3,"file":"chunks/app_components_events_eventCustomPerformanceMetrics_tsx-app_utils_discover_genericDiscoverQuery_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/eventCustomPerformanceMetrics.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport DropdownMenuControl from 'sentry/components/dropdownMenuControl';\nimport {Panel} from 'sentry/components/panels';\nimport {IconEllipsis} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  DURATION_UNITS,\n  FIELD_FORMATTERS,\n  PERCENTAGE_UNITS,\n  SIZE_UNITS,\n} from 'sentry/utils/discover/fieldRenderers';\nimport {isCustomMeasurement} from 'sentry/views/dashboardsV2/utils';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nexport enum EventDetailPageSource {\n  PERFORMANCE = 'performance',\n  DISCOVER = 'discover',\n}\n\ntype Props = {\n  event: Event;\n  location: Location;\n  organization: Organization;\n  source?: EventDetailPageSource;\n};\n\nfunction isNotMarkMeasurement(field: string) {\n  return !field.startsWith('mark.');\n}\n\nexport default function EventCustomPerformanceMetrics({\n  event,\n  location,\n  organization,\n  source,\n}: Props) {\n  const measurementNames = Object.keys(event.measurements ?? {})\n    .filter(name => isCustomMeasurement(`measurements.${name}`))\n    .filter(isNotMarkMeasurement)\n    .sort();\n\n  if (measurementNames.length === 0) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <SectionHeading>{t('Custom Performance Metrics')}</SectionHeading>\n      <Measurements>\n        {measurementNames.map(name => {\n          return (\n            <EventCustomPerformanceMetric\n              key={name}\n              event={event}\n              name={name}\n              location={location}\n              organization={organization}\n              source={source}\n            />\n          );\n        })}\n      </Measurements>\n    </Container>\n  );\n}\n\ntype EventCustomPerformanceMetricProps = Props & {\n  name: string;\n};\n\nexport function getFieldTypeFromUnit(unit) {\n  if (unit) {\n    if (DURATION_UNITS[unit]) {\n      return 'duration';\n    }\n    if (SIZE_UNITS[unit]) {\n      return 'size';\n    }\n    if (PERCENTAGE_UNITS.includes(unit)) {\n      return 'percentage';\n    }\n    if (unit === 'none') {\n      return 'integer';\n    }\n    return 'string';\n  }\n  return 'number';\n}\n\nfunction EventCustomPerformanceMetric({\n  event,\n  name,\n  location,\n  organization,\n  source,\n}: EventCustomPerformanceMetricProps) {\n  const {value, unit} = event.measurements?.[name] ?? {};\n  if (value === null) {\n    return null;\n  }\n\n  const fieldType = getFieldTypeFromUnit(unit);\n  const renderValue = fieldType === 'string' ? `${value} ${unit}` : value;\n  const rendered = fieldType\n    ? FIELD_FORMATTERS[fieldType].renderFunc(\n        name,\n        {[name]: renderValue},\n        {location, organization, unit}\n      )\n    : renderValue;\n\n  function generateLinkWithQuery(query: string) {\n    const eventView = EventView.fromLocation(location);\n    eventView.query = query;\n    switch (source) {\n      case EventDetailPageSource.PERFORMANCE:\n        return transactionSummaryRouteWithQuery({\n          orgSlug: organization.slug,\n          transaction: event.title,\n          projectID: event.projectID,\n          query: {query},\n        });\n      case EventDetailPageSource.DISCOVER:\n      default:\n        return eventView.getResultsViewUrlTarget(organization.slug);\n    }\n  }\n\n  // Some custom perf metrics have units.\n  // These custom perf metrics need to be adjusted to the correct value.\n  let customMetricValue = value;\n  if (typeof value === 'number' && unit && customMetricValue) {\n    if (Object.keys(SIZE_UNITS).includes(unit)) {\n      customMetricValue *= SIZE_UNITS[unit];\n    } else if (Object.keys(DURATION_UNITS).includes(unit)) {\n      customMetricValue *= DURATION_UNITS[unit];\n    }\n  }\n  return (\n    <StyledPanel>\n      <div>\n        <div>{name}</div>\n        <ValueRow>\n          <Value>{rendered}</Value>\n        </ValueRow>\n      </div>\n      <StyledDropdownMenuControl\n        items={[\n          {\n            key: 'includeEvents',\n            label: t('Show events with this value'),\n            to: generateLinkWithQuery(`measurements.${name}:${customMetricValue}`),\n          },\n          {\n            key: 'excludeEvents',\n            label: t('Hide events with this value'),\n            to: generateLinkWithQuery(`!measurements.${name}:${customMetricValue}`),\n          },\n          {\n            key: 'includeGreaterThanEvents',\n            label: t('Show events with values greater than'),\n            to: generateLinkWithQuery(`measurements.${name}:>${customMetricValue}`),\n          },\n          {\n            key: 'includeLessThanEvents',\n            label: t('Show events with values less than'),\n            to: generateLinkWithQuery(`measurements.${name}:<${customMetricValue}`),\n          },\n        ]}\n        triggerProps={{\n          'aria-label': t('Widget actions'),\n          size: 'xs',\n          borderless: true,\n          showChevron: false,\n          icon: <IconEllipsis direction=\"down\" size=\"sm\" />,\n        }}\n        position=\"bottom-end\"\n      />\n    </StyledPanel>\n  );\n}\n\nconst Measurements = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(1)};\n`;\n\nconst Container = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst StyledPanel = styled(Panel)`\n  padding: ${space(1)} ${space(1.5)};\n  margin-bottom: ${space(1)};\n  display: flex;\n`;\n\nconst ValueRow = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Value = styled('span')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nconst StyledDropdownMenuControl = styled(DropdownMenuControl)`\n  margin-left: auto;\n`;\n","import {Component, useContext} from 'react';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nimport useApi from '../useApi';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Appends a raw string to query to be able to sidestep the tokenizer.\n   * @deprecated\n   */\n  forceAppendRawQueryString?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  api: Client;\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n    api: new Client(),\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = getPayload(this.props);\n    const otherAPIPayload = getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {\n      queryBatching,\n      beforeFetch,\n      afterFetch,\n      didFetch,\n      eventView,\n      orgSlug,\n      route,\n      setError,\n    } = this.props;\n    const {api} = this.state;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(\n        api,\n        url,\n        apiPayload,\n        queryBatching\n      );\n\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams,\n  queryBatching?: QueryBatching\n): Promise<[T, string | undefined, ResponseMeta<T> | undefined]> {\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, url, {\n      query: params,\n      includeAllArgs: true,\n    });\n  }\n\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nfunction getPayload<T, P>(props: Props<T, P>) {\n  const {\n    cursor,\n    limit,\n    noPagination,\n    referrer,\n    getRequestPayload,\n    eventView,\n    location,\n    forceAppendRawQueryString,\n  } = props;\n  const payload = getRequestPayload\n    ? getRequestPayload(props)\n    : eventView.getEventsAPIPayload(location, forceAppendRawQueryString);\n\n  if (cursor) {\n    payload.cursor = cursor;\n  }\n  if (limit) {\n    payload.per_page = limit;\n  }\n  if (noPagination) {\n    payload.noPagination = noPagination;\n  }\n  if (referrer) {\n    payload.referrer = referrer;\n  }\n\n  Object.assign(payload, props.queryExtras ?? {});\n\n  return payload;\n}\n\nexport function useGenericDiscoverQuery<T, P>(props: Props<T, P>) {\n  const api = useApi();\n  const {orgSlug, route} = props;\n  const url = `/organizations/${orgSlug}/${route}/`;\n  const apiPayload = getPayload<T, P>(props);\n\n  return useQuery<T, QueryError>([route, apiPayload], async () => {\n    const [resp] = await doDiscoverQuery<T>(api, url, apiPayload, props.queryBatching);\n    return resp;\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n"],"names":["EventDetailPageSource","isNotMarkMeasurement","field","startsWith","EventCustomPerformanceMetrics","event","location","organization","source","measurementNames","Object","keys","measurements","filter","name","isCustomMeasurement","sort","length","Container","t","Measurements","map","EventCustomPerformanceMetric","getFieldTypeFromUnit","unit","DURATION_UNITS","SIZE_UNITS","PERCENTAGE_UNITS","value","fieldType","renderValue","rendered","FIELD_FORMATTERS","renderFunc","generateLinkWithQuery","query","eventView","EventView","PERFORMANCE","transactionSummaryRouteWithQuery","orgSlug","slug","transaction","title","projectID","DISCOVER","getResultsViewUrlTarget","customMetricValue","includes","StyledPanel","ValueRow","Value","StyledDropdownMenuControl","items","key","label","to","triggerProps","size","borderless","showChevron","icon","direction","position","space","p","theme","fontSizeMedium","Panel","fontSizeExtraLarge","DropdownMenuControl","QueryError","constructor","errorMessage","originalError","this","message","getOriginalError","_GenericDiscoverQuery","Component","isLoading","tableFetchID","undefined","error","tableData","pageLinks","api","Client","prevProps","thisAPIPayload","getPayload","props","otherAPIPayload","isAPIPayloadSimilar","limit","route","cursor","parseError","detail","responseJSON","async","queryBatching","beforeFetch","afterFetch","didFetch","setError","state","isValid","url","Symbol","apiPayload","setState","clear","data","resp","doDiscoverQuery","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","shouldRefetchData","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","performanceEventView","PerformanceEventViewContext","Error","_props","params","batchRequest","includeAllArgs","requestPromise","method","noPagination","referrer","getRequestPayload","forceAppendRawQueryString","payload","getEventsAPIPayload","per_page","assign","queryExtras","useGenericDiscoverQuery","useApi","useQuery","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","options","strict","Context","createContext","displayName","Provider","context"],"sourceRoot":""}