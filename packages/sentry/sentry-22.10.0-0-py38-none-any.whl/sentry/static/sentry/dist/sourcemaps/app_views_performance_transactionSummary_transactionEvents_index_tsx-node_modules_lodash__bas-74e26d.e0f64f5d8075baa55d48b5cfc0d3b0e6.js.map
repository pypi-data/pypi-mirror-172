{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionEvents_index_tsx-node_modules_lodash__bas-74e26d.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4RAKO,MAAMA,EAA4C,CACvD,CAACC,OAAOC,EAAAA,EAAAA,GAAE,WAAYC,MAAO,oBAC7B,CAACF,OAAOC,EAAAA,EAAAA,GAAE,WAAYC,MAAO,O,wVCiB/B,MAAMC,UAAkBC,EAAAA,UAAiB,kEAMrB,KAChB,MAAM,SAACC,EAAD,SAAWC,GAAYC,KAAKC,MAElCC,EAAAA,eAAAA,KAAoB,CAClBC,SAAUL,EAASK,SACnBC,MAAOC,EAA4BP,EAAUC,IAF/C,KATqC,kCAwBjBJ,IACpB,MAAM,SAACG,EAAD,SAAWC,GAAYC,KAAKC,MAElCC,EAAAA,eAAAA,KAAoB,CAClBC,SAAUL,EAASK,SACnBC,MAAO,IACFC,EAA4BP,EAAUC,GACzCO,WAAYX,IAJhB,GA3BqC,CACvCY,WACE,MAAM,SAACT,EAAD,SAAWC,GAAYC,KAAKC,MAClC,OAAOF,EAASS,KAAIC,GAAOX,EAASM,MAAMK,KAAMC,MAAKf,QAAmBgB,IAAVhB,GAC/D,CAWDiB,kBACE,MAAM,SAACd,GAAYE,KAAKC,MAElBK,EAAaR,EAASM,MAAME,YAC9BO,EAAAA,EAAAA,IAAaf,EAASM,MAAME,YAC5Bd,EAAAA,EAAAA,GAAAA,MACJ,OAAOA,EAAAA,EAAAA,MAAoBsB,GAAQA,EAAKnB,QAAUW,KAAed,EAAAA,EAAAA,EAClE,CAcDuB,SACE,MAAMC,EAAgB,CACpBT,SAAUP,KAAKO,WACfU,gBAAiBjB,KAAKiB,gBACtBC,aAAclB,KAAKY,kBACnBO,mBAAoBnB,KAAKmB,mBACzBC,cAAe5B,EAAAA,GAEjB,OAAOQ,KAAKC,MAAMoB,SAASL,EAC5B,EAGI,SAASX,EAA4BP,EAAoBC,GAC9D,MAAMK,EAA2B,IAAIN,EAASM,MAAOkB,YAAQX,GAM7D,cAJOP,EAAME,WAEbP,EAASwB,SAAQd,UAAcL,EAAMK,KAE9BL,CACR,CAxDKR,EAAAA,YAAAA,YA0DN,S,0yDCxCO,MAAM4B,EAA+C,EAC1D9B,EAAAA,EAAAA,GAAE,aACFA,EAAAA,EAAAA,GAAE,SACFA,EAAAA,EAAAA,GAAE,uBACFA,EAAAA,EAAAA,GAAE,mBACFA,EAAAA,EAAAA,GAAE,aACFA,EAAAA,EAAAA,GAAE,cAGJ,SAAS+B,EAAcxB,GACrB,MAAM,SACJH,EADI,aAEJ4B,EACAC,UAAWC,EAHP,gBAIJC,EAJI,6BAKJC,EALI,SAMJC,EANI,SAOJC,EAPI,gBAQJC,GACEhC,EAEE0B,EAAYC,EAAkBM,QAC9BC,EAAyBX,EAAyBY,QAEpDL,GACFI,EAAuBE,OAAO,EAAG,GAAG3C,EAAAA,EAAAA,GAAEqC,IAGxC,MAAMO,GAAmCC,EAAAA,EAAAA,IACvCT,EACAhC,GAQF,OALIwC,IACFX,EAAUvB,MAAS,GAAEuB,EAAUvB,SAASkC,IAAmCE,OAC3EL,EAAuBE,OAAO,EAAG,GAAG3C,EAAAA,EAAAA,GAAG,GAAEoC,iBAIzC,QAAC,KAAD,CAAaW,WAAS,EAAtB,WACE,QAACC,EAAD,IAAYzC,KACZ,QAAC,IAAD,CACEgC,gBAAiBA,EACjBN,UAAWA,EACXD,aAAcA,EACd5B,SAAUA,EACVkC,SAAUA,EACVW,aAAcR,EACdN,gBAAiBA,MAIxB,CAED,SAASa,EAAOzC,GACd,MAAM,UACJ0B,EADI,SAEJ7B,EAFI,aAGJ4B,EAHI,6BAIJI,EAJI,qCAKJc,EALI,wBAMJC,EANI,4BAOJC,EAPI,iBAQJC,GACE9C,EAiBEG,GAAQS,EAAAA,EAAAA,IAAaf,EAASM,MAAMA,MAAO,IAE3C4C,GAAsBC,EAAAA,EAAAA,IAC1BnB,EACAiB,GASF,OACE,QAACG,EAAD,YACE,QAAC,KAAD,CACExB,aAAcA,EACdyB,cAAerB,EACfsB,eAAgBR,KAElB,QAAC,IAAD,CAAeS,WAAS,EAAxB,WACE,QAAC,IAAD,KACA,QAAC,IAAD,CAAgBC,cAAc,aAEhC,QAACC,EAAD,CACE7B,aAAcA,EACd8B,WAAY7B,EAAU8B,QACtBrD,MAAOA,EACPsD,OAAQ/B,EAAU+B,OAClBC,SA5CgBvD,IACpB,MAAMwD,GAAcC,EAAAA,EAAAA,IAAwB,IACtC/D,EAASM,OAAS,CAAC,EACvBA,UAII0D,EAAoBC,IAAKH,EAAa,UAE5C1D,EAAAA,eAAAA,KAAoB,CAClBC,SAAUL,EAASK,SACnBC,MAAO0D,GAFT,KAqCE,QAAC,IAAD,CACEE,aAAc,CAACC,QAAQvE,EAAAA,EAAAA,GAAE,eACzBC,MAAOkD,EACPqB,SAAUC,GAAOrB,EAA4BqB,EAAIxE,OACjDyE,QAASC,OAAOC,QAAQtB,GAAqBxC,KAAI,QAAE+D,EAAMC,GAAR,QAAqB,CACpE7E,MAAO4E,EACP9E,MAAO+E,EAAO/E,MAFiC,OAKnD,QAAC,KAAD,CACEgF,GAAI9C,EAAU+C,wBAAwBhD,EAAaiD,MACnDC,QAnC4B,MAChCC,EAAAA,EAAAA,GAA4B,gDAAiD,CAC3EnD,gBADF,EAgCE,UAIGhC,EAAAA,EAAAA,GAAE,wBAIV,CAxHQ+B,EAAAA,YAAAA,gBA6CAiB,EAAAA,YAAAA,SA6ET,MAAMQ,GAAgB,OAAO,MAAP,sBAAH,qBAEV4B,EAAAA,EAAAA,GAAM,GAFI,mBAGAA,EAAAA,EAAAA,GAAM,GAHN,wBAKIC,GAAKA,EAAEC,MAAMC,YAAYC,OAL7B,uEASIH,GAAKA,EAAEC,MAAMC,YAAYE,QAT7B,qDAcb5B,GAAkB,OAAO6B,EAAAA,EAAP,sBAAH,uBACEL,GAAKA,EAAEC,MAAMC,YAAYC,OAD3B,kDAMEH,GAAKA,EAAEC,MAAMC,YAAYE,QAN3B,sCAYrB,ICvJA,SAASE,EAAkBpF,GACzB,MAAM,SAACH,EAAD,aAAW4B,EAAX,SAAyB4D,GAAYrF,EAE3C,OACE,QAAC,KAAD,CACEH,SAAUA,EACV4B,aAAcA,EACd4D,SAAUA,EACVC,IAAKC,EAAAA,EAAAA,OACLC,iBAAkBA,EAClBC,kBAAmBA,EACnBC,eAAgBC,GAGrB,CAED,SAASA,EAAqB3F,GAC5B,MAAM,SAACH,EAAD,aAAW4B,EAAX,UAAyBC,EAAzB,gBAAoCE,EAApC,SAAqDG,GAAY/B,EACjE4C,GAA0BgD,EAAAA,EAAAA,IAAsC/F,GAChEgC,GAA+BgE,EAAAA,EAAAA,IAAyBhG,GACxDiC,EAAWgE,EAAYjG,GAEvBkG,EAAkBrE,EAAUO,QAC5B+D,EA2NR,SAAiCtE,GAwB/B,OAAOA,EAAUuE,YAvB4B,CAC3C,CACEC,KAAM,WACNC,SAAU,CAAC,OAAQ,QAAIzF,OAAWA,IAEpC,CACEwF,KAAM,WACNC,SAAU,CAAC,MAAO,QAAIzF,OAAWA,IAEnC,CACEwF,KAAM,WACNC,SAAU,CAAC,MAAO,QAAIzF,OAAWA,IAEnC,CACEwF,KAAM,WACNC,SAAU,CAAC,MAAO,QAAIzF,OAAWA,IAEnC,CACEwF,KAAM,WACNC,SAAU,CAAC,MAAO,QAAIzF,OAAWA,KAKtC,CApPyB0F,CAAwB1E,GAEhDqE,EAAgBM,MAAQ,GACxBN,EAAgBtC,OAAS,CAAC,CAAC6C,MAAO,UAAWC,OAAQ,IAErD,MAaM5D,EACJ6D,KAEAC,EAAAA,EAAAA,IAAoB,CAClBC,UAAW,sEACXC,SAAU,oEACVC,gBAAiBC,SAASpF,EAAaqF,GAAI,IAC3CC,OAAQP,IAKV,MAAMQ,GAAyBhE,EAAAA,EAAAA,IAAuBnB,GACpDe,GACAqE,KACIC,EAAcxF,GAAW2E,QAAQ,GACvC,IAAIc,EAAY,CAAC,EAGfH,GAAwBd,OAASgB,GAAahB,MAC9Cc,GAAwBV,QAAUY,GAAaZ,QAE/Ca,GAAYC,EAAAA,EAAAA,IAAmCxE,EAAyB4D,IAG1E,MAAMa,EAA+B,KAChCjH,EAAAA,EAAAA,GAA4BP,EAAU,CAACyH,EAAAA,GAAYC,EAAAA,SACnDC,EAAAA,EAAAA,IAAsBhB,MACtBW,GAGDX,IAAciB,EAAAA,GAAAA,aACTJ,EAAUK,UAEnBzH,EAAAA,eAAAA,KAAoB,CAClBC,SAAUL,EAASK,SACnBC,MAAOkH,GAFT,EAMIxE,EAA+B8E,KACnClB,EAAAA,EAAAA,IAAoB,CAClBC,UAAW,gEACXC,SAAU,wEACVC,gBAAiBC,SAASpF,EAAaqF,GAAI,IAC3CC,OAAQY,IAGV,MAAMN,EAA+B,KAChCjH,EAAAA,EAAAA,GAA4BP,EAAU,CAACyH,EAAAA,GAAYC,EAAAA,SACnDH,EAAAA,EAAAA,IAAmCO,EAAe9F,IAGnD8F,IAAkBC,EAAAA,GAAAA,aACbP,EAAUQ,gBAGnB5H,EAAAA,eAAAA,KAAoB,CAClBC,SAAUL,EAASK,SACnBC,MAAOkH,GAFT,EAMF,OACE,QAAC,IAAD,CACE3F,UAAWqE,EACX+B,QAASrG,EAAaiD,KACtB7E,SAAUA,EACVkC,SAAUgG,GAAShG,EAASgG,GAAOC,SACnCC,SAAS,sCACT5G,OAAO,QACP6G,WAAS,EAPX,SASG,IAAyD,IAAvDC,UAAWC,EAAsBC,UAAWC,GAAW,EACxD,MAAMtG,EACJsG,GAAOC,KAAK,KAAK,YAAYC,kBAAoB,GAEnD,OACE,QAAC,IAAD,CACE9G,UAAWsE,EACX8B,QAASrG,EAAaiD,KACtB7E,SAAUA,EACVoI,SAAS,qCACTC,WAAS,EALX,SAOG,IAA4B,IAA3B,UAACC,EAAD,UAAYE,GAAe,EAC3B,GAAID,GAAwBD,EAC1B,OACE,QAAC,KAAD,CAAa3F,WAAS,EAAtB,UACE,QAAC,IAAD,MAKN,MAAMiG,EAAiBJ,GAAWE,OAAO,GACnCG,EAAc,CAClBC,KAAMF,IAAiB,UACvBG,IAAKH,IAAiB,UACtBI,IAAKJ,IAAiB,SACtBK,IAAKL,IAAiB,SACtBM,IAAKN,IAAiB,UAElBO,EAnHYN,KAC5B,MAAMnE,GAASvB,EAAAA,EAAAA,IAAuBnB,EAA8B6G,GAClE9F,GAEIoG,EAAoBtH,GAAWO,QACrC,GAAI+G,GAAqBzE,GAAQpE,MAAO,CACtC,MAAMA,EAAQ,IAAI8I,EAAAA,GAAcD,EAAkB7I,OAClDoE,EAAOpE,MAAMmB,SAAQT,GAAQV,EAAM+I,gBAAgBrI,EAAK,GAAI,CAACA,EAAK,OAClEmI,EAAkB7I,MAAQA,EAAMgJ,cACjC,CACD,OAAOH,CAAP,EAyGoCI,CAAqBV,GAC/C,OACE,QAAC,EAAD,CACE1G,gBAAiBA,EACjBnC,SAAUA,EACV4B,aAAcA,EACdC,UAAWsH,EACXpH,gBAAiBA,EACjBC,6BAA8BA,EAC9Bc,qCACEA,EAEFC,wBAAyBA,EACzBC,4BAA6BA,EAC7BC,iBAAkB4F,EAClB5G,SAAUA,EACVC,SAAUA,GAfd,GA1BN,GAkDP,CAED,SAASyD,EAAiB5D,GAIxB,MAF6B,iBAApBA,GAAgCyH,OAAOzH,GAAiBW,OAAO+G,OAAS,EAGxE,CAACD,OAAOzH,GAAiBW,QAAQ9C,EAAAA,EAAAA,GAAE,WAAW8J,KAAK,OAGrD,EAAC9J,EAAAA,EAAAA,GAAE,YAAYA,EAAAA,EAAAA,GAAE,WAAW8J,KAAK,MACzC,CAED,SAASzD,EAAYjG,GACnB,MAAMiC,GAAWlB,EAAAA,EAAAA,IAAaf,EAASM,MAAM2B,SAAU,IACvD,GAAIsC,OAAOoF,OAAOC,EAAAA,IAAUC,SAAS5H,GACnC,OAAOA,CAGV,CAED,SAAS2D,EAAT,GAMc,IANa,SACzB5F,EADyB,gBAEzB+B,GAIY,EACZ,MAAMzB,GAAQS,EAAAA,EAAAA,IAAaf,EAASM,MAAMA,MAAO,IAC3CwJ,EAAa,IAAIV,EAAAA,GAAc9I,GAErCwJ,EAAWT,gBAAgB,aAAc,CAAC,gBAC1CS,EAAWT,gBAAgB,cAAe,CAACtH,IAE3CwC,OAAOwF,KAAKD,EAAWE,SAASvI,SAAQgF,KAClCwD,EAAAA,EAAAA,IAAiBxD,IACnBqD,EAAWI,aAAazD,EACzB,IAIH,MAAM7C,EAAS,CACb,KACA,eACAuG,EAAAA,GACA,uBACA,QACA,aAEItC,GAAY7B,EAAAA,EAAAA,IAAyBhG,GACvC6H,IAAcD,EAAAA,GAAAA,KAChBhE,EAAOrB,OAAO,EAAG,EAAI,SAAQsF,KAE7BjE,EAAOwG,QAAQC,EAAAA,IAEjB,MAAMpI,EAAWgE,EAAYjG,GAK7B,OAJIiC,GACF2B,EAAOrB,OAAO,EAAG,EAAGN,GAGfqI,EAAAA,GAAAA,yBACL,CACErD,QAAIpG,EACJ0J,QAAS,EACT9F,KAAM1C,EACN6B,SACAtD,MAAOwJ,EAAWR,eAClB9D,SAAU,GACVgF,SAASzJ,EAAAA,EAAAA,IAAaf,EAASM,MAAM8G,KAAM,eAE7CpH,EAEH,CAhPQuF,EAAAA,YAAAA,oBAgBAO,EAAAA,YAAAA,uBA6PT,SAAe2E,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,GAAiBnF,G,sDC7T7C,IAAIoF,EAAW,EAAQ,sCA+BvBC,EAAOC,QAnBP,SAAsBC,EAAOC,EAAUC,GAIrC,IAHA,IAAIC,GAAS,EACTxB,EAASqB,EAAMrB,SAEVwB,EAAQxB,GAAQ,CACvB,IAAI5J,EAAQiL,EAAMG,GACdC,EAAUH,EAASlL,GAEvB,GAAe,MAAXqL,SAAiCrK,IAAbsK,EACfD,GAAYA,IAAYP,EAASO,GAClCF,EAAWE,EAASC,IAE1B,IAAIA,EAAWD,EACXE,EAASvL,CAEjB,CACA,OAAOuL,CACT,C,0CChBAR,EAAOC,QAJP,SAAgBhL,EAAOwL,GACrB,OAAOxL,EAAQwL,CACjB,C","sources":["webpack:///./app/utils/performance/histogram/constants.tsx","webpack:///./app/utils/performance/histogram/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/index.tsx","webpack:///../node_modules/lodash/_baseExtremum.js","webpack:///../node_modules/lodash/_baseGt.js"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\n\nimport {DataFilter} from './types';\n\nexport const FILTER_OPTIONS: SelectValue<DataFilter>[] = [\n  {label: t('Exclude'), value: 'exclude_outliers'},\n  {label: t('Include'), value: 'all'},\n];\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {SelectValue} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {FILTER_OPTIONS} from './constants';\nimport {DataFilter} from './types';\n\ntype HistogramChildrenProps = {\n  activeFilter: SelectValue<DataFilter>;\n  filterOptions: typeof FILTER_OPTIONS;\n  handleFilterChange: (option: string) => void;\n  handleResetView: () => void;\n  isZoomed: boolean;\n};\n\ntype Props = {\n  children: (props: HistogramChildrenProps) => React.ReactNode;\n  location: Location;\n  zoomKeys: string[];\n};\n\nclass Histogram extends Component<Props> {\n  isZoomed() {\n    const {location, zoomKeys} = this.props;\n    return zoomKeys.map(key => location.query[key]).some(value => value !== undefined);\n  }\n\n  handleResetView = () => {\n    const {location, zoomKeys} = this.props;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: removeHistogramQueryStrings(location, zoomKeys),\n    });\n  };\n\n  getActiveFilter() {\n    const {location} = this.props;\n\n    const dataFilter = location.query.dataFilter\n      ? decodeScalar(location.query.dataFilter)\n      : FILTER_OPTIONS[0].value;\n    return FILTER_OPTIONS.find(item => item.value === dataFilter) || FILTER_OPTIONS[0];\n  }\n\n  handleFilterChange = (value: string) => {\n    const {location, zoomKeys} = this.props;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...removeHistogramQueryStrings(location, zoomKeys),\n        dataFilter: value,\n      },\n    });\n  };\n\n  render() {\n    const childrenProps = {\n      isZoomed: this.isZoomed(),\n      handleResetView: this.handleResetView,\n      activeFilter: this.getActiveFilter(),\n      handleFilterChange: this.handleFilterChange,\n      filterOptions: FILTER_OPTIONS,\n    };\n    return this.props.children(childrenProps);\n  }\n}\n\nexport function removeHistogramQueryStrings(location: Location, zoomKeys: string[]) {\n  const query: Location['query'] = {...location.query, cursor: undefined};\n\n  delete query.dataFilter;\n  // reset all zoom parameters\n  zoomKeys.forEach(key => delete query[key]);\n\n  return query;\n}\n\nexport default Histogram;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport Button from 'sentry/components/button';\nimport CompactSelect from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport Filter, {filterToSearchConditions, SpanOperationBreakdownFilter} from '../filter';\nimport {SetStateAction} from '../types';\n\nimport EventsTable from './eventsTable';\nimport {EventsDisplayFilterName, getEventsFilterOptions} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  eventsDisplayFilterName: EventsDisplayFilterName;\n  location: Location;\n  onChangeEventsDisplayFilter: (eventsDisplayFilterName: EventsDisplayFilterName) => void;\n  onChangeSpanOperationBreakdownFilter: (newFilter: SpanOperationBreakdownFilter) => void;\n  organization: Organization;\n  setError: SetStateAction<string | undefined>;\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter;\n  totalEventCount: string;\n  transactionName: string;\n  percentileValues?: Record<EventsDisplayFilterName, number>;\n  webVital?: WebVital;\n};\n\nexport const TRANSACTIONS_LIST_TITLES: Readonly<string[]> = [\n  t('event id'),\n  t('user'),\n  t('operation duration'),\n  t('total duration'),\n  t('trace id'),\n  t('timestamp'),\n];\n\nfunction EventsContent(props: Props) {\n  const {\n    location,\n    organization,\n    eventView: originalEventView,\n    transactionName,\n    spanOperationBreakdownFilter,\n    webVital,\n    setError,\n    totalEventCount,\n  } = props;\n\n  const eventView = originalEventView.clone();\n  const transactionsListTitles = TRANSACTIONS_LIST_TITLES.slice();\n\n  if (webVital) {\n    transactionsListTitles.splice(3, 0, t(webVital));\n  }\n\n  const spanOperationBreakdownConditions = filterToSearchConditions(\n    spanOperationBreakdownFilter,\n    location\n  );\n\n  if (spanOperationBreakdownConditions) {\n    eventView.query = `${eventView.query} ${spanOperationBreakdownConditions}`.trim();\n    transactionsListTitles.splice(2, 1, t(`${spanOperationBreakdownFilter} duration`));\n  }\n\n  return (\n    <Layout.Main fullWidth>\n      <Search {...props} />\n      <EventsTable\n        totalEventCount={totalEventCount}\n        eventView={eventView}\n        organization={organization}\n        location={location}\n        setError={setError}\n        columnTitles={transactionsListTitles}\n        transactionName={transactionName}\n      />\n    </Layout.Main>\n  );\n}\n\nfunction Search(props: Props) {\n  const {\n    eventView,\n    location,\n    organization,\n    spanOperationBreakdownFilter,\n    onChangeSpanOperationBreakdownFilter,\n    eventsDisplayFilterName,\n    onChangeEventsDisplayFilter,\n    percentileValues,\n  } = props;\n\n  const handleSearch = (query: string) => {\n    const queryParams = normalizeDateTimeParams({\n      ...(location.query || {}),\n      query,\n    });\n\n    // do not propagate pagination when making a new search\n    const searchQueryParams = omit(queryParams, 'cursor');\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: searchQueryParams,\n    });\n  };\n\n  const query = decodeScalar(location.query.query, '');\n\n  const eventsFilterOptions = getEventsFilterOptions(\n    spanOperationBreakdownFilter,\n    percentileValues\n  );\n\n  const handleDiscoverButtonClick = () => {\n    trackAdvancedAnalyticsEvent('performance_views.all_events.open_in_discover', {\n      organization,\n    });\n  };\n\n  return (\n    <FilterActions>\n      <Filter\n        organization={organization}\n        currentFilter={spanOperationBreakdownFilter}\n        onChangeFilter={onChangeSpanOperationBreakdownFilter}\n      />\n      <PageFilterBar condensed>\n        <EnvironmentPageFilter />\n        <DatePageFilter alignDropdown=\"left\" />\n      </PageFilterBar>\n      <StyledSearchBar\n        organization={organization}\n        projectIds={eventView.project}\n        query={query}\n        fields={eventView.fields}\n        onSearch={handleSearch}\n      />\n      <CompactSelect\n        triggerProps={{prefix: t('Percentile')}}\n        value={eventsDisplayFilterName}\n        onChange={opt => onChangeEventsDisplayFilter(opt.value)}\n        options={Object.entries(eventsFilterOptions).map(([name, filter]) => ({\n          value: name as EventsDisplayFilterName,\n          label: filter.label,\n        }))}\n      />\n      <Button\n        to={eventView.getResultsViewUrlTarget(organization.slug)}\n        onClick={handleDiscoverButtonClick}\n      >\n        {t('Open in Discover')}\n      </Button>\n    </FilterActions>\n  );\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(4, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/6;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nexport default EventsContent;\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  isAggregateField,\n  QueryFieldValue,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n} from 'sentry/utils/discover/fields';\nimport {WebVital} from 'sentry/utils/fields';\nimport {removeHistogramQueryStrings} from 'sentry/utils/performance/histogram';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {\n  decodeFilterFromLocation,\n  filterToLocationQuery,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport PageLayout, {ChildProps} from '../pageLayout';\nimport Tab from '../tabs';\nimport {ZOOM_END, ZOOM_START} from '../transactionOverview/latencyChart/utils';\n\nimport EventsContent from './content';\nimport {\n  decodeEventsDisplayFilterFromLocation,\n  EventsDisplayFilterName,\n  filterEventsDisplayToLocationQuery,\n  getEventsFilterOptions,\n} from './utils';\n\ntype PercentileValues = Record<EventsDisplayFilterName, number>;\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction TransactionEvents(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <PageLayout\n      location={location}\n      organization={organization}\n      projects={projects}\n      tab={Tab.Events}\n      getDocumentTitle={getDocumentTitle}\n      generateEventView={generateEventView}\n      childComponent={EventsContentWrapper}\n    />\n  );\n}\n\nfunction EventsContentWrapper(props: ChildProps) {\n  const {location, organization, eventView, transactionName, setError} = props;\n  const eventsDisplayFilterName = decodeEventsDisplayFilterFromLocation(location);\n  const spanOperationBreakdownFilter = decodeFilterFromLocation(location);\n  const webVital = getWebVital(location);\n\n  const totalEventsView = eventView.clone();\n  const percentilesView = getPercentilesEventView(eventView);\n\n  totalEventsView.sorts = [];\n  totalEventsView.fields = [{field: 'count()', width: -1}];\n\n  const getFilteredEventView = (percentiles: PercentileValues) => {\n    const filter = getEventsFilterOptions(spanOperationBreakdownFilter, percentiles)[\n      eventsDisplayFilterName\n    ];\n    const filteredEventView = eventView?.clone();\n    if (filteredEventView && filter?.query) {\n      const query = new MutableSearch(filteredEventView.query);\n      filter.query.forEach(item => query.setFilterValues(item[0], [item[1]]));\n      filteredEventView.query = query.formatString();\n    }\n    return filteredEventView;\n  };\n\n  const onChangeSpanOperationBreakdownFilter = (\n    newFilter: SpanOperationBreakdownFilter\n  ) => {\n    trackAnalyticsEvent({\n      eventName: 'Performance Views: Transaction Events Ops Breakdown Filter Dropdown',\n      eventKey: 'performance_views.transactionEvents.ops_filter_dropdown.selection',\n      organization_id: parseInt(organization.id, 10),\n      action: newFilter as string,\n    });\n\n    // Check to see if the current table sort matches the EventsDisplayFilter.\n    // If it does, we can re-sort using the new SpanOperationBreakdownFilter\n    const eventsFilterOptionSort = getEventsFilterOptions(spanOperationBreakdownFilter)[\n      eventsDisplayFilterName\n    ].sort;\n    const currentSort = eventView?.sorts?.[0];\n    let sortQuery = {};\n\n    if (\n      eventsFilterOptionSort?.kind === currentSort?.kind &&\n      eventsFilterOptionSort?.field === currentSort?.field\n    ) {\n      sortQuery = filterEventsDisplayToLocationQuery(eventsDisplayFilterName, newFilter);\n    }\n\n    const nextQuery: Location['query'] = {\n      ...removeHistogramQueryStrings(location, [ZOOM_START, ZOOM_END]),\n      ...filterToLocationQuery(newFilter),\n      ...sortQuery,\n    };\n\n    if (newFilter === SpanOperationBreakdownFilter.None) {\n      delete nextQuery.breakdown;\n    }\n    browserHistory.push({\n      pathname: location.pathname,\n      query: nextQuery,\n    });\n  };\n\n  const onChangeEventsDisplayFilter = (newFilterName: EventsDisplayFilterName) => {\n    trackAnalyticsEvent({\n      eventName: 'Performance Views: Transaction Events Display Filter Dropdown',\n      eventKey: 'performance_views.transactionEvents.display_filter_dropdown.selection',\n      organization_id: parseInt(organization.id, 10),\n      action: newFilterName as string,\n    });\n\n    const nextQuery: Location['query'] = {\n      ...removeHistogramQueryStrings(location, [ZOOM_START, ZOOM_END]),\n      ...filterEventsDisplayToLocationQuery(newFilterName, spanOperationBreakdownFilter),\n    };\n\n    if (newFilterName === EventsDisplayFilterName.p100) {\n      delete nextQuery.showTransaction;\n    }\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: nextQuery,\n    });\n  };\n\n  return (\n    <DiscoverQuery\n      eventView={totalEventsView}\n      orgSlug={organization.slug}\n      location={location}\n      setError={error => setError(error?.message)}\n      referrer=\"api.performance.transaction-summary\"\n      cursor=\"0:0:0\"\n      useEvents\n    >\n      {({isLoading: isTotalEventsLoading, tableData: table}) => {\n        const totalEventCount: string =\n          table?.data[0]?.['count()']?.toLocaleString() || '';\n\n        return (\n          <DiscoverQuery\n            eventView={percentilesView}\n            orgSlug={organization.slug}\n            location={location}\n            referrer=\"api.performance.transaction-events\"\n            useEvents\n          >\n            {({isLoading, tableData}) => {\n              if (isTotalEventsLoading || isLoading) {\n                return (\n                  <Layout.Main fullWidth>\n                    <LoadingIndicator />\n                  </Layout.Main>\n                );\n              }\n\n              const percentileData = tableData?.data?.[0];\n              const percentiles = {\n                p100: percentileData?.['p100()'],\n                p99: percentileData?.['p100()'],\n                p95: percentileData?.['p95()'],\n                p75: percentileData?.['p75()'],\n                p50: percentileData?.['p50()'],\n              } as PercentileValues;\n              const filteredEventView = getFilteredEventView(percentiles);\n              return (\n                <EventsContent\n                  totalEventCount={totalEventCount}\n                  location={location}\n                  organization={organization}\n                  eventView={filteredEventView}\n                  transactionName={transactionName}\n                  spanOperationBreakdownFilter={spanOperationBreakdownFilter}\n                  onChangeSpanOperationBreakdownFilter={\n                    onChangeSpanOperationBreakdownFilter\n                  }\n                  eventsDisplayFilterName={eventsDisplayFilterName}\n                  onChangeEventsDisplayFilter={onChangeEventsDisplayFilter}\n                  percentileValues={percentiles}\n                  webVital={webVital}\n                  setError={setError}\n                />\n              );\n            }}\n          </DiscoverQuery>\n        );\n      }}\n    </DiscoverQuery>\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Events')].join(' \\u2014 ');\n  }\n\n  return [t('Summary'), t('Events')].join(' \\u2014 ');\n}\n\nfunction getWebVital(location: Location): WebVital | undefined {\n  const webVital = decodeScalar(location.query.webVital, '') as WebVital;\n  if (Object.values(WebVital).includes(webVital)) {\n    return webVital;\n  }\n  return undefined;\n}\n\nfunction generateEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}): EventView {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  // Default fields for relative span view\n  const fields = [\n    'id',\n    'user.display',\n    SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n    'transaction.duration',\n    'trace',\n    'timestamp',\n  ];\n  const breakdown = decodeFilterFromLocation(location);\n  if (breakdown !== SpanOperationBreakdownFilter.None) {\n    fields.splice(2, 1, `spans.${breakdown}`);\n  } else {\n    fields.push(...SPAN_OP_BREAKDOWN_FIELDS);\n  }\n  const webVital = getWebVital(location);\n  if (webVital) {\n    fields.splice(3, 0, webVital);\n  }\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields,\n      query: conditions.formatString(),\n      projects: [],\n      orderby: decodeScalar(location.query.sort, '-timestamp'),\n    },\n    location\n  );\n}\n\nfunction getPercentilesEventView(eventView: EventView): EventView {\n  const percentileColumns: QueryFieldValue[] = [\n    {\n      kind: 'function',\n      function: ['p100', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p99', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p95', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p50', '', undefined, undefined],\n    },\n  ];\n\n  return eventView.withColumns(percentileColumns);\n}\n\nexport default withProjects(withOrganization(TransactionEvents));\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"names":["FILTER_OPTIONS","label","t","value","Histogram","Component","location","zoomKeys","this","props","browserHistory","pathname","query","removeHistogramQueryStrings","dataFilter","isZoomed","map","key","some","undefined","getActiveFilter","decodeScalar","item","render","childrenProps","handleResetView","activeFilter","handleFilterChange","filterOptions","children","cursor","forEach","TRANSACTIONS_LIST_TITLES","EventsContent","organization","eventView","originalEventView","transactionName","spanOperationBreakdownFilter","webVital","setError","totalEventCount","clone","transactionsListTitles","slice","splice","spanOperationBreakdownConditions","filterToSearchConditions","trim","fullWidth","Search","columnTitles","onChangeSpanOperationBreakdownFilter","eventsDisplayFilterName","onChangeEventsDisplayFilter","percentileValues","eventsFilterOptions","getEventsFilterOptions","FilterActions","currentFilter","onChangeFilter","condensed","alignDropdown","StyledSearchBar","projectIds","project","fields","onSearch","queryParams","normalizeDateTimeParams","searchQueryParams","omit","triggerProps","prefix","onChange","opt","options","Object","entries","name","filter","to","getResultsViewUrlTarget","slug","onClick","trackAdvancedAnalyticsEvent","space","p","theme","breakpoints","small","xlarge","SearchBar","TransactionEvents","projects","tab","Tab","getDocumentTitle","generateEventView","childComponent","EventsContentWrapper","decodeEventsDisplayFilterFromLocation","decodeFilterFromLocation","getWebVital","totalEventsView","percentilesView","withColumns","kind","function","getPercentilesEventView","sorts","field","width","newFilter","trackAnalyticsEvent","eventName","eventKey","organization_id","parseInt","id","action","eventsFilterOptionSort","sort","currentSort","sortQuery","filterEventsDisplayToLocationQuery","nextQuery","ZOOM_START","ZOOM_END","filterToLocationQuery","SpanOperationBreakdownFilter","breakdown","newFilterName","EventsDisplayFilterName","showTransaction","orgSlug","error","message","referrer","useEvents","isLoading","isTotalEventsLoading","tableData","table","data","toLocaleString","percentileData","percentiles","p100","p99","p95","p75","p50","filteredEventView","MutableSearch","setFilterValues","formatString","getFilteredEventView","String","length","join","values","WebVital","includes","conditions","keys","filters","isAggregateField","removeFilter","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","push","SPAN_OP_BREAKDOWN_FIELDS","EventView","version","orderby","withProjects","withOrganization","isSymbol","module","exports","array","iteratee","comparator","index","current","computed","result","other"],"sourceRoot":""}