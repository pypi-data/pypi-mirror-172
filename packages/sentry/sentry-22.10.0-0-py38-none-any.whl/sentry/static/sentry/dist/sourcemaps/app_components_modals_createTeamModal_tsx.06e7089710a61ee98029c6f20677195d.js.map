{"version":3,"file":"chunks/app_components_modals_createTeamModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/useApi.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {tct} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {Team} from 'sentry/types';\n\ntype CallbackOptions = {\n  error?: Function;\n  success?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => params[name]?.(...args);\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamStore.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamStore.onUpdateSuccess(teamId, data);\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamStore.onUpdateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamStore.onCreateSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamStore.onRemoveSuccess(params.teamId);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {Fragment} from 'react';\n\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form from 'sentry/components/forms/form';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  formProps?: Partial<typeof Form>;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n};\n\nfunction CreateTeamForm({organization, formProps, ...props}: Props) {\n  return (\n    <Fragment>\n      <p>\n        {t(\n          'Members of a team have access to specific areas, such as a new release or a new application feature.'\n        )}\n      </p>\n\n      <Form\n        submitLabel={t('Create Team')}\n        apiEndpoint={`/organizations/${organization.slug}/teams/`}\n        apiMethod=\"POST\"\n        onSubmit={(data, onSuccess, onError) =>\n          props.onSubmit?.(data as Payload, onSuccess, onError)\n        }\n        onSubmitSuccess={data => props.onSuccess?.(data)}\n        requireChanges\n        data-test-id=\"create-team-form\"\n        {...formProps}\n      >\n        <TextField\n          name=\"slug\"\n          label={t('Team Name')}\n          placeholder={t('e.g. operations, web-frontend, desktop')}\n          help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n          required\n          stacked\n          flexibleControlStateSize\n          inline={false}\n          transformInput={slugify}\n        />\n      </Form>\n    </Fragment>\n  );\n}\n\nexport default CreateTeamForm;\n","import {Fragment} from 'react';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {createTeam} from 'sentry/actionCreators/teams';\nimport CreateTeamForm from 'sentry/components/teams/createTeamForm';\nimport {t} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = ModalRenderProps & {\n  organization: Organization;\n  onClose?: (team: Team) => void;\n};\n\nfunction CreateTeamModal({Body, Header, ...props}: Props) {\n  const {onClose, closeModal, organization} = props;\n  const api = useApi();\n\n  async function handleSubmit(\n    data: {slug: string},\n    onSuccess: Function,\n    onError: Function\n  ) {\n    try {\n      const team: Team = await createTeam(api, data, {orgId: organization.slug});\n\n      closeModal();\n      onClose?.(team);\n      onSuccess(team);\n    } catch (err) {\n      onError(err);\n    }\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>{t('Create Team')}</Header>\n      <Body>\n        <CreateTeamForm {...props} onSubmit={handleSubmit} />\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default CreateTeamModal;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n"],"names":["doCallback","params","name","args","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamStore","updateTeamSuccess","teamId","data","joinTeam","options","endpoint","memberId","request","method","success","error","leaveTeam","createTeam","team","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","CreateTeamForm","formProps","props","Fragment","t","submitLabel","apiEndpoint","apiMethod","onSubmit","onSuccess","onError","onSubmitSuccess","requireChanges","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","slugify","CreateTeamModal","Body","Header","onClose","closeModal","useApi","closeButton","str","toLowerCase","replace","persistInFlight","providedApi","localApi","useRef","undefined","current","Client","clearOnUnmount","useCallback","clear","useEffect"],"sourceRoot":""}