{"version":3,"file":"chunks/app_views_settings_projectPlugins_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"wlBA4FA,QApEA,SACEA,GAEA,MAAMC,UAAoBC,EAAAA,UAA6D,uDAE7E,CAACC,QAAS,GAAIC,SAAS,KAFsD,0BAwCvEC,EAAAA,EAAAA,QAAoB,IAA+B,IAA9B,QAACF,EAAD,QAAUC,GAAoB,EAG/DE,KAAKC,SAAS,CAACJ,UAASC,WAAxB,QACCI,GA5CkF,CAIrFC,oBACEH,KAAKI,cACN,CAEDC,mBAAmBC,EAAWC,EAAYC,GACxC,MAAM,aAACC,EAAD,QAAeC,GAAWV,KAAKW,MAG/BC,EAAUN,EAAUG,cAAgBD,GAAaC,aACjDI,EAAcP,EAAUI,SAAWF,GAAaE,QAQtD,KAAKI,EAAAA,EAAAA,IAAQD,MAAiBC,EAAAA,EAAAA,IAAQF,GACpC,OAGF,MAAMG,EAAYH,EAAQI,OAASP,EAAaO,KAC1CC,EAAgBJ,EAAYG,OAASN,GAASM,KAGhDD,GAAaE,GAIjBjB,KAAKI,cACN,CAEDc,uBACElB,KAAKmB,aACN,CAQDf,eACE,MAAM,aAACK,EAAD,QAAeC,GAAWV,KAAKW,MAEhCD,GAAYD,IAIjBL,EAAAA,EAAAA,IAAa,CAACgB,UAAWV,EAAQM,KAAMK,MAAOZ,EAAaO,MAC5D,CAEDM,SACE,OACE,QAAC5B,EAAD,IAAuBM,KAAKW,MAA+Bd,QAASG,KAAKuB,OAE5E,EAEH,OA9DM5B,EADN,kCACMA,EADN,cAEwB,gBAAc6B,EAAAA,EAAAA,GAAe9B,QA6D9C+B,EAAAA,EAAAA,IAAiBC,EAAAA,EAAAA,GAAY/B,GACrC,C,wPCpFc,MAAMgC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACR,CAEDP,SACE,OACE,QAAC,IAAD,CAAqBQ,MAAO9B,KAAK6B,WAAjC,SACG7B,KAAK+B,mBAGX,EAdkBJ,EAAAA,YAAAA,W,+xBCmCrB,MAAMK,UAA6BL,EAAAA,EAAwB,8DAuC3C,KACZ,MAAM,UAACP,EAAD,MAAYC,EAAZ,SAAmBY,GAAYjC,KAAKW,MAAMuB,QAEhDC,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,GAAE,qBACpBC,EAAAA,EAAAA,IAA0B,iCAAkC,CAC1DC,YAAaL,EACbM,iBAAkB,SAClBC,KAAM,iBACN/B,aAAcT,KAAKW,MAAMF,eAG3BT,KAAKyC,IAAIC,QAAS,aAAYrB,KAASD,aAAqBa,KAAa,CACvEU,OAAQ,OACRC,KAAM,CAACC,OAAO,GACdC,QAASC,IACP/C,KAAKC,SAAS,CAAC8C,mBACfC,EAAAA,EAAAA,KAAkBZ,EAAAA,EAAAA,GAAE,sBACpBC,EAAAA,EAAAA,IAA0B,mCAAoC,CAC5DC,YAAaL,EACbM,iBAAkB,SAClBC,KAAM,iBACN/B,aAAcT,KAAKW,MAAMF,cAJ3B,EAOFwC,MAAO,MACLC,EAAAA,EAAAA,KAAgBd,EAAAA,EAAAA,GAAE,qBAAlB,GAdJ,KAlDuD,4BAqE1C,MACbe,EAAAA,EAAAA,IAAanD,KAAKW,MAAMuB,QACxBlC,KAAKoD,6BAA4B,EAAjC,KAvEuD,6BA0EzC,MACdC,EAAAA,EAAAA,IAAcrD,KAAKW,MAAMuB,QACzBlC,KAAKoD,6BAA4B,EAAjC,KA5EuD,2CA+E1BE,IAC7B,MAAM,SAACrB,GAAYjC,KAAKW,MAAMuB,OACxBqB,EAAWD,EAAU,uBAAyB,yBACpDjB,EAAAA,EAAAA,IAA0BkB,EAAU,CAClCjB,YAAaL,EACbM,iBAAkB,SAClBC,KAAM,iBACN/B,aAAcT,KAAKW,MAAMF,cAJ3B,GAlFuD,CACzDJ,mBAAmBC,EAAkBkD,GACnCC,MAAMpD,mBAAmBC,EAAWkD,GAChClD,EAAU4B,OAAOD,WAAajC,KAAKW,MAAMuB,OAAOD,UAClDjC,KAAK0D,qBAER,CACDvD,oBACEH,KAAK0D,qBACN,CAEDA,sBACE,MAAM,SAACzB,GAAYjC,KAAKW,MAAMuB,QAE9BG,EAAAA,EAAAA,IAA0B,8BAA+B,CACvDC,YAAaL,EACbM,iBAAkB,SAClBC,KAAM,iBACN/B,aAAcT,KAAKW,MAAMF,cAE5B,CAEDoB,WACE,MAAM,OAAC8B,GAAU3D,KAAKuB,MACtB,OAAIoC,GAAUA,EAAOC,KACZD,EAAOC,KAET,QACR,CAEDC,eACE,MAAM,UAACzC,EAAD,MAAYC,EAAZ,SAAmBY,GAAYjC,KAAKW,MAAMuB,OAChD,MAAO,CAAC,CAAC,gBAAkB,aAAYb,KAASD,aAAqBa,MACtE,CAED6B,WAAWC,GACT,OAAOA,EAAMC,MAAM,MAAM,EAC1B,CAsDDC,aACE,MAAM,cAAClB,GAAiB/C,KAAKuB,OACvB,QAAC1B,GAAWG,KAAKW,MAEjBgD,EACJ9D,GACAA,EAAQA,SACRA,EAAQA,QAAQqE,MAAK,QAAC,KAAClD,GAAF,SAAYA,IAAShB,KAAKW,MAAMuB,OAAOD,QAAvC,IAEvB,OAAO0B,EAASA,EAAOL,QAAUP,GAAiBA,EAAcO,OACjE,CAEDa,gBACE,MAAM,cAACpB,GAAiB/C,KAAKuB,MAC7B,IAAKwB,EACH,OAAO,KAET,MAAMO,EAAUtD,KAAKiE,aAEfG,GACJ,QAACC,EAAD,CAAcC,KAAK,KAAKC,QAASvE,KAAKwE,aAAtC,UACGpC,EAAAA,EAAAA,GAAE,mBAIDqC,GACJ,QAACJ,EAAD,CAAcC,KAAK,KAAKI,SAAS,SAASH,QAASvE,KAAK2E,cAAxD,UACGvC,EAAAA,EAAAA,GAAE,oBAIDwC,EAAetB,EAAUmB,EAAUL,EAEzC,OACE,eAAKS,UAAU,aAAf,UACG9B,EAAc+B,YAAcF,GAC7B,QAAC,KAAD,CAAQN,KAAK,KAAKC,QAASvE,KAAK+E,YAAhC,UACG3C,EAAAA,EAAAA,GAAE,2BAIV,CAED4C,aACE,MAAM,aAACvE,EAAD,QAAeC,GAAWV,KAAKW,OAC/B,cAACoC,GAAiB/C,KAAKuB,MAC7B,OAAKwB,GAKH,0BACE,QAAC,IAAD,CAAoBjB,MAAOiB,EAAca,KAAMqB,OAAQjF,KAAKmE,mBAC5D,eAAKU,UAAU,MAAf,WACE,eAAKA,UAAU,WAAf,UACE,QAAC,IAAD,CACEpE,aAAcA,EACdC,QAASA,EACTkC,KAAMG,EACNO,QAAStD,KAAKiE,aACdiB,gBAAiBlF,KAAK2E,mBAG1B,eAAKE,UAAU,2BAAf,UACE,eAAKA,UAAU,qBAAf,WACE,wBAAKzC,EAAAA,EAAAA,GAAE,yBAEP,cAAIyC,UAAU,OAAd,WACE,wBAAKzC,EAAAA,EAAAA,GAAE,WACP,uBAAKW,EAAca,QACnB,wBAAKxB,EAAAA,EAAAA,GAAE,aACP,uBAAKW,EAAcoC,QAAQvB,OAC1Bb,EAAcoC,QAAQC,MACrB,0BACE,wBAAKhD,EAAAA,EAAAA,GAAE,UACP,wBACE,QAAC,IAAD,CAAciD,KAAMtC,EAAcoC,OAAOC,IAAzC,SACGpF,KAAK8D,WAAWf,EAAcoC,OAAOC,aAK9C,wBAAKhD,EAAAA,EAAAA,GAAE,cACP,uBAAKW,EAAcuC,aAGpBvC,EAAcwC,cACb,0BACE,wBAAKnD,EAAAA,EAAAA,GAAE,kBACP,aAAGyC,UAAU,cAAb,SAA4B9B,EAAcwC,iBAI7CxC,EAAcyC,gBACb,0BACE,wBAAKpD,EAAAA,EAAAA,GAAE,gBACP,cAAIyC,UAAU,OAAd,SACG9B,EAAcyC,cAAcC,KAAI,QAAC,MAAC3D,EAAD,IAAQsD,GAAT,SAC/B,wBACE,QAAC,IAAD,CAAcC,KAAMD,EAApB,SAA0BtD,KADnBsD,EADsB,oBAlDxC,IA+DV,EAKH,SAAeM,EAAAA,EAAAA,GAAY1D,GAErBqC,GAAe,OAAOsB,EAAAA,GAAP,qBAAH,iBACAC,EAAAA,EAAAA,GAAM,KADN,I","sources":["webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectPlugins/details.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, keyof 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype Props = {\n  organization: Organization;\n  plugins: {\n    plugins: Plugin[];\n  };\n  project: Project;\n} & RouteComponentProps<{orgId: string; pluginId: string; projectId: string}, {}>;\n\ntype State = {\n  pluginDetails?: Plugin;\n} & AsyncView['state'];\n\n/**\n * There are currently two sources of truths for plugin details:\n *\n * 1) PluginsStore has a list of plugins, and this is where ENABLED state lives\n * 2) We fetch \"plugin details\" via API and save it to local state as `pluginDetails`.\n *    This is because \"details\" call contains form `config` and the \"list\" endpoint does not.\n *    The more correct way would be to pass `config` to PluginConfig and use plugin from\n *    PluginsStore\n */\nclass ProjectPluginDetails extends AsyncView<Props, State> {\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    super.componentDidUpdate(prevProps, prevState);\n    if (prevProps.params.pluginId !== this.props.params.pluginId) {\n      this.recordDetailsViewed();\n    }\n  }\n  componentDidMount() {\n    this.recordDetailsViewed();\n  }\n\n  recordDetailsViewed() {\n    const {pluginId} = this.props.params;\n\n    trackIntegrationAnalytics('integrations.details_viewed', {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n  }\n\n  getTitle() {\n    const {plugin} = this.state;\n    if (plugin && plugin.name) {\n      return plugin.name;\n    }\n    return 'Sentry';\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {projectId, orgId, pluginId} = this.props.params;\n    return [['pluginDetails', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];\n  }\n\n  trimSchema(value) {\n    return value.split('//')[1];\n  }\n\n  handleReset = () => {\n    const {projectId, orgId, pluginId} = this.props.params;\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n    trackIntegrationAnalytics('integrations.uninstall_clicked', {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n\n    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {\n      method: 'POST',\n      data: {reset: true},\n      success: pluginDetails => {\n        this.setState({pluginDetails});\n        addSuccessMessage(t('Plugin was reset'));\n        trackIntegrationAnalytics('integrations.uninstall_completed', {\n          integration: pluginId,\n          integration_type: 'plugin',\n          view: 'plugin_details',\n          organization: this.props.organization,\n        });\n      },\n      error: () => {\n        addErrorMessage(t('An error occurred'));\n      },\n    });\n  };\n\n  handleEnable = () => {\n    enablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(true);\n  };\n\n  handleDisable = () => {\n    disablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(false);\n  };\n\n  analyticsChangeEnableStatus = (enabled: boolean) => {\n    const {pluginId} = this.props.params;\n    const eventKey = enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: pluginId,\n      integration_type: 'plugin',\n      view: 'plugin_details',\n      organization: this.props.organization,\n    });\n  };\n\n  // Enabled state is handled via PluginsStore and not via plugins detail\n  getEnabled() {\n    const {pluginDetails} = this.state;\n    const {plugins} = this.props;\n\n    const plugin =\n      plugins &&\n      plugins.plugins &&\n      plugins.plugins.find(({slug}) => slug === this.props.params.pluginId);\n\n    return plugin ? plugin.enabled : pluginDetails && pluginDetails.enabled;\n  }\n\n  renderActions() {\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n    const enabled = this.getEnabled();\n\n    const enable = (\n      <StyledButton size=\"sm\" onClick={this.handleEnable}>\n        {t('Enable Plugin')}\n      </StyledButton>\n    );\n\n    const disable = (\n      <StyledButton size=\"sm\" priority=\"danger\" onClick={this.handleDisable}>\n        {t('Disable Plugin')}\n      </StyledButton>\n    );\n\n    const toggleEnable = enabled ? disable : enable;\n\n    return (\n      <div className=\"pull-right\">\n        {pluginDetails.canDisable && toggleEnable}\n        <Button size=\"sm\" onClick={this.handleReset}>\n          {t('Reset Configuration')}\n        </Button>\n      </div>\n    );\n  }\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={pluginDetails.name} action={this.renderActions()} />\n        <div className=\"row\">\n          <div className=\"col-md-7\">\n            <PluginConfig\n              organization={organization}\n              project={project}\n              data={pluginDetails}\n              enabled={this.getEnabled()}\n              onDisablePlugin={this.handleDisable}\n            />\n          </div>\n          <div className=\"col-md-4 col-md-offset-1\">\n            <div className=\"pluginDetails-meta\">\n              <h4>{t('Plugin Information')}</h4>\n\n              <dl className=\"flat\">\n                <dt>{t('Name')}</dt>\n                <dd>{pluginDetails.name}</dd>\n                <dt>{t('Author')}</dt>\n                <dd>{pluginDetails.author?.name}</dd>\n                {pluginDetails.author?.url && (\n                  <div>\n                    <dt>{t('URL')}</dt>\n                    <dd>\n                      <ExternalLink href={pluginDetails.author.url}>\n                        {this.trimSchema(pluginDetails.author.url)}\n                      </ExternalLink>\n                    </dd>\n                  </div>\n                )}\n                <dt>{t('Version')}</dt>\n                <dd>{pluginDetails.version}</dd>\n              </dl>\n\n              {pluginDetails.description && (\n                <div>\n                  <h4>{t('Description')}</h4>\n                  <p className=\"description\">{pluginDetails.description}</p>\n                </div>\n              )}\n\n              {pluginDetails.resourceLinks && (\n                <div>\n                  <h4>{t('Resources')}</h4>\n                  <dl className=\"flat\">\n                    {pluginDetails.resourceLinks.map(({title, url}) => (\n                      <dd key={url}>\n                        <ExternalLink href={url}>{title}</ExternalLink>\n                      </dd>\n                    ))}\n                  </dl>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {ProjectPluginDetails};\n\nexport default withPlugins(ProjectPluginDetails);\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(0.75)};\n`;\n"],"names":["WrappedComponent","WithPlugins","Component","plugins","loading","PluginsStore","this","setState","undefined","componentDidMount","fetchPlugins","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","props","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","projectId","orgId","render","state","getDisplayName","withOrganization","withProject","AsyncView","AsyncComponent","getTitle","title","renderComponent","ProjectPluginDetails","pluginId","params","addLoadingMessage","t","trackIntegrationAnalytics","integration","integration_type","view","api","request","method","data","reset","success","pluginDetails","addSuccessMessage","error","addErrorMessage","enablePlugin","analyticsChangeEnableStatus","disablePlugin","enabled","eventKey","prevState","super","recordDetailsViewed","plugin","name","getEndpoints","trimSchema","value","split","getEnabled","find","renderActions","enable","StyledButton","size","onClick","handleEnable","disable","priority","handleDisable","toggleEnable","className","canDisable","handleReset","renderBody","action","onDisablePlugin","author","url","href","version","description","resourceLinks","map","withPlugins","Button","space"],"sourceRoot":""}