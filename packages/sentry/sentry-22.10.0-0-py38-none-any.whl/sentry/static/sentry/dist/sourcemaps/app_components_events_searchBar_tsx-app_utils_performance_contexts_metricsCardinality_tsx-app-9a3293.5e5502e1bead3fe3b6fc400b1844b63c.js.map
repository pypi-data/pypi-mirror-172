{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_utils_performance_contexts_metricsCardinality_tsx-app-9a3293.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuery.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums.tsx","webpack:///./app/utils/performance/contexts/metricsCardinality.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {FieldKey, FieldKind} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboardsV2/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst getFunctionTags = (fields: Readonly<Field[]>) =>\n  Object.fromEntries(\n    fields\n      .filter(\n        item =>\n          !Object.keys(FIELD_TAGS).includes(item.field) &&\n          !isEquation(item.field) &&\n          !isCustomMeasurement(item.field)\n      )\n      .map(item => [\n        item.field,\n        {key: item.field, name: item.field, kind: FieldKind.FUNCTION},\n      ])\n  );\n\nconst getFieldTags = () =>\n  Object.fromEntries(\n    Object.keys(FIELD_TAGS).map(key => [\n      key,\n      {\n        ...FIELD_TAGS[key],\n        kind: FieldKind.FIELD,\n      },\n    ])\n  );\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements']\n) =>\n  Object.fromEntries(\n    Object.keys(measurements).map(key => [\n      key,\n      {\n        ...measurements[key],\n        kind: FieldKind.MEASUREMENT,\n      },\n    ])\n  );\n\nconst getSpanTags = () => {\n  return Object.fromEntries(\n    SPAN_OP_BREAKDOWN_FIELDS.map(key => [key, {key, name: key, kind: FieldKind.METRICS}])\n  );\n};\n\nconst getSemverTags = () =>\n  Object.fromEntries(\n    Object.keys(SEMVER_TAGS).map(key => [\n      key,\n      {\n        ...SEMVER_TAGS[key],\n        kind: FieldKind.FIELD,\n      },\n    ])\n  );\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = getFunctionTags(fields ?? []);\n    const fieldTags = getFieldTags();\n    const measurementsWithKind = getMeasurementTags(measurements);\n    const spanTags = getSpanTags();\n    const semverTags = getSemverTags();\n\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign({}, measurementsWithKind, spanTags, fieldTags, functionTags)\n      : omit(fieldTags, TRACING_FIELDS);\n\n    const tagsWithKind = Object.fromEntries(\n      Object.keys(tags).map(key => [\n        key,\n        {\n          ...tags[key],\n          kind: FieldKind.TAG,\n        },\n      ])\n    );\n\n    assign(combinedTags, tagsWithKind, fieldTags, semverTags);\n\n    const sortedTagKeys = Object.keys(combinedTags);\n    sortedTagKeys.sort((a, b) => {\n      return a.toLowerCase().localeCompare(b.toLowerCase());\n    });\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: sortedTagKeys,\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    return omit(combinedTags, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList({...measurements, ...(customMeasurements ?? {})})}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={['environment']}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilityData {\n  compatible_projects?: number[];\n  dynamic_sampling_projects?: number[];\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilityData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilityQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilityData, {}>\n      route=\"metrics-compatibility-sums\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nexport interface MetricsCompatibilitySumData {\n  sum: {\n    metrics?: number;\n    metrics_null?: number;\n    metrics_unparam?: number;\n  };\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilitySumData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilitySumsQuery({children, ...props}: QueryProps) {\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilitySumData, {}>\n      route=\"metrics-compatibility\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import {Fragment, ReactNode} from 'react';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {canUseMetricsData} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport MetricsCompatibilityQuery, {\n  MetricsCompatibilityData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuery';\nimport MetricsCompatibilitySumsQuery, {\n  MetricsCompatibilitySumData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricDataSwitcherOutcome {\n  forceTransactionsOnly: boolean;\n  compatibleProjects?: number[];\n  shouldNotifyUnnamedTransactions?: boolean;\n  shouldWarnIncompatibleSDK?: boolean;\n}\nexport interface MetricsCardinalityContext {\n  isLoading: boolean;\n  outcome?: MetricDataSwitcherOutcome;\n}\n\ntype MergedMetricsData = MetricsCompatibilityData & MetricsCompatibilitySumData;\n\nconst [_Provider, _useContext, _Context] =\n  createDefinedContext<MetricsCardinalityContext>({\n    name: 'MetricsCardinalityContext',\n    strict: false,\n  });\n\n/**\n * This provider determines whether the metrics data is storing performance information correctly before we\n * make dozens of requests on pages such as performance landing and dashboards.\n */\nexport const MetricsCardinalityProvider = (props: {\n  children: ReactNode;\n  location: Location;\n  organization: Organization;\n}) => {\n  const isUsingMetrics = canUseMetricsData(props.organization);\n\n  if (!isUsingMetrics) {\n    return (\n      <_Provider\n        value={{\n          isLoading: false,\n          outcome: {\n            forceTransactionsOnly: true,\n          },\n        }}\n      >\n        {props.children}\n      </_Provider>\n    );\n  }\n\n  const baseDiscoverProps = {\n    location: props.location,\n    orgSlug: props.organization.slug,\n    cursor: '0:0:0',\n  };\n  const eventView = EventView.fromLocation(props.location);\n  eventView.fields = [{field: 'tpm()'}];\n  const _eventView = adjustEventViewTime(eventView);\n\n  return (\n    <Fragment>\n      <MetricsCompatibilityQuery eventView={_eventView} {...baseDiscoverProps}>\n        {compatabilityResult => (\n          <MetricsCompatibilitySumsQuery eventView={_eventView} {...baseDiscoverProps}>\n            {sumsResult => (\n              <_Provider\n                value={{\n                  isLoading: compatabilityResult.isLoading || sumsResult.isLoading,\n                  outcome:\n                    compatabilityResult.isLoading || sumsResult.isLoading\n                      ? undefined\n                      : getMetricsOutcome(\n                          compatabilityResult.tableData && sumsResult.tableData\n                            ? {\n                                ...compatabilityResult.tableData,\n                                ...sumsResult.tableData,\n                              }\n                            : null,\n                          !!compatabilityResult.error && !!sumsResult.error\n                        ),\n                }}\n              >\n                {props.children}\n              </_Provider>\n            )}\n          </MetricsCompatibilitySumsQuery>\n        )}\n      </MetricsCompatibilityQuery>\n    </Fragment>\n  );\n};\n\nexport const MetricsCardinalityConsumer = _Context.Consumer;\n\nexport const useMetricsCardinalityContext = _useContext;\n\n/**\n * Logic for picking sides of metrics vs. transactions along with the associated warnings.\n */\nfunction getMetricsOutcome(\n  dataCounts: MergedMetricsData | null,\n  hasOtherFallbackCondition: boolean\n) {\n  const fallbackOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: true,\n  };\n  const successOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: false,\n  };\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n  const compatibleProjects = dataCounts.compatible_projects;\n\n  if (hasOtherFallbackCondition) {\n    return fallbackOutcome;\n  }\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n\n  if (checkForSamplingRules(dataCounts)) {\n    return fallbackOutcome;\n  }\n\n  if (checkNoDataFallback(dataCounts)) {\n    return fallbackOutcome;\n  }\n\n  if (checkIncompatibleData(dataCounts)) {\n    return {\n      shouldWarnIncompatibleSDK: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfAllOtherData(dataCounts)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfPartialOtherData(dataCounts)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      compatibleProjects,\n      forceTransactionsOnly: false,\n    };\n  }\n\n  return successOutcome;\n}\n\n/**\n * Fallback if very similar amounts of metrics and transactions are found.\n * No projects with dynamic sampling means no rules have been enabled yet.\n */\nfunction checkForSamplingRules(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  if (!dataCounts.dynamic_sampling_projects?.length) {\n    return true;\n  }\n  if (counts.metricsCount === 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Fallback if no metrics found.\n */\nfunction checkNoDataFallback(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return !counts.metricsCount;\n}\n\n/**\n * Fallback and warn if incompatible data found (old specific SDKs).\n */\nfunction checkIncompatibleData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.nullCount > 0;\n}\n\n/**\n * Fallback and warn about unnamed transactions (specific SDKs).\n */\nfunction checkIfAllOtherData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.unparamCount >= counts.metricsCount;\n}\n\n/**\n * Show metrics but warn about unnamed transactions.\n */\nfunction checkIfPartialOtherData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.unparamCount > 0;\n}\n\n/**\n * Temporary function, can be removed after API changes.\n */\nfunction normalizeCounts({sum}: MergedMetricsData) {\n  try {\n    const metricsCount = Number(sum.metrics);\n    const unparamCount = Number(sum.metrics_unparam);\n    const nullCount = Number(sum.metrics_null);\n    return {\n      metricsCount,\n      unparamCount,\n      nullCount,\n    };\n  } catch (_) {\n    return {\n      metricsCount: 0,\n      unparamCount: 0,\n      nullCount: 0,\n    };\n  }\n}\n\n/**\n * Performance optimization to limit the amount of rows scanned before showing the landing page.\n */\nfunction adjustEventViewTime(eventView: EventView) {\n  const _eventView = eventView.clone();\n\n  if (!_eventView.start && !_eventView.end) {\n    if (!_eventView.statsPeriod) {\n      _eventView.statsPeriod = '1h';\n      _eventView.start = undefined;\n      _eventView.end = undefined;\n    } else {\n      const periodHours = parsePeriodToHours(_eventView.statsPeriod);\n      if (periodHours > 1) {\n        _eventView.statsPeriod = '1h';\n        _eventView.start = undefined;\n        _eventView.end = undefined;\n      }\n    }\n  }\n  return _eventView;\n}\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","import {Component, Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport Field from 'sentry/components/forms/field';\nimport Input from 'sentry/components/input';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n} & ModalRenderProps;\n\ntype State = {\n  error: string | null;\n  metric: TransactionThresholdMetric | undefined;\n  threshold: number | undefined;\n};\n\nclass TransactionThresholdModal extends Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <Fragment>\n        <Field\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </Field>\n        <Field\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </Field>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              aria-label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","props","maxSearchItems","organization","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","getTagList","measurements","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","isCustomMeasurement","kind","FieldKind","getFunctionTags","fieldTags","measurementsWithKind","getMeasurementTags","spanTags","SPAN_OP_BREAKDOWN_FIELDS","semverTags","SEMVER_TAGS","combinedTags","features","assign","omit","TRACING_FIELDS","tagsWithKind","sortedTagKeys","sort","a","b","toLowerCase","localeCompare","has","FieldKey","values","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","customPerformanceMetrics","withTags","getRequestPayload","eventView","location","getEventsAPIPayload","MetricsCompatibilityQuery","children","route","tableData","rest","MetricsCompatibilitySumsQuery","_Provider","_useContext","_Context","createDefinedContext","strict","MetricsCardinalityProvider","canUseMetricsData","value","isLoading","outcome","forceTransactionsOnly","baseDiscoverProps","orgSlug","cursor","EventView","_eventView","clone","start","end","statsPeriod","parsePeriodToHours","undefined","adjustEventViewTime","Fragment","compatabilityResult","sumsResult","getMetricsOutcome","error","Consumer","useMetricsCardinalityContext","dataCounts","hasOtherFallbackCondition","fallbackOutcome","compatibleProjects","compatible_projects","counts","normalizeCounts","dynamic_sampling_projects","length","metricsCount","checkForSamplingRules","checkNoDataFallback","nullCount","checkIncompatibleData","shouldWarnIncompatibleSDK","unparamCount","checkIfAllOtherData","shouldNotifyUnnamedTransactions","checkIfPartialOtherData","sum","Number","metrics","metrics_unparam","metrics_null","_","getBucketWidth","data","bin","computeBuckets","width","bucket","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","getDuration","factor","Math","round","EPSILON","toLocaleString","count","WrappedComponent","WithTags","Component","TagStore","this","setState","componentWillUnmount","unsubscribe","render","state","getDisplayName","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","filterToField","label","t","p100","eventsRouteWithQuery","transaction","projectID","pathname","project","environment","decodeEventsDisplayFilterFromLocation","option","decodeScalar","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","TransactionThresholdMetric","METRIC_CHOICES","TransactionThresholdModal","threshold","transactionThreshold","metric","transactionThresholdMetric","event","preventDefault","closeModal","transactionName","onApply","getProject","transactionThresholdUrl","requestPromise","method","includeAllArgs","id","catch","err","errorMessage","responseJSON","non_field_errors","addErrorMessage","prevState","newState","cloneDeep","set","errors","projectThresholdUrl","projects","find","proj","projectId","renderModalFields","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","options","slice","onChange","handleFieldChange","pattern","target","step","min","Header","Body","Footer","summaryView","getQueryWithAdditionalConditions","transactionSummaryRouteWithQuery","generateQueryStringObject","closeButton","Instruction","tct","to","projectSettings","gap","priority","onClick","handleReset","handleApply","space","modalCss","withApi","withProjects"],"sourceRoot":""}