{"version":3,"file":"chunks/app_components_calendar_dateRangePicker_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"sbAOA,MAyIA,GAzI8B,OAAO,MAAP,qBAAH,YACdA,EAAAA,EAAAA,GAAM,GADQ,oKAWHC,GAAKA,EAAEC,MAAMC,QAXV,+FAmBdF,GAAKA,EAAEC,MAAME,WAnBC,kEA2BdH,GAAKA,EAAEC,MAAMG,SA3BC,4CA+BdJ,GAAKA,EAAEC,MAAMC,QA/BC,gDAmCHF,GAAKA,EAAEC,MAAMC,QAnCV,wGA6CTF,GAAKA,EAAEC,MAAMC,QA7CJ,kCAiDTF,GAAKA,EAAEC,MAAMI,OAjDJ,gmBAgGLN,EAAAA,EAAAA,GAAM,GAhGD,yHA4GdC,GAAKA,EAAEC,MAAME,WA5GC,kCA8GVH,GAAKA,EAAEC,MAAMK,eA9GH,oKA6HHN,GAAKA,EAAEC,MAAMM,QA7HV,2CAiIDP,GAAKA,EAAEC,MAAME,WAjIZ,yCAqIFH,GAAKA,EAAEC,MAAME,WArIX,K,qVCM3B,MAMMK,EAAkB,IAKI,IAJ1BC,SAAUC,EADa,UAEvBC,EAFuB,QAGvBC,KACGC,GACuB,EAC1B,MAAMJ,GAAWK,EAAAA,EAAAA,cACdC,KAXL,SAA0BA,GACxB,YAA4CC,IAArCD,GAAW,OACnB,EAUUE,CAAiBF,IAItBL,IAAmBK,EAAW,QAA9B,GAEF,CAACL,IAGGQ,GAAkBC,EAAAA,EAAAA,UAAQ,IACvB,CAAC,CAACR,YAAWC,UAASQ,IAxBP,aAyBrB,CAACR,EAASD,IAEb,OACE,QAAC,IAAD,WACE,QAAC,KAAD,IAAeE,EAAOJ,SAAUA,EAAUS,OAAQA,KAFtD,EArBIV,EAAAA,YAAAA,kBA4BN,S","sources":["webpack:///./app/components/calendar/calendarStylesWrapper.tsx","webpack:///./app/components/calendar/dateRangePicker.tsx"],"sourcesContent":["import 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\n\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nconst CalendarStylesWrapper = styled('div')`\n  padding: ${space(3)};\n\n  .rdrCalendarWrapper:not(.rdrDateRangeWrapper) .rdrDayHovered .rdrDayNumber:after {\n    border: 0;\n  }\n\n  .rdrSelected,\n  .rdrInRange,\n  .rdrStartEdge,\n  .rdrEndEdge {\n    background-color: ${p => p.theme.active};\n  }\n\n  .rdrStartEdge + .rdrDayStartPreview {\n    background-color: transparent;\n  }\n\n  .rdrDayNumber span {\n    color: ${p => p.theme.textColor};\n  }\n\n  .rdrDayDisabled {\n    background: none;\n  }\n\n  .rdrDayDisabled span {\n    color: ${p => p.theme.subText};\n  }\n\n  .rdrDayToday .rdrDayNumber span {\n    color: ${p => p.theme.active};\n  }\n\n  .rdrDayNumber span:after {\n    background-color: ${p => p.theme.active};\n  }\n\n  .rdrDefinedRangesWrapper,\n  .rdrDateDisplayWrapper,\n  .rdrWeekDays {\n    display: none;\n  }\n\n  .rdrInRange {\n    background: ${p => p.theme.active};\n  }\n\n  .rdrDayInPreview {\n    background: ${p => p.theme.hover};\n  }\n\n  .rdrMonth {\n    width: 300px;\n    font-size: 1.2em;\n    padding: 0;\n  }\n\n  .rdrStartEdge {\n    border-top-left-radius: 1.14em;\n    border-bottom-left-radius: 1.14em;\n  }\n\n  .rdrEndEdge {\n    border-top-right-radius: 1.14em;\n    border-bottom-right-radius: 1.14em;\n  }\n\n  .rdrDayStartPreview,\n  .rdrDayEndPreview,\n  .rdrDayInPreview {\n    border: 0;\n    background: rgba(200, 200, 200, 0.3);\n  }\n\n  .rdrDayStartOfMonth,\n  .rdrDayStartOfWeek {\n    .rdrInRange {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n  }\n\n  .rdrDayEndOfMonth,\n  .rdrDayEndOfWeek {\n    .rdrInRange {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  }\n\n  .rdrStartEdge.rdrEndEdge {\n    border-radius: 1.14em;\n  }\n\n  .rdrMonthAndYearWrapper {\n    padding-bottom: ${space(1)};\n    padding-top: 0;\n    height: 32px;\n  }\n\n  .rdrDay {\n    height: 2.5em;\n  }\n\n  .rdrMonthPicker select,\n  .rdrYearPicker select {\n    background: none;\n    color: ${p => p.theme.textColor};\n    font-weight: normal;\n    font-size: ${p => p.theme.fontSizeLarge};\n    padding: 0;\n  }\n\n  .rdrMonthsVertical {\n    align-items: center;\n  }\n\n  .rdrCalendarWrapper {\n    flex: 1;\n    background: none;\n  }\n\n  .rdrNextPrevButton {\n    background-color: transparent;\n    border: 1px solid ${p => p.theme.border};\n  }\n\n  .rdrPprevButton i {\n    border-right-color: ${p => p.theme.textColor};\n  }\n\n  .rdrNextButton i {\n    border-left-color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default CalendarStylesWrapper;\n","import {useCallback, useMemo} from 'react';\nimport {DateRange, DateRangeProps, Range, RangeKeyDict} from 'react-date-range';\n\nimport CalendarStylesWrapper from './calendarStylesWrapper';\n\nexport type DateRangePickerProps = Omit<DateRangeProps, 'ranges' | 'onChange'> & {\n  onChange: (range: Range) => void;\n  endDate?: Date;\n  startDate?: Date;\n};\n\ntype RangeSelection = {primary: Range};\n\nconst PRIMARY_RANGE_KEY = 'primary';\n\nfunction isRangeSelection(rangesByKey: RangeKeyDict): rangesByKey is RangeSelection {\n  return rangesByKey?.[PRIMARY_RANGE_KEY] !== undefined;\n}\n\nconst DateRangePicker = ({\n  onChange: incomingOnChange,\n  startDate,\n  endDate,\n  ...props\n}: DateRangePickerProps) => {\n  const onChange = useCallback(\n    (rangesByKey: RangeKeyDict) => {\n      if (!isRangeSelection(rangesByKey)) {\n        return;\n      }\n\n      incomingOnChange?.(rangesByKey[PRIMARY_RANGE_KEY]);\n    },\n    [incomingOnChange]\n  );\n\n  const ranges: Range[] = useMemo(() => {\n    return [{startDate, endDate, key: PRIMARY_RANGE_KEY}];\n  }, [endDate, startDate]);\n\n  return (\n    <CalendarStylesWrapper>\n      <DateRange {...props} onChange={onChange} ranges={ranges} />\n    </CalendarStylesWrapper>\n  );\n};\n\nexport default DateRangePicker;\n"],"names":["space","p","theme","active","textColor","subText","hover","fontSizeLarge","border","DateRangePicker","onChange","incomingOnChange","startDate","endDate","props","useCallback","rangesByKey","undefined","isRangeSelection","ranges","useMemo","key"],"sourceRoot":""}