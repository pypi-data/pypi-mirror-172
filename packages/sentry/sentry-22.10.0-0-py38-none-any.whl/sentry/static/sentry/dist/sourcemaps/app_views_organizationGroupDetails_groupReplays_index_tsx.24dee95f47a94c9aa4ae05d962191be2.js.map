{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupReplays_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"2WAsDA,QApCA,YAAmE,IAA5C,UAACA,EAAD,aAAYC,GAAgC,EACjE,MAAMC,GAAMC,EAAAA,EAAAA,KACNC,GAAWC,EAAAA,EAAAA,KACXC,GAAiBC,EAAAA,EAAAA,WAEhBC,EAAMC,IAAWC,EAAAA,EAAAA,UAAgB,CACtCC,gBAAYC,EACZC,YAAY,EACZC,UAAW,KACXC,QAAS,KAGLC,GAAcC,EAAAA,EAAAA,cAAYC,UAC9BT,GAAQU,IAAQ,IACXA,EACHN,YAAY,MAEd,MAAMO,QAAiBC,EAAAA,EAAAA,IAAgB,CACrCnB,MACAD,eACAG,WACAJ,cAEFS,EAAQW,EAAR,GACC,CAAClB,EAAKD,EAAcG,EAAUJ,IASjC,OAPAsB,EAAAA,EAAAA,YAAU,KACHhB,EAAeiB,SAAWjB,EAAeiB,UAAYnB,EAASoB,SACjElB,EAAeiB,QAAUnB,EAASoB,OAClCR,IACD,GACA,CAACA,EAAaZ,EAASoB,SAEnBhB,CACR,C,wxBChCD,MAAMiB,EAAe,IAA+B,IAA9B,MAACC,EAAD,UAAQC,GAAsB,EAClD,MAAMvB,GAAWC,EAAAA,EAAAA,KACXJ,GAAe2B,EAAAA,EAAAA,MACf,QAACC,GAAWH,EAEZ1B,GAAY8B,EAAAA,EAAAA,UAAQ,IACjBC,EAAAA,GAAAA,yBACL,CACEC,GAAI,GACJC,KAAM,GACNC,QAAS,EACTC,OAAQC,EAAAA,GACRC,SAAU,CAACC,OAAOT,EAAQG,KAC1BO,MAAQ,OAAMC,OAAOb,MACrBc,SAASC,EAAAA,EAAAA,IAAatC,EAASmC,MAAMI,KAAMC,EAAAA,KAE7CxC,IAED,CAACA,EAAUyB,EAAQG,GAAIL,KAEpB,QAACZ,EAAD,UAAUD,EAAV,WAAqBD,EAArB,WAAiCF,IAAckC,EAAAA,EAAAA,GAAc,CACjE5C,eACAD,cAGF,OACE,QAAC8C,EAAD,YACE,QAAC,IAAD,CACEjC,WAAYA,EACZE,QAASA,EACTgC,mBAAmB,EACnBJ,KAAM3C,EAAUgD,MAAM,GACtBrC,WAAYA,KAEd,QAAC,IAAD,CAAYG,UAAWA,MAT3B,EAzBIW,EAAAA,YAAAA,eAuCN,MAAMqB,GAAoB,OAAOG,EAAAA,GAAP,sBAAH,2BACKC,GAAKA,EAAEC,MAAMC,SADlB,sBAEDF,GAAKA,EAAEC,MAAME,YAFZ,KAKvB,ICxDMC,EAAyBC,IAC7B,MAAMtD,GAAe2B,EAAAA,EAAAA,KASrB,OACE,QAAC,IAAD,CACE4B,SAAU,CAAC,qBACXvD,aAAcA,EACdwD,eAZJ,WACE,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UAAuBC,EAAAA,EAAAA,GAAE,4CAG9B,EAGC,UAKE,QAAC,EAAD,IAAkBJ,KANtB,EAVID,EAAAA,YAAAA,wBAqBN,S","sources":["webpack:///./app/utils/replays/hooks/useReplayList.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/groupReplays.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/index.tsx"],"sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react';\n\nimport type {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport fetchReplayList from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Options = {\n  eventView: EventView;\n  organization: Organization;\n};\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>>;\n\ntype Result = State;\n\nfunction useReplayList({eventView, organization}: Options): Result {\n  const api = useApi();\n  const location = useLocation<ReplayListLocationQuery>();\n  const querySearchRef = useRef<string>();\n\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n  });\n\n  const loadReplays = useCallback(async () => {\n    setData(prev => ({\n      ...prev,\n      isFetching: true,\n    }));\n    const response = await fetchReplayList({\n      api,\n      organization,\n      location,\n      eventView,\n    });\n    setData(response);\n  }, [api, organization, location, eventView]);\n\n  useEffect(() => {\n    if (!querySearchRef.current || querySearchRef.current !== location.search) {\n      querySearchRef.current = location.search;\n      loadReplays();\n    }\n  }, [loadReplays, location.search]);\n\n  return data;\n}\n\nexport default useReplayList;\n","import {useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport Pagination from 'sentry/components/pagination';\nimport {PageContent} from 'sentry/styles/organization';\nimport type {Group} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {DEFAULT_SORT, REPLAY_LIST_FIELDS} from 'sentry/utils/replays/fetchReplayList';\nimport useReplayList from 'sentry/utils/replays/hooks/useReplayList';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Props = {\n  group: Group;\n  replayIds: string[];\n};\n\nconst GroupReplays = ({group, replayIds}: Props) => {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n  const {project} = group;\n\n  const eventView = useMemo(() => {\n    return EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: '',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [Number(project.id)],\n        query: `id:[${String(replayIds)}]`,\n        orderby: decodeScalar(location.query.sort, DEFAULT_SORT),\n      },\n      location\n    );\n  }, [location, project.id, replayIds]);\n\n  const {replays, pageLinks, isFetching, fetchError} = useReplayList({\n    organization,\n    eventView,\n  });\n\n  return (\n    <StyledPageContent>\n      <ReplayTable\n        isFetching={isFetching}\n        replays={replays}\n        showProjectColumn={false}\n        sort={eventView.sorts[0]}\n        fetchError={fetchError}\n      />\n      <Pagination pageLinks={pageLinks} />\n    </StyledPageContent>\n  );\n};\n\nconst StyledPageContent = styled(PageContent)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nexport default GroupReplays;\n","import Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport GroupReplays from './groupReplays';\n\nconst GroupReplaysContainer = (props: React.ComponentProps<typeof GroupReplays>) => {\n  const organization = useOrganization();\n  function renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  return (\n    <Feature\n      features={['session-replay-ui']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <GroupReplays {...props} />\n    </Feature>\n  );\n};\n\nexport default GroupReplaysContainer;\n"],"names":["eventView","organization","api","useApi","location","useLocation","querySearchRef","useRef","data","setData","useState","fetchError","undefined","isFetching","pageLinks","replays","loadReplays","useCallback","async","prev","response","fetchReplayList","useEffect","current","search","GroupReplays","group","replayIds","useOrganization","project","useMemo","EventView","id","name","version","fields","REPLAY_LIST_FIELDS","projects","Number","query","String","orderby","decodeScalar","sort","DEFAULT_SORT","useReplayList","StyledPageContent","showProjectColumn","sorts","PageContent","p","theme","gray200","background","GroupReplaysContainer","props","features","renderDisabled","type","t"],"sourceRoot":""}