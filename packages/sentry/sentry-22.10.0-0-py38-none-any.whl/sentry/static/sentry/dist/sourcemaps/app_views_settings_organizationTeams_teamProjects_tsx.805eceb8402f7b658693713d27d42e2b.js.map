{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamProjects_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/components/settingsProjectItem.tsx","webpack:///./app/views/settings/organizationTeams/teamProjects.tsx"],"sourcesContent":["import {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport BookmarkStar from 'sentry/components/projects/bookmarkStar';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction ProjectItem({project, organization}: Props) {\n  const [isBookmarked, setBookmarked] = useState(project.isBookmarked);\n\n  return (\n    <Wrapper>\n      <BookmarkStar\n        organization={organization}\n        project={project}\n        isBookmarked={isBookmarked}\n        onToggle={state => setBookmarked(state)}\n      />\n      <ProjectBadge\n        to={`/settings/${organization.slug}/projects/${project.slug}/`}\n        avatarSize={18}\n        project={project}\n      />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  align-items: center;\n  gap: ${space(1.5)};\n`;\n\nexport default ProjectItem;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconFlag, IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {sortProjects} from 'sentry/utils';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ProjectListItem from 'sentry/views/settings/components/settingsProjectItem';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = {\n  error: boolean;\n  linkedProjects: Project[];\n  loading: boolean;\n  pageLinks: null | string;\n  unlinkedProjects: Project[];\n};\n\ntype DropdownAutoCompleteProps = React.ComponentProps<typeof DropdownAutoComplete>;\ntype Item = Parameters<NonNullable<DropdownAutoCompleteProps['onSelect']>>[0];\n\nclass TeamProjects extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    pageLinks: null,\n    unlinkedProjects: [],\n    linkedProjects: [],\n  };\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.params.orgId !== this.props.params.orgId ||\n      prevProps.params.teamId !== this.props.params.teamId\n    ) {\n      this.fetchAll();\n    }\n\n    if (prevProps.location !== this.props.location) {\n      this.fetchTeamProjects();\n    }\n  }\n\n  fetchAll = () => {\n    this.fetchTeamProjects();\n    this.fetchUnlinkedProjects();\n  };\n\n  fetchTeamProjects() {\n    const {\n      location,\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.setState({loading: true});\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: `team:${teamId}`,\n          cursor: location.query.cursor || '',\n        },\n        includeAllArgs: true,\n      })\n      .then(([linkedProjects, _, resp]) => {\n        this.setState({\n          loading: false,\n          error: false,\n          linkedProjects,\n          pageLinks: resp?.getResponseHeader('Link') ?? null,\n        });\n      })\n      .catch(() => {\n        this.setState({loading: false, error: true});\n      });\n  }\n\n  fetchUnlinkedProjects(query = '') {\n    const {\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: query ? `!team:${teamId} ${query}` : `!team:${teamId}`,\n        },\n      })\n      .then(unlinkedProjects => {\n        this.setState({unlinkedProjects});\n      });\n  }\n\n  handleLinkProject = (project: Project, action: string) => {\n    const {orgId, teamId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {\n      method: action === 'add' ? 'POST' : 'DELETE',\n      success: resp => {\n        this.fetchAll();\n        ProjectsStore.onUpdateSuccess(resp);\n        addSuccessMessage(\n          action === 'add'\n            ? t('Successfully added project to team.')\n            : t('Successfully removed project from team')\n        );\n      },\n      error: () => {\n        addErrorMessage(t(\"Wasn't able to change project association.\"));\n      },\n    });\n  };\n\n  handleProjectSelected = (selection: Item) => {\n    const project = this.state.unlinkedProjects.find(p => p.id === selection.value);\n    if (project) {\n      this.handleLinkProject(project, 'add');\n    }\n  };\n\n  handleQueryUpdate = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.fetchUnlinkedProjects(evt.target.value);\n  };\n\n  projectPanelContents(projects: Project[]) {\n    const {organization} = this.props;\n    const access = new Set(organization.access);\n    const canWrite = access.has('org:write');\n\n    return projects.length ? (\n      sortProjects(projects).map(project => (\n        <StyledPanelItem key={project.id}>\n          <ProjectListItem project={project} organization={organization} />\n          <Tooltip\n            disabled={canWrite}\n            title={t('You do not have enough permission to change project association.')}\n          >\n            <Button\n              size=\"sm\"\n              disabled={!canWrite}\n              icon={<IconSubtract isCircled size=\"xs\" />}\n              aria-label={t('Remove')}\n              onClick={() => {\n                this.handleLinkProject(project, 'remove');\n              }}\n            >\n              {t('Remove')}\n            </Button>\n          </Tooltip>\n        </StyledPanelItem>\n      ))\n    ) : (\n      <EmptyMessage size=\"large\" icon={<IconFlag size=\"xl\" />}>\n        {t(\"This team doesn't have access to any projects.\")}\n      </EmptyMessage>\n    );\n  }\n\n  render() {\n    const {linkedProjects, unlinkedProjects, error, loading} = this.state;\n\n    if (error) {\n      return <LoadingError onRetry={() => this.fetchAll()} />;\n    }\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    const access = new Set(this.props.organization.access);\n\n    const otherProjects = unlinkedProjects.map(p => ({\n      value: p.id,\n      searchKey: p.slug,\n      label: <ProjectListElement>{p.slug}</ProjectListElement>,\n    }));\n\n    return (\n      <Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Projects')}</div>\n            <div style={{textTransform: 'none'}}>\n              {!access.has('org:write') ? (\n                <DropdownButton\n                  disabled\n                  title={t('You do not have enough permission to associate a project.')}\n                  size=\"xs\"\n                >\n                  {t('Add Project')}\n                </DropdownButton>\n              ) : (\n                <DropdownAutoComplete\n                  items={otherProjects}\n                  onChange={this.handleQueryUpdate}\n                  onSelect={this.handleProjectSelected}\n                  emptyMessage={t('No projects')}\n                  alignMenu=\"right\"\n                >\n                  {({isOpen}) => (\n                    <DropdownButton isOpen={isOpen} size=\"xs\">\n                      {t('Add Project')}\n                    </DropdownButton>\n                  )}\n                </DropdownAutoComplete>\n              )}\n            </div>\n          </PanelHeader>\n          <PanelBody>{this.projectPanelContents(linkedProjects)}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n      </Fragment>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(2)};\n`;\n\nconst ProjectListElement = styled('div')`\n  padding: ${space(0.25)} 0;\n`;\n\nexport {TeamProjects};\n\nexport default withApi(withOrganization(TeamProjects));\n"],"names":["ProjectItem","project","organization","isBookmarked","setBookmarked","useState","Wrapper","onToggle","state","to","slug","avatarSize","space","TeamProjects","Component","error","loading","pageLinks","unlinkedProjects","linkedProjects","this","fetchTeamProjects","fetchUnlinkedProjects","action","orgId","teamId","props","params","api","request","method","success","resp","fetchAll","ProjectsStore","addSuccessMessage","t","addErrorMessage","selection","find","p","id","value","handleLinkProject","evt","target","componentDidMount","componentDidUpdate","prevProps","location","setState","requestPromise","query","cursor","includeAllArgs","then","_","getResponseHeader","catch","projectPanelContents","projects","canWrite","Set","access","has","length","sortProjects","map","StyledPanelItem","disabled","title","size","icon","isCircled","onClick","render","onRetry","otherProjects","searchKey","label","ProjectListElement","Fragment","hasButtons","style","textTransform","items","onChange","handleQueryUpdate","onSelect","handleProjectSelected","emptyMessage","alignMenu","isOpen","PanelItem","withApi","withOrganization"],"sourceRoot":""}