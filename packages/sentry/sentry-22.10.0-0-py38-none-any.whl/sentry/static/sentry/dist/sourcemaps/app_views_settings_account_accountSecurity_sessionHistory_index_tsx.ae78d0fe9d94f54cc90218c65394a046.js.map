{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_sessionHistory_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/utils.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/sessionRow.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/index.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    /**\n     * The class to apply when the link is 'active'\n     */\n    activeClassName?: string;\n    disabled?: boolean;\n    index?: boolean;\n    /**\n     * Should be should be supplied by the parent component\n     */\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n    query?: string;\n  };\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  router,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const queryData = query ? qs.parse(query) : undefined;\n  const target: LocationDescriptor =\n    typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {PlainRoute} from 'react-router';\nimport {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: PlainRoute[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import space from 'sentry/styles/space';\n\nexport const tableLayout = `\n  display: grid;\n  grid-template-columns: auto 140px 140px;\n  gap ${space(1)};\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\n\nimport {PanelItem} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport space from 'sentry/styles/space';\nimport {InternetProtocol} from 'sentry/types';\n\nimport {tableLayout} from './utils';\n\nfunction SessionRow({\n  ipAddress,\n  lastSeen,\n  firstSeen,\n  countryCode,\n  regionCode,\n}: Omit<InternetProtocol, 'id'>) {\n  return (\n    <SessionPanelItem>\n      <IpAndLocation>\n        <IpAddress>{ipAddress}</IpAddress>\n        {countryCode && regionCode && (\n          <CountryCode>{`${countryCode} (${regionCode})`}</CountryCode>\n        )}\n      </IpAndLocation>\n      <div>\n        <StyledTimeSince date={firstSeen} />\n      </div>\n      <div>\n        <StyledTimeSince date={lastSeen} />\n      </div>\n    </SessionPanelItem>\n  );\n}\n\nexport default SessionRow;\n\nconst IpAddress = styled('div')`\n  margin-bottom: ${space(0.5)};\n  font-weight: bold;\n`;\nconst CountryCode = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst IpAndLocation = styled('div')`\n  flex: 1;\n`;\n\nconst SessionPanelItem = styled(PanelItem)`\n  ${tableLayout};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport ListLink from 'sentry/components/links/listLink';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {InternetProtocol} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport SessionRow from './sessionRow';\nimport {tableLayout} from './utils';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype State = {\n  ipList: Array<InternetProtocol> | null;\n} & AsyncView['state'];\n\nclass SessionHistory extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Session History');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['ipList', '/users/me/ips/']];\n  }\n\n  renderBody() {\n    const {ipList} = this.state;\n\n    if (!ipList) {\n      return null;\n    }\n\n    const {routes, params, location} = this.props;\n    const recreateRouteProps = {routes, params, location};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink\n                to={recreateRoute('', {...recreateRouteProps, stepBack: -1})}\n                index\n              >\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('', recreateRouteProps)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        <Panel>\n          <SessionPanelHeader>\n            <div>{t('Sessions')}</div>\n            <div>{t('First Seen')}</div>\n            <div>{t('Last Seen')}</div>\n          </SessionPanelHeader>\n\n          <PanelBody>\n            {ipList.map(({id, ...ipObj}) => (\n              <SessionRow key={id} {...ipObj} />\n            ))}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default SessionHistory;\n\nconst SessionPanelHeader = styled(PanelHeader)`\n  ${tableLayout}\n  justify-content: initial;\n`;\n"],"names":["ListLink","children","className","isActive","query","router","to","activeClassName","index","disabled","props","queryData","qs","undefined","target","pathname","active","StyledLi","classNames","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","recreateRoute","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","tableLayout","space","SessionRow","ipAddress","lastSeen","firstSeen","countryCode","regionCode","SessionPanelItem","IpAndLocation","IpAddress","CountryCode","StyledTimeSince","date","fontSizeRelativeSmall","TimeSince","PanelItem","SessionHistory","t","getEndpoints","renderBody","ipList","state","recreateRouteProps","Fragment","tabs","underlined","SessionPanelHeader","id","ipObj","PanelHeader"],"sourceRoot":""}