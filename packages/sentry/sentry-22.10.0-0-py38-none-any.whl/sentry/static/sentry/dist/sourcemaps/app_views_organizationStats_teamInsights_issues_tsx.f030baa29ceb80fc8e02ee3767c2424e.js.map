{"version":3,"file":"chunks/app_views_organizationStats_teamInsights_issues_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/organizationStats/teamInsights/teamIssuesAge.tsx","webpack:///./app/views/organizationStats/teamInsights/teamIssuesBreakdown.tsx","webpack:///./app/views/organizationStats/teamInsights/teamResolutionTime.tsx","webpack:///./app/views/organizationStats/teamInsights/teamUnresolvedIssues.tsx","webpack:///./app/views/organizationStats/teamInsights/issues.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport Count from 'sentry/components/count';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport Link from 'sentry/components/links/link';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Group, Organization} from 'sentry/types';\nimport {getTitle} from 'sentry/utils/events';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  teamSlug: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  oldestIssues: Group[] | null;\n  unresolvedIssueAge: Record<string, number> | null;\n};\n\n/**\n * takes \"< 1 hour\" and returns a datetime of 1 hour ago\n */\nfunction parseBucket(bucket: string): number {\n  if (bucket === '> 1 year') {\n    return moment().subtract(1, 'y').subtract(1, 'd').valueOf();\n  }\n\n  const [_, num, unit] = bucket.split(' ');\n  return moment()\n    .subtract(num, unit as any)\n    .valueOf();\n}\n\nconst bucketLabels = {\n  '< 1 hour': t('1 hour'),\n  '< 4 hour': t('4 hours'),\n  '< 12 hour': t('12 hours'),\n  '< 1 day': t('1 day'),\n  '< 1 week': t('1 week'),\n  '< 4 week': t('1 month'),\n  '< 24 week': t('6 months'),\n  '< 1 year': t('1 year'),\n  '> 1 year': t('> 1 year'),\n};\n\nclass TeamIssuesAge extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      oldestIssues: null,\n      unresolvedIssueAge: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, teamSlug} = this.props;\n\n    return [\n      [\n        'oldestIssues',\n        `/teams/${organization.slug}/${teamSlug}/issues/old/`,\n        {query: {limit: 7}},\n      ],\n      [\n        'unresolvedIssueAge',\n        `/teams/${organization.slug}/${teamSlug}/unresolved-issue-age/`,\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {teamSlug} = this.props;\n\n    if (prevProps.teamSlug !== teamSlug) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {unresolvedIssueAge, oldestIssues, loading} = this.state;\n\n    const seriesData = Object.entries(unresolvedIssueAge ?? {})\n      .map(([bucket, value]) => ({\n        name: bucket,\n        value,\n      }))\n      .sort((a, b) => parseBucket(b.name) - parseBucket(a.name));\n\n    return (\n      <div>\n        <ChartWrapper>\n          {loading && <Placeholder height=\"200px\" />}\n          {!loading && (\n            <BarChart\n              style={{height: 190}}\n              legend={{right: 3, top: 0}}\n              yAxis={{minInterval: 1}}\n              xAxis={{\n                splitNumber: seriesData.length,\n                type: 'category',\n                min: 0,\n                axisLabel: {\n                  showMaxLabel: true,\n                  showMinLabel: true,\n                  formatter: (bucket: string) => {\n                    return bucketLabels[bucket] ?? bucket;\n                  },\n                },\n              }}\n              series={[\n                {\n                  seriesName: t('Unresolved Issues'),\n                  silent: true,\n                  data: seriesData,\n                  barCategoryGap: '5%',\n                },\n              ]}\n            />\n          )}\n        </ChartWrapper>\n        <StyledPanelTable\n          isEmpty={!oldestIssues || oldestIssues.length === 0}\n          emptyMessage={t('No unresolved issues for this team’s projects')}\n          headers={[\n            t('Oldest Issues'),\n            <RightAligned key=\"events\">{t('Events')}</RightAligned>,\n            <RightAligned key=\"users\">{t('Users')}</RightAligned>,\n            <RightAligned key=\"age\">\n              {t('Age')} <IconArrow direction=\"down\" size=\"12px\" color=\"gray300\" />\n            </RightAligned>,\n          ]}\n          isLoading={loading}\n        >\n          {oldestIssues?.map(issue => {\n            const {title} = getTitle(issue, organization?.features, false);\n\n            return (\n              <Fragment key={issue.id}>\n                <ProjectTitleContainer>\n                  <ShadowlessProjectBadge\n                    disableLink\n                    hideName\n                    avatarSize={18}\n                    project={issue.project}\n                  />\n                  <TitleOverflow>\n                    <Link\n                      to={{\n                        pathname: `/organizations/${organization.slug}/issues/${issue.id}/`,\n                      }}\n                    >\n                      {title}\n                    </Link>\n                  </TitleOverflow>\n                </ProjectTitleContainer>\n                <RightAligned>\n                  <Count value={issue.count} />\n                </RightAligned>\n                <RightAligned>\n                  <Count value={issue.userCount} />\n                </RightAligned>\n                <RightAligned>\n                  <TimeSince date={issue.firstSeen} />\n                </RightAligned>\n              </Fragment>\n            );\n          })}\n        </StyledPanelTable>\n      </div>\n    );\n  }\n}\n\nexport default TeamIssuesAge;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.15fr 0.15fr 0.25fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  > * {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isEmpty &&\n    css`\n      & > div:last-child {\n        padding: 48px ${space(2)};\n      }\n    `}\n`;\n\nconst RightAligned = styled('span')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst ProjectTitleContainer = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  display: flex;\n  align-items: center;\n`;\n\nconst TitleOverflow = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst ShadowlessProjectBadge = styled(ProjectBadge)`\n  display: inline-flex;\n  align-items: center;\n  margin-right: ${space(1)};\n\n  * > img {\n    box-shadow: none;\n  }\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart, BarChartSeries} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {barAxisLabel, convertDayValueObjectToSeries, sortSeriesByDay} from './utils';\n\ntype StatusCounts = {\n  total: number;\n  deleted?: number;\n  ignored?: number;\n  new?: number;\n  regressed?: number;\n  resolved?: number;\n  unignored?: number;\n};\n\ntype IssuesBreakdown = Record<string, Record<string, StatusCounts>>;\n\ntype Statuses = keyof Omit<StatusCounts, 'total'>;\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projects: Project[];\n  statuses: Statuses[];\n  teamSlug: string;\n  environment?: string;\n} & DateTimeObject;\n\ntype State = AsyncComponent['state'] & {\n  issuesBreakdown: IssuesBreakdown | null;\n};\n\nconst keys = ['deleted', 'ignored', 'resolved', 'unignored', 'regressed', 'new', 'total'];\n\nclass TeamIssuesBreakdown extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      issuesBreakdown: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, start, end, period, utc, teamSlug, statuses, environment} =\n      this.props;\n    const datetime = {start, end, period, utc};\n\n    return [\n      [\n        'issuesBreakdown',\n        `/teams/${organization.slug}/${teamSlug}/issue-breakdown/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n            statuses,\n            environment,\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {start, end, period, utc, teamSlug, projects, environment} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.teamSlug !== teamSlug ||\n      prevProps.environment !== environment ||\n      !isEqual(prevProps.projects, projects)\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {loading} = this.state;\n    const issuesBreakdown = this.state.issuesBreakdown ?? {};\n    const {projects, statuses} = this.props;\n\n    const allReviewedByDay: Record<string, Record<string, number>> = {};\n    // Total statuses & total reviewed keyed by project ID\n    const projectTotals: Record<string, StatusCounts> = {};\n\n    // The issues breakdown is keyed by projectId\n    for (const [projectId, entries] of Object.entries(issuesBreakdown)) {\n      // Each bucket is 1 day\n      for (const [bucket, counts] of Object.entries(entries)) {\n        if (!projectTotals[projectId]) {\n          projectTotals[projectId] = {\n            deleted: 0,\n            ignored: 0,\n            resolved: 0,\n            unignored: 0,\n            regressed: 0,\n            new: 0,\n            total: 0,\n          };\n        }\n\n        for (const key of keys) {\n          projectTotals[projectId][key] += counts[key];\n        }\n\n        if (!allReviewedByDay[projectId]) {\n          allReviewedByDay[projectId] = {};\n        }\n\n        if (allReviewedByDay[projectId][bucket] === undefined) {\n          allReviewedByDay[projectId][bucket] = counts.total;\n        } else {\n          allReviewedByDay[projectId][bucket] += counts.total;\n        }\n      }\n    }\n\n    const sortedProjectIds = Object.entries(projectTotals)\n      .map(([projectId, {total}]) => ({projectId, total}))\n      .sort((a, b) => b.total - a.total);\n\n    const allSeries = Object.keys(allReviewedByDay).map(\n      (projectId, idx): BarChartSeries => ({\n        seriesName: ProjectsStore.getById(projectId)?.slug ?? projectId,\n        data: sortSeriesByDay(convertDayValueObjectToSeries(allReviewedByDay[projectId])),\n        animationDuration: 500,\n        animationDelay: idx * 500,\n        silent: true,\n        barCategoryGap: '5%',\n      })\n    );\n\n    return (\n      <Fragment>\n        <IssuesChartWrapper>\n          {loading && <Placeholder height=\"200px\" />}\n          {!loading && (\n            <BarChart\n              style={{height: 200}}\n              stacked\n              isGroupedByDate\n              useShortDate\n              legend={{right: 0, top: 0}}\n              xAxis={barAxisLabel(allSeries[0]?.data.length ?? 0)}\n              yAxis={{minInterval: 1}}\n              series={allSeries}\n            />\n          )}\n        </IssuesChartWrapper>\n        <CollapsePanel items={sortedProjectIds.length}>\n          {({isExpanded, showMoreButton}) => (\n            <Fragment>\n              <StyledPanelTable\n                numActions={statuses.length}\n                headers={[\n                  t('Project'),\n                  ...statuses.map(action => (\n                    <AlignRight key={action}>{t(action)}</AlignRight>\n                  )),\n                  <AlignRight key=\"total\">\n                    {t('total')}{' '}\n                    <IconArrow direction=\"down\" size=\"12px\" color=\"gray300\" />\n                  </AlignRight>,\n                ]}\n                isLoading={loading}\n              >\n                {sortedProjectIds.map(({projectId}, idx) => {\n                  const project = projects.find(p => p.id === projectId);\n\n                  if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                    return null;\n                  }\n\n                  return (\n                    <Fragment key={projectId}>\n                      <ProjectBadgeContainer>\n                        {project && <ProjectBadge avatarSize={18} project={project} />}\n                      </ProjectBadgeContainer>\n                      {statuses.map(action => (\n                        <AlignRight key={action}>\n                          {projectTotals[projectId][action]}\n                        </AlignRight>\n                      ))}\n                      <AlignRight>{projectTotals[projectId].total}</AlignRight>\n                    </Fragment>\n                  );\n                })}\n              </StyledPanelTable>\n              {!loading && showMoreButton}\n            </Fragment>\n          )}\n        </CollapsePanel>\n      </Fragment>\n    );\n  }\n}\n\nexport default TeamIssuesBreakdown;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n`;\n\nconst IssuesChartWrapper = styled(ChartWrapper)`\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)<{numActions: number}>`\n  grid-template-columns: 1fr ${p => ' 0.2fr'.repeat(p.numActions)} 0.2fr;\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n`;\n","import styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {barAxisLabel, sortSeriesByDay} from './utils';\n\ntype TimeToResolution = Record<string, {avg: number; count: number}>;\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  teamSlug: string;\n  environment?: string;\n} & DateTimeObject;\n\ntype State = AsyncComponent['state'] & {\n  resolutionTime: TimeToResolution | null;\n};\n\nclass TeamResolutionTime extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      resolutionTime: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, start, end, period, utc, teamSlug, environment} = this.props;\n    const datetime = {start, end, period, utc};\n\n    return [\n      [\n        'resolutionTime',\n        `/teams/${organization.slug}/${teamSlug}/time-to-resolution/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n            environment,\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {start, end, period, utc, teamSlug, environment} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.teamSlug !== teamSlug ||\n      prevProps.environment !== environment\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return (\n      <ChartWrapper>\n        <LoadingIndicator />\n      </ChartWrapper>\n    );\n  }\n\n  renderBody() {\n    const {resolutionTime} = this.state;\n    const data = Object.entries(resolutionTime ?? {}).map(([bucket, {avg}]) => ({\n      value: avg,\n      name: new Date(bucket).getTime(),\n    }));\n    const seriesData = sortSeriesByDay(data);\n\n    return (\n      <ChartWrapper>\n        <BarChart\n          style={{height: 190}}\n          isGroupedByDate\n          useShortDate\n          period=\"7d\"\n          tooltip={{\n            valueFormatter: (value: number) => getDuration(value, 1),\n          }}\n          yAxis={{\n            // Each yAxis marker will increase by 1 day\n            minInterval: 86400,\n            axisLabel: {\n              formatter: (value: number) => {\n                if (value === 0) {\n                  return '';\n                }\n\n                return getDuration(value, 0, true, true);\n              },\n            },\n          }}\n          legend={{right: 0, top: 0}}\n          xAxis={barAxisLabel(seriesData.length)}\n          series={[\n            {\n              seriesName: t('Time to Resolution'),\n              data: seriesData,\n              silent: true,\n              barCategoryGap: '5%',\n            },\n          ]}\n        />\n      </ChartWrapper>\n    );\n  }\n}\n\nexport default TeamResolutionTime;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport type {Color} from 'sentry/utils/theme';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {\n  barAxisLabel,\n  convertDayValueObjectToSeries,\n  groupByTrend,\n  sortSeriesByDay,\n} from './utils';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projects: Project[];\n  teamSlug: string;\n  environment?: string;\n} & DateTimeObject;\n\ntype UnresolvedCount = {unresolved: number};\ntype ProjectReleaseCount = Record<string, Record<string, UnresolvedCount>>;\n\ntype State = AsyncComponent['state'] & {\n  expandTable: boolean;\n  /** weekly selected date range */\n  periodIssues: ProjectReleaseCount | null;\n};\n\nclass TeamUnresolvedIssues extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      periodIssues: null,\n      expandTable: false,\n    };\n  }\n\n  getEndpoints() {\n    const {organization, start, end, period, utc, teamSlug, environment} = this.props;\n\n    const datetime = {start, end, period, utc};\n\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [\n      [\n        'periodIssues',\n        `/teams/${organization.slug}/${teamSlug}/all-unresolved-issues/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n            environment,\n          },\n        },\n      ],\n    ];\n\n    return endpoints;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {teamSlug, start, end, period, utc, environment} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.environment !== environment ||\n      prevProps.teamSlug !== teamSlug\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getTotalUnresolved(projectId: number): number {\n    const {periodIssues} = this.state;\n\n    const entries = Object.values(periodIssues?.[projectId] ?? {});\n    const total = entries.reduce((acc, current) => acc + current.unresolved, 0);\n\n    return Math.round(total / entries.length);\n  }\n\n  handleExpandTable = () => {\n    this.setState({expandTable: true});\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {projects, period} = this.props;\n    const {loading} = this.state;\n    const periodIssues = this.state.periodIssues ?? {};\n\n    const projectTotals: Record<\n      string,\n      {percentChange: number; periodAvg: number; projectId: string; today: number}\n    > = {};\n    for (const projectId of Object.keys(periodIssues)) {\n      const periodAvg = this.getTotalUnresolved(Number(projectId));\n      const projectPeriodEntries = Object.values(periodIssues?.[projectId] ?? {});\n      const today =\n        projectPeriodEntries[projectPeriodEntries.length - 1]?.unresolved ?? 0;\n      const percentChange = Math.abs((today - periodAvg) / periodAvg);\n      projectTotals[projectId] = {\n        projectId,\n        periodAvg,\n        today,\n        percentChange: Number.isNaN(percentChange) ? 0 : percentChange,\n      };\n    }\n\n    const sortedProjects = projects\n      .map(project => ({project, trend: projectTotals[project.id]?.percentChange ?? 0}))\n      .sort((a, b) => Math.abs(b.trend) - Math.abs(a.trend));\n\n    const groupedProjects = groupByTrend(sortedProjects);\n\n    // All data will contain all pairs of [day, unresolved_count].\n    const allData = Object.values(periodIssues).flatMap(data =>\n      Object.entries(data).map(\n        ([bucket, {unresolved}]) => [bucket, unresolved] as [string, number]\n      )\n    );\n    // Total by day for all projects\n    const totalByDay = allData.reduce((acc, [bucket, unresolved]) => {\n      if (acc[bucket] === undefined) {\n        acc[bucket] = 0;\n      }\n      acc[bucket] += unresolved;\n      return acc;\n    }, {});\n\n    const seriesData = sortSeriesByDay(convertDayValueObjectToSeries(totalByDay));\n\n    return (\n      <div>\n        <ChartWrapper>\n          {loading && <Placeholder height=\"200px\" />}\n          {!loading && (\n            <BarChart\n              style={{height: 190}}\n              isGroupedByDate\n              useShortDate\n              legend={{right: 3, top: 0}}\n              yAxis={{minInterval: 1}}\n              xAxis={barAxisLabel(seriesData.length)}\n              series={[\n                {\n                  seriesName: t('Unresolved Issues'),\n                  silent: true,\n                  data: seriesData,\n                  barCategoryGap: '6%',\n                },\n              ]}\n            />\n          )}\n        </ChartWrapper>\n        <CollapsePanel items={groupedProjects.length}>\n          {({isExpanded, showMoreButton}) => (\n            <Fragment>\n              <StyledPanelTable\n                isEmpty={projects.length === 0}\n                isLoading={loading}\n                headers={[\n                  t('Project'),\n                  <RightAligned key=\"last\">\n                    {tct('Last [period] Average', {period})}\n                  </RightAligned>,\n                  <RightAligned key=\"curr\">{t('Today')}</RightAligned>,\n                  <RightAligned key=\"diff\">{t('Change')}</RightAligned>,\n                ]}\n              >\n                {groupedProjects.map(({project}, idx) => {\n                  const totals = projectTotals[project.id] ?? {};\n\n                  if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                    return null;\n                  }\n\n                  return (\n                    <Fragment key={project.id}>\n                      <ProjectBadgeContainer>\n                        <ProjectBadge avatarSize={18} project={project} />\n                      </ProjectBadgeContainer>\n\n                      <ScoreWrapper>{totals.periodAvg}</ScoreWrapper>\n                      <ScoreWrapper>{totals.today}</ScoreWrapper>\n                      <ScoreWrapper>\n                        <SubText\n                          color={\n                            totals.percentChange === 0\n                              ? 'gray300'\n                              : totals.percentChange > 0\n                              ? 'red300'\n                              : 'green300'\n                          }\n                        >\n                          {formatPercentage(\n                            Number.isNaN(totals.percentChange) ? 0 : totals.percentChange,\n                            0\n                          )}\n                          <PaddedIconArrow\n                            direction={totals.percentChange > 0 ? 'up' : 'down'}\n                            size=\"xs\"\n                          />\n                        </SubText>\n                      </ScoreWrapper>\n                    </Fragment>\n                  );\n                })}\n              </StyledPanelTable>\n              {!loading && showMoreButton}\n            </Fragment>\n          )}\n        </CollapsePanel>\n      </div>\n    );\n  }\n}\n\nexport default TeamUnresolvedIssues;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.2fr 0.2fr 0.2fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst RightAligned = styled('span')`\n  text-align: right;\n`;\n\nconst ScoreWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  text-align: right;\n`;\n\nconst PaddedIconArrow = styled(IconArrow)`\n  margin: 0 ${space(0.5)};\n`;\n\nconst SubText = styled('div')<{color: Color}>`\n  color: ${p => p.theme[p.color]};\n`;\n","import {Fragment, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {TeamWithProjects} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport localStorage from 'sentry/utils/localStorage';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useTeams from 'sentry/utils/useTeams';\n\nimport Header from '../header';\n\nimport TeamStatsControls from './controls';\nimport DescriptionCard from './descriptionCard';\nimport TeamIssuesAge from './teamIssuesAge';\nimport TeamIssuesBreakdown from './teamIssuesBreakdown';\nimport TeamResolutionTime from './teamResolutionTime';\nimport TeamUnresolvedIssues from './teamUnresolvedIssues';\nimport {dataDatetime} from './utils';\n\ntype Props = RouteComponentProps<{orgId: string}, {}>;\n\nfunction TeamStatsIssues({location, router}: Props) {\n  const organization = useOrganization();\n  const {teams, initiallyLoaded} = useTeams({provideUserTeams: true});\n\n  const query = location?.query ?? {};\n  const localStorageKey = `teamInsightsSelectedTeamId:${organization.slug}`;\n\n  let localTeamId: string | null | undefined =\n    query.team ?? localStorage.getItem(localStorageKey);\n  if (localTeamId && !teams.find(team => team.id === localTeamId)) {\n    localTeamId = null;\n  }\n  const currentTeamId = localTeamId ?? teams[0]?.id;\n  const currentTeam = teams.find(team => team.id === currentTeamId) as\n    | TeamWithProjects\n    | undefined;\n  const projects = currentTeam?.projects ?? [];\n  const environment = query.environment;\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('team_insights.viewed', {\n      organization,\n    });\n  }, [organization]);\n\n  const {period, start, end, utc} = dataDatetime(query);\n\n  if (teams.length === 0) {\n    return (\n      <NoProjectMessage organization={organization} superuserNeedsToBeProjectMember />\n    );\n  }\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('Team Issues')} orgSlug={organization.slug} />\n      <Header organization={organization} activeTab=\"issues\" />\n\n      <Body>\n        <TeamStatsControls\n          showEnvironment\n          location={location}\n          router={router}\n          currentTeam={currentTeam}\n          currentEnvironment={environment}\n        />\n\n        {!initiallyLoaded && <LoadingIndicator />}\n        {initiallyLoaded && (\n          <Layout.Main fullWidth>\n            <DescriptionCard\n              title={t('All Unresolved Issues')}\n              description={t(\n                'This includes New and Returning issues in the last 7 days as well as those that haven’t been resolved or ignored in the past.'\n              )}\n            >\n              <TeamUnresolvedIssues\n                projects={projects}\n                organization={organization}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start}\n                end={end}\n                utc={utc}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('New and Returning Issues')}\n              description={t(\n                'The new, regressed, and unignored issues that were assigned to your team.'\n              )}\n            >\n              <TeamIssuesBreakdown\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n                statuses={['new', 'regressed', 'unignored']}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Issues Triaged')}\n              description={t(\n                'How many new and returning issues were reviewed by your team each week. Reviewing an issue includes marking as reviewed, resolving, assigning to another team, or deleting.'\n              )}\n            >\n              <TeamIssuesBreakdown\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                environment={environment}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n                statuses={['resolved', 'ignored', 'deleted']}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Age of Unresolved Issues')}\n              description={t('How long ago since unresolved issues were first created.')}\n            >\n              <TeamIssuesAge organization={organization} teamSlug={currentTeam!.slug} />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Time to Resolution')}\n              description={t(\n                `The mean time it took for issues to be resolved by your team.`\n              )}\n            >\n              <TeamResolutionTime\n                organization={organization}\n                environment={environment}\n                teamSlug={currentTeam!.slug}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n              />\n            </DescriptionCard>\n          </Layout.Main>\n        )}\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default TeamStatsIssues;\n\nconst Body = styled(Layout.Body)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    display: block;\n  }\n`;\n"],"names":["parseBucket","bucket","moment","subtract","valueOf","_","num","unit","split","bucketLabels","t","TeamIssuesAge","AsyncComponent","getDefaultState","super","oldestIssues","unresolvedIssueAge","getEndpoints","organization","teamSlug","this","props","slug","query","limit","componentDidUpdate","prevProps","remountComponent","renderLoading","renderBody","loading","state","seriesData","Object","entries","map","value","name","sort","a","b","ChartWrapper","height","style","legend","right","top","yAxis","minInterval","xAxis","splitNumber","length","type","min","axisLabel","showMaxLabel","showMinLabel","formatter","series","seriesName","silent","data","barCategoryGap","StyledPanelTable","isEmpty","emptyMessage","headers","RightAligned","direction","size","color","isLoading","issue","title","getTitle","features","Fragment","ProjectTitleContainer","ShadowlessProjectBadge","disableLink","hideName","avatarSize","project","TitleOverflow","to","pathname","id","count","userCount","date","firstSeen","space","p","theme","border","PanelTable","fontSizeMedium","css","overflowEllipsis","ProjectBadge","keys","TeamIssuesBreakdown","issuesBreakdown","start","end","period","utc","statuses","environment","datetime","normalizeDateTimeParams","projects","isEqual","allReviewedByDay","projectTotals","projectId","counts","deleted","ignored","resolved","unignored","regressed","new","total","key","undefined","sortedProjectIds","allSeries","idx","ProjectsStore","sortSeriesByDay","convertDayValueObjectToSeries","animationDuration","animationDelay","IssuesChartWrapper","stacked","isGroupedByDate","useShortDate","barAxisLabel","items","isExpanded","showMoreButton","numActions","action","AlignRight","find","COLLAPSE_COUNT","repeat","TeamResolutionTime","resolutionTime","avg","Date","getTime","tooltip","valueFormatter","getDuration","TeamUnresolvedIssues","setState","expandTable","periodIssues","getTotalUnresolved","values","reduce","acc","current","unresolved","Math","round","periodAvg","Number","projectPeriodEntries","today","percentChange","abs","isNaN","sortedProjects","trend","groupedProjects","groupByTrend","totalByDay","flatMap","tct","totals","ScoreWrapper","SubText","formatPercentage","PaddedIconArrow","IconArrow","TeamStatsIssues","location","router","useOrganization","teams","initiallyLoaded","useTeams","provideUserTeams","localStorageKey","localTeamId","team","localStorage","currentTeamId","currentTeam","useEffect","trackAdvancedAnalyticsEvent","dataDatetime","superuserNeedsToBeProjectMember","orgSlug","activeTab","Body","showEnvironment","currentEnvironment","fullWidth","description","toString","Layout","breakpoints","medium"],"sourceRoot":""}