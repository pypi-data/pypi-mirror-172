{"version":3,"file":"chunks/app_views_settings_organizationAuth_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationAuth/providerItem.tsx","webpack:///./app/views/settings/organizationAuth/organizationAuthList.tsx","webpack:///./app/views/settings/organizationAuth/index.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {ReactNode} from 'react';\n\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'> & {\n    message?: ReactNode;\n  };\n\nconst PermissionAlert = ({\n  access = ['org:write'],\n  message = t(\n    'These settings can only be edited by users with the organization owner or manager role.'\n  ),\n  ...props\n}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" showIcon {...props}>\n          {message}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import styled from '@emotion/styled';\n\nimport Access from 'sentry/components/acl/access';\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport Button from 'sentry/components/button';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport {PanelItem} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport {IconLock} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AuthProvider} from 'sentry/types';\nimport {FeatureDisabledHooks} from 'sentry/types/hooks';\nimport {descopeFeatureName} from 'sentry/utils';\n\ntype RenderInstallButtonProps = {\n  hasFeature: boolean;\n  /**\n   * We pass the provider so that it may be passed into any hook provided\n   * callbacks.\n   */\n  provider: AuthProvider;\n};\n\ntype LockedFeatureProps = {\n  features: string[];\n  provider: AuthProvider;\n  className?: string;\n};\n\ntype FeatureRenderProps = {\n  features: string[];\n  hasFeature: boolean;\n  renderDisabled: (p: LockedFeatureProps) => React.ReactNode;\n  renderInstallButton: (p: RenderInstallButtonProps) => React.ReactNode;\n  children?: (p: FeatureRenderProps) => React.ReactNode;\n};\n\ntype Props = {\n  active: boolean;\n  provider: AuthProvider;\n  onConfigure?: (providerKey: string, e: React.MouseEvent) => void;\n};\n\nconst ProviderItem = ({provider, active, onConfigure}: Props) => {\n  const handleConfigure = (e: React.MouseEvent) => {\n    onConfigure?.(provider.key, e);\n  };\n\n  const renderDisabledLock = (p: LockedFeatureProps) => (\n    <LockedFeature provider={p.provider} features={p.features} />\n  );\n\n  const defaultRenderInstallButton = ({hasFeature}: RenderInstallButtonProps) => (\n    <Access access={['org:write']}>\n      {({hasAccess}) => (\n        <Button\n          type=\"submit\"\n          name=\"provider\"\n          size=\"sm\"\n          value={provider.key}\n          disabled={!hasFeature || !hasAccess}\n          onClick={handleConfigure}\n        >\n          {t('Configure')}\n        </Button>\n      )}\n    </Access>\n  );\n\n  // TODO(epurkhiser): We should probably use a more explicit hook name,\n  // instead of just the feature names (sso-basic, sso-saml2, etc).\n  const featureKey = provider.requiredFeature;\n  const hookName = featureKey\n    ? (`feature-disabled:${descopeFeatureName(featureKey)}` as keyof FeatureDisabledHooks)\n    : null;\n\n  const featureProps = hookName ? {hookName} : {};\n\n  const getProviderDescription = providerName => {\n    if (providerName === 'SAML2') {\n      return t(\n        'your preferred SAML2 compliant provider like Ping Identity, Google SAML, Keycloak, or VMware Identity Manager'\n      );\n    }\n\n    if (providerName === 'Google') {\n      return t('Google (OAuth)');\n    }\n\n    return providerName;\n  };\n\n  return (\n    <Feature\n      {...featureProps}\n      features={[featureKey].filter(f => f)}\n      renderDisabled={({children, ...props}) =>\n        typeof children === 'function' &&\n        // TODO(ts): the Feature component isn't correctly templatized to allow\n        // for custom props in the renderDisabled function\n        children({...props, renderDisabled: renderDisabledLock as any})\n      }\n    >\n      {({\n        hasFeature,\n        features,\n        renderDisabled,\n        renderInstallButton,\n      }: FeatureRenderProps) => (\n        <PanelItem center>\n          <ProviderInfo>\n            <ProviderLogo\n              className={`provider-logo ${provider.name\n                .replace(/\\s/g, '-')\n                .toLowerCase()}`}\n            />\n            <div>\n              <ProviderName>{provider.name}</ProviderName>\n              <ProviderDescription>\n                {t(\n                  'Enable your organization to sign in with %s.',\n                  getProviderDescription(provider.name)\n                )}\n              </ProviderDescription>\n            </div>\n          </ProviderInfo>\n\n          <FeatureBadge>\n            {!hasFeature && renderDisabled({provider, features})}\n          </FeatureBadge>\n\n          <div>\n            {active ? (\n              <ActiveIndicator />\n            ) : (\n              (renderInstallButton ?? defaultRenderInstallButton)({provider, hasFeature})\n            )}\n          </div>\n        </PanelItem>\n      )}\n    </Feature>\n  );\n};\n\nexport default ProviderItem;\n\nconst ProviderInfo = styled('div')`\n  flex: 1;\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(2)};\n`;\n\nconst ProviderLogo = styled('div')`\n  height: 36px;\n  width: 36px;\n  border-radius: 3px;\n  margin-right: 0;\n  top: auto;\n`;\n\nconst ProviderName = styled('div')`\n  font-weight: bold;\n`;\n\nconst ProviderDescription = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.subText};\n`;\n\nconst FeatureBadge = styled('div')`\n  flex: 1;\n`;\n\nconst ActiveIndicator = styled('div')`\n  background: ${p => p.theme.green300};\n  color: ${p => p.theme.white};\n  padding: ${space(1)} ${space(1.5)};\n  border-radius: 2px;\n  font-size: 0.8em;\n`;\n\nActiveIndicator.defaultProps = {\n  children: t('Active'),\n};\n\nconst DisabledHovercard = styled(Hovercard)`\n  width: 350px;\n`;\n\nconst LockedFeature = ({provider, features, className}: LockedFeatureProps) => (\n  <DisabledHovercard\n    containerClassName={className}\n    body={\n      <FeatureDisabled\n        features={features}\n        hideHelpToggle\n        message={t('%s SSO is disabled.', provider.name)}\n        featureName={t('SSO Auth')}\n      />\n    }\n  >\n    <Tag icon={<IconLock isSolid />}>{t('disabled')}</Tag>\n  </DisabledHovercard>\n);\n","import EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {AuthProvider, Organization} from 'sentry/types';\nimport {descopeFeatureName} from 'sentry/utils';\nimport getCsrfToken from 'sentry/utils/getCsrfToken';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/organization/permissionAlert';\n\nimport ProviderItem from './providerItem';\n\nconst PROVIDER_POPULARITY: Record<string, number> = {\n  google: 0,\n  github: 1,\n  okta: 2,\n  'active-directory': 3,\n  saml2: 4,\n  onelogin: 5,\n  rippling: 6,\n  auth0: 7,\n  jumpcloud: 8,\n};\n\ntype Props = {\n  organization: Organization;\n  providerList: AuthProvider[];\n  activeProvider?: AuthProvider;\n};\n\nconst OrganizationAuthList = ({organization, providerList, activeProvider}: Props) => {\n  const features = organization.features;\n\n  // Sort provider list twice: first, by popularity,\n  // and then a second time, to sort unavailable providers for the current plan to the end of the list.\n  const sortedByPopularity = (providerList ?? []).sort((a, b) => {\n    if (!(a.key in PROVIDER_POPULARITY)) {\n      return -1;\n    }\n    if (!(b.key in PROVIDER_POPULARITY)) {\n      return 1;\n    }\n    if (PROVIDER_POPULARITY[a.key] === PROVIDER_POPULARITY[b.key]) {\n      return 0;\n    }\n    return PROVIDER_POPULARITY[a.key] > PROVIDER_POPULARITY[b.key] ? 1 : -1;\n  });\n\n  const list = sortedByPopularity.sort((a, b) => {\n    const aEnabled = features.includes(descopeFeatureName(a.requiredFeature));\n    const bEnabled = features.includes(descopeFeatureName(b.requiredFeature));\n    if (aEnabled === bEnabled) {\n      return 0;\n    }\n    return aEnabled ? -1 : 1;\n  });\n\n  const warn2FADisable =\n    organization.require2FA &&\n    list.some(({requiredFeature}) =>\n      features.includes(descopeFeatureName(requiredFeature))\n    );\n\n  return (\n    <div className=\"sso\">\n      <SettingsPageHeader title=\"Authentication\" />\n      <PermissionAlert />\n      <Panel>\n        <PanelHeader>{t('Choose a provider')}</PanelHeader>\n        <PanelBody>\n          {!activeProvider && (\n            <PanelAlert type=\"info\">\n              {tct(\n                'Get started with Single Sign-on for your organization by selecting a provider. Read more in our [link:SSO documentation].',\n                {\n                  link: (\n                    <ExternalLink href=\"https://docs.sentry.io/product/accounts/sso/\" />\n                  ),\n                }\n              )}\n            </PanelAlert>\n          )}\n\n          {warn2FADisable && (\n            <PanelAlert type=\"warning\">\n              {t('Require 2FA will be disabled if you enable SSO.')}\n            </PanelAlert>\n          )}\n\n          <form\n            action={`/organizations/${organization.slug}/auth/configure/`}\n            method=\"POST\"\n          >\n            <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={getCsrfToken()} />\n            <input type=\"hidden\" name=\"init\" value=\"1\" />\n\n            {list.map(provider => (\n              <ProviderItem\n                key={provider.key}\n                provider={provider}\n                active={!!activeProvider && provider.key === activeProvider.key}\n              />\n            ))}\n            {list.length === 0 && (\n              <EmptyMessage>\n                {t('No authentication providers are available.')}\n              </EmptyMessage>\n            )}\n          </form>\n        </PanelBody>\n      </Panel>\n    </div>\n  );\n};\n\nexport default withOrganization(OrganizationAuthList);\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\nimport {AuthProvider, Organization} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport OrganizationAuthList from './organizationAuthList';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{orgId: string}, {}> & {\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  provider: AuthProvider | null;\n  providerList: AuthProvider[] | null;\n};\n\nclass OrganizationAuth extends AsyncView<Props, State> {\n  componentDidUpdate() {\n    const access = this.props.organization.access;\n\n    if (this.state.provider && access.includes('org:write')) {\n      // If SSO provider is configured, keep showing loading while we redirect\n      // to django configuration view\n      const path = `/organizations/${this.props.params.orgId}/auth/configure/`;\n\n      // Don't break the back button by first replacing the current history\n      // state so pressing back skips this react view.\n      this.props.router.replace(path);\n      window.location.assign(path);\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [\n      ['providerList', `/organizations/${this.props.params.orgId}/auth-providers/`],\n      ['provider', `/organizations/${this.props.params.orgId}/auth-provider/`],\n    ];\n  }\n\n  getTitle() {\n    return routeTitleGen(t('Auth Settings'), this.props.organization.slug, false);\n  }\n\n  /**\n   * TODO(epurkhiser): This does not work right now as we still fallback to the\n   * old SSO auth configuration page\n   */\n  handleSendReminders = (_provider: AuthProvider) => {\n    this.setState({sendRemindersBusy: true});\n\n    this.api.request(\n      `/organizations/${this.props.params.orgId}/auth-provider/send-reminders/`,\n      {\n        method: 'POST',\n        data: {},\n        success: () => addSuccessMessage(t('Sent reminders to members')),\n        error: () => addErrorMessage(t('Failed to send reminders')),\n        complete: () => this.setState({sendRemindersBusy: false}),\n      }\n    );\n  };\n\n  /**\n   * TODO(epurkhiser): This does not work right now as we still fallback to the\n   * old SSO auth configuration page\n   */\n  handleConfigure = (provider: AuthProvider) => {\n    this.setState({busy: true});\n\n    this.api.request(`/organizations/${this.props.params.orgId}/auth-provider/`, {\n      method: 'POST',\n      data: {provider, init: true},\n      success: data => {\n        // Redirect to auth provider URL\n        if (data && data.auth_url) {\n          window.location.href = data.auth_url;\n        }\n      },\n      error: () => {\n        this.setState({busy: false});\n      },\n    });\n  };\n\n  /**\n   * TODO(epurkhiser): This does not work right now as we still fallback to the\n   * old SSO auth configuration page\n   */\n  handleDisableProvider = (provider: AuthProvider) => {\n    this.setState({busy: true});\n\n    this.api.request(`/organizations/${this.props.params.orgId}/auth-provider/`, {\n      method: 'DELETE',\n      data: {provider},\n      success: () => {\n        this.setState({provider: null, busy: false});\n      },\n      error: () => {\n        this.setState({busy: false});\n      },\n    });\n  };\n\n  renderBody() {\n    const {providerList, provider} = this.state;\n\n    if (providerList === null) {\n      return null;\n    }\n\n    if (this.props.organization.access.includes('org:write') && provider) {\n      // If SSO provider is configured, keep showing loading while we redirect\n      // to django configuration view\n      return this.renderLoading();\n    }\n\n    const activeProvider = providerList?.find(p => p.key === provider?.key);\n\n    return (\n      <OrganizationAuthList activeProvider={activeProvider} providerList={providerList} />\n    );\n  }\n}\n\nexport default withOrganization(OrganizationAuth);\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","PermissionAlert","access","message","t","props","hasAccess","type","showIcon","ProviderItem","provider","active","onConfigure","handleConfigure","e","key","renderDisabledLock","p","LockedFeature","features","defaultRenderInstallButton","hasFeature","name","size","value","disabled","onClick","featureKey","requiredFeature","hookName","descopeFeatureName","featureProps","filter","f","renderDisabled","children","renderInstallButton","center","ProviderInfo","ProviderLogo","className","replace","toLowerCase","ProviderName","ProviderDescription","providerName","FeatureBadge","ActiveIndicator","space","theme","fontSizeSmall","subText","green300","white","defaultProps","DisabledHovercard","Hovercard","containerClassName","body","hideHelpToggle","featureName","icon","isSolid","PROVIDER_POPULARITY","google","github","okta","saml2","onelogin","rippling","auth0","jumpcloud","OrganizationAuthList","organization","providerList","activeProvider","list","sort","a","b","aEnabled","includes","warn2FADisable","require2FA","some","tct","link","href","action","slug","method","getCsrfToken","map","length","withOrganization","OrganizationAuth","_provider","setState","sendRemindersBusy","api","request","params","orgId","data","success","addSuccessMessage","error","addErrorMessage","complete","busy","init","auth_url","window","location","componentDidUpdate","state","path","router","assign","getEndpoints","routeTitleGen","renderBody","renderLoading","find"],"sourceRoot":""}