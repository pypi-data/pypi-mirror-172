{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionEvents_eventsTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/operationSort.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/eventsTable.tsx"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n  useEvents?: boolean;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route={endpoint}\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n\n  return useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: endpoint,\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n}\n\nexport default DiscoverQuery;\n","import {Component} from 'react';\nimport {createPortal} from 'react-dom';\nimport {Manager, Popper, Reference} from 'react-popper';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport {GetActorPropsFn} from 'sentry/components/deprecatedDropdownMenu';\nimport MenuItem from 'sentry/components/menuItem';\nimport Radio from 'sentry/components/radio';\nimport {t} from 'sentry/locale';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\n\nexport type TitleProps = Partial<ReturnType<GetActorPropsFn>>;\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  tableMeta: TableData['meta'];\n  title: React.ComponentClass<TitleProps>;\n};\n\ntype State = {\n  isOpen: boolean;\n};\n\nclass OperationSort extends Component<Props, State> {\n  state: State = {\n    isOpen: false,\n  };\n\n  componentDidUpdate(_props: Props, prevState: State) {\n    if (this.state.isOpen && prevState.isOpen === false) {\n      document.addEventListener('click', this.handleClickOutside, true);\n    }\n    if (this.state.isOpen === false && prevState.isOpen) {\n      document.removeEventListener('click', this.handleClickOutside, true);\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClickOutside, true);\n  }\n\n  private menuEl: Element | null = null;\n\n  handleClickOutside = (event: MouseEvent) => {\n    if (!this.menuEl) {\n      return;\n    }\n    if (!(event.target instanceof Element)) {\n      return;\n    }\n    if (this.menuEl.contains(event.target)) {\n      return;\n    }\n    this.setState({isOpen: false});\n  };\n\n  toggleOpen = () => {\n    this.setState(({isOpen}) => ({isOpen: !isOpen}));\n  };\n\n  generateSortLink(field): LocationDescriptorObject | undefined {\n    const {eventView, tableMeta, location} = this.props;\n    if (!tableMeta) {\n      return undefined;\n    }\n\n    const nextEventView = eventView.sortOnField(field, tableMeta, 'desc');\n    const queryStringObject = nextEventView.generateQueryStringObject();\n\n    return {\n      ...location,\n      query: {...location.query, sort: queryStringObject.sort},\n    };\n  }\n\n  renderMenuItem(operation, title) {\n    const {eventView} = this.props;\n    return (\n      <DropdownMenuItem>\n        <MenuItemContent>\n          <RadioLabel>\n            <StyledRadio\n              readOnly\n              radioSize=\"small\"\n              checked={eventView.sorts.some(({field}) => field === operation)}\n              onClick={() => {\n                const sortLink = this.generateSortLink({field: operation});\n                if (sortLink) {\n                  browserHistory.push(sortLink);\n                }\n              }}\n            />\n            <span>{title}</span>\n          </RadioLabel>\n        </MenuItemContent>\n      </DropdownMenuItem>\n    );\n  }\n\n  renderMenuContent() {\n    return (\n      <DropdownContent>\n        {this.renderMenuItem('spans.http', t('Sort By HTTP'))}\n        {this.renderMenuItem('spans.db', t('Sort By DB'))}\n        {this.renderMenuItem('spans.resource', t('Sort By Resource'))}\n        {this.renderMenuItem('spans.browser', t('Sort By Browser'))}\n      </DropdownContent>\n    );\n  }\n\n  renderMenu() {\n    const modifiers = [\n      {\n        name: 'hide',\n        enabled: false,\n      },\n      {\n        name: 'preventOverflow',\n        enabled: true,\n        options: {padding: 10},\n      },\n    ];\n\n    return createPortal(\n      <Popper placement=\"top\" modifiers={modifiers}>\n        {({ref: popperRef, style, placement}) => (\n          <DropdownWrapper\n            ref={ref => {\n              (popperRef as Function)(ref);\n              this.menuEl = ref;\n            }}\n            style={style}\n            data-placement={placement}\n          >\n            {this.renderMenuContent()}\n          </DropdownWrapper>\n        )}\n      </Popper>,\n      document.body\n    );\n  }\n\n  render() {\n    const {title: Title} = this.props;\n    const {isOpen} = this.state;\n    const menu: React.ReactPortal | null = isOpen ? this.renderMenu() : null;\n\n    return (\n      <Manager>\n        <Reference>\n          {({ref}) => (\n            <TitleWrapper ref={ref}>\n              <Title onClick={this.toggleOpen} />\n            </TitleWrapper>\n          )}\n        </Reference>\n        {menu}\n      </Manager>\n    );\n  }\n}\n\nconst DropdownWrapper = styled('div')`\n  /* Adapted from the dropdown-menu class */\n  border: none;\n  border-radius: 2px;\n  box-shadow: 0 0 0 1px rgba(52, 60, 69, 0.2), 0 1px 3px rgba(70, 82, 98, 0.25);\n  background-clip: padding-box;\n  background-color: ${p => p.theme.background};\n  width: 220px;\n  overflow: visible;\n  z-index: ${p => p.theme.zIndex.tooltip};\n\n  &:before,\n  &:after {\n    width: 0;\n    height: 0;\n    content: '';\n    display: block;\n    position: absolute;\n    right: auto;\n  }\n\n  &:before {\n    border-left: 9px solid transparent;\n    border-right: 9px solid transparent;\n    left: calc(50% - 9px);\n    z-index: -2;\n  }\n\n  &:after {\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    left: calc(50% - 8px);\n    z-index: -1;\n  }\n\n  &[data-placement*='bottom'] {\n    margin-top: 9px;\n\n    &:before {\n      border-bottom: 9px solid ${p => p.theme.border};\n      top: -9px;\n    }\n\n    &:after {\n      border-bottom: 8px solid ${p => p.theme.background};\n      top: -8px;\n    }\n  }\n\n  &[data-placement*='top'] {\n    margin-bottom: 9px;\n\n    &:before {\n      border-top: 9px solid ${p => p.theme.border};\n      bottom: -9px;\n    }\n\n    &:after {\n      border-top: 8px solid ${p => p.theme.background};\n      bottom: -8px;\n    }\n  }\n`;\n\nconst DropdownMenuItem = styled(MenuItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\nconst MenuItemContent = styled('div')`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n`;\n\nconst RadioLabel = styled('label')`\n  display: grid;\n  cursor: pointer;\n  gap: 0.25em 0.5em;\n  grid-template-columns: max-content auto;\n  align-items: center;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n`;\n\nconst StyledRadio = styled(Radio)`\n  margin: 0;\n`;\n\nconst DropdownContent = styled('div')`\n  max-height: 250px;\n  overflow-y: auto;\n`;\n\nconst TitleWrapper = styled('div')`\n  cursor: pointer;\n`;\n\nexport default OperationSort;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptor, LocationDescriptorObject} from 'history';\n\nimport {Client} from 'sentry/api';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {IssueAttachment, Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport DiscoverQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {EventData, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {\n  fieldAlignment,\n  getAggregateAlias,\n  isSpanOperationBreakdownField,\n  SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n} from 'sentry/utils/discover/fields';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\n\nimport {COLUMN_TITLES} from '../../data';\nimport {\n  generateTraceLink,\n  generateTransactionLink,\n  normalizeSearchConditions,\n} from '../utils';\n\nimport OperationSort, {TitleProps} from './operationSort';\n\nexport function getProjectID(\n  eventData: EventData,\n  projects: Project[]\n): string | undefined {\n  const projectSlug = (eventData?.project as string) || undefined;\n\n  if (typeof projectSlug === undefined) {\n    return undefined;\n  }\n\n  const project = projects.find(currentProject => currentProject.slug === projectSlug);\n\n  if (!project) {\n    return undefined;\n  }\n\n  return project.id;\n}\n\nclass OperationTitle extends Component<TitleProps> {\n  render() {\n    const {onClick} = this.props;\n    return (\n      <div onClick={onClick}>\n        <span>{t('operation duration')}</span>\n        <StyledIconQuestion\n          size=\"xs\"\n          position=\"top\"\n          title={t(\n            `Span durations are summed over the course of an entire transaction. Any overlapping spans are only counted once.`\n          )}\n        />\n      </div>\n    );\n  }\n}\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  setError: (msg: string | undefined) => void;\n  transactionName: string;\n  columnTitles?: string[];\n  excludedTags?: string[];\n  issueId?: string;\n  projectId?: string;\n  totalEventCount?: string;\n};\n\ntype State = {\n  attachments: IssueAttachment[];\n  hasMinidumps: boolean;\n  lastFetchedCursor: string;\n  widths: number[];\n};\n\nclass EventsTable extends Component<Props, State> {\n  state: State = {\n    widths: [],\n    lastFetchedCursor: '',\n    attachments: [],\n    hasMinidumps: true,\n  };\n\n  api = new Client();\n\n  handleCellAction = (column: TableColumn<keyof TableDataRow>) => {\n    return (action: Actions, value: React.ReactText) => {\n      const {eventView, location, organization, excludedTags} = this.props;\n\n      trackAnalyticsEvent({\n        eventKey: 'performance_views.transactionEvents.cellaction',\n        eventName: 'Performance Views: Transaction Events Tab Cell Action Clicked',\n        organization_id: parseInt(organization.id, 10),\n        action,\n      });\n\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      if (excludedTags) {\n        excludedTags.forEach(tag => {\n          searchConditions.removeFilter(tag);\n        });\n      }\n\n      updateQuery(searchConditions, action, column, value);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          cursor: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  renderBodyCell(\n    tableData: TableData | null,\n    column: TableColumn<keyof TableDataRow>,\n    dataRow: TableDataRow\n  ): React.ReactNode {\n    const {eventView, organization, location, transactionName} = this.props;\n\n    if (!tableData || !tableData.meta) {\n      return dataRow[column.key];\n    }\n    const tableMeta = tableData.meta;\n    const field = String(column.key);\n    const fieldRenderer = getFieldRenderer(field, tableMeta);\n    const rendered = fieldRenderer(dataRow, {organization, location, eventView});\n\n    const allowActions = [\n      Actions.ADD,\n      Actions.EXCLUDE,\n      Actions.SHOW_GREATER_THAN,\n      Actions.SHOW_LESS_THAN,\n    ];\n\n    if (['attachments', 'minidump'].includes(field)) {\n      return rendered;\n    }\n\n    if (field === 'id' || field === 'trace') {\n      const {issueId} = this.props;\n      const isIssue: boolean = !!issueId;\n      let target: LocationDescriptor = {};\n      if (isIssue && field === 'id') {\n        target.pathname = `/organizations/${organization.slug}/issues/${issueId}/events/${dataRow.id}/`;\n      } else {\n        const generateLink = field === 'id' ? generateTransactionLink : generateTraceLink;\n        target = generateLink(transactionName)(organization, dataRow, location.query);\n      }\n\n      return (\n        <CellAction\n          column={column}\n          dataRow={dataRow}\n          handleCellAction={this.handleCellAction(column)}\n          allowActions={allowActions}\n        >\n          <Link to={target}>{rendered}</Link>\n        </CellAction>\n      );\n    }\n\n    const fieldName = getAggregateAlias(field);\n    const value = dataRow[fieldName];\n    if (tableMeta[fieldName] === 'integer' && defined(value) && value > 999) {\n      return (\n        <Tooltip\n          title={value.toLocaleString()}\n          containerDisplayMode=\"block\"\n          position=\"right\"\n        >\n          <CellAction\n            column={column}\n            dataRow={dataRow}\n            handleCellAction={this.handleCellAction(column)}\n            allowActions={allowActions}\n          >\n            {rendered}\n          </CellAction>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <CellAction\n        column={column}\n        dataRow={dataRow}\n        handleCellAction={this.handleCellAction(column)}\n        allowActions={allowActions}\n      >\n        {rendered}\n      </CellAction>\n    );\n  }\n\n  renderBodyCellWithData = (tableData: TableData | null) => {\n    return (\n      column: TableColumn<keyof TableDataRow>,\n      dataRow: TableDataRow\n    ): React.ReactNode => this.renderBodyCell(tableData, column, dataRow);\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.transactionEvents.sort',\n      eventName: 'Performance Views: Transaction Events Tab Sorted',\n      organization_id: parseInt(organization.id, 10),\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    tableMeta: TableData['meta'],\n    column: TableColumn<keyof TableDataRow>,\n    title: React.ReactNode\n  ): React.ReactNode {\n    const {eventView, location} = this.props;\n\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    const field = {field: column.name, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = eventView.sortOnField(field, tableMeta);\n      const queryStringObject = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, sort: queryStringObject.sort},\n      };\n    }\n    const currentSort = eventView.sortForField(field, tableMeta);\n    // Event id and Trace id are technically sortable but we don't want to sort them here since sorting by a uuid value doesn't make sense\n    const canSort =\n      field.field !== 'id' &&\n      field.field !== 'trace' &&\n      field.field !== SPAN_OP_RELATIVE_BREAKDOWN_FIELD &&\n      isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    if (field.field === SPAN_OP_RELATIVE_BREAKDOWN_FIELD) {\n      title = (\n        <OperationSort\n          title={OperationTitle}\n          eventView={eventView}\n          tableMeta={tableMeta}\n          location={location}\n        />\n      );\n    }\n\n    const sortLink = (\n      <SortLink\n        align={align}\n        title={title || field.field}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n    return sortLink;\n  }\n\n  renderHeadCellWithMeta = (tableMeta: TableData['meta']) => {\n    const columnTitles = this.props.columnTitles ?? COLUMN_TITLES;\n    return (column: TableColumn<keyof TableDataRow>, index: number): React.ReactNode =>\n      this.renderHeadCell(tableMeta, column, columnTitles[index]);\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({...this.state, widths});\n  };\n\n  render() {\n    const {eventView, organization, location, setError, totalEventCount} = this.props;\n\n    const totalTransactionsView = eventView.clone();\n    totalTransactionsView.sorts = [];\n    totalTransactionsView.fields = [{field: 'count()', width: -1}];\n\n    const {widths} = this.state;\n    const containsSpanOpsBreakdown = eventView\n      .getColumns()\n      .find(\n        (col: TableColumn<React.ReactText>) =>\n          col.name === SPAN_OP_RELATIVE_BREAKDOWN_FIELD\n      );\n    const columnOrder = eventView\n      .getColumns()\n      .filter(col => {\n        if (!this.state.attachments.length) {\n          return col.key !== 'attachments' && col.key !== 'minidump';\n        }\n        if (!this.state.hasMinidumps) {\n          return col.key !== 'minidump';\n        }\n        return true;\n      })\n      .filter(\n        (col: TableColumn<React.ReactText>) =>\n          !containsSpanOpsBreakdown || !isSpanOperationBreakdownField(col.name)\n      )\n      .map((col: TableColumn<React.ReactText>, i: number) => {\n        if (typeof widths[i] === 'number') {\n          return {...col, width: widths[i]};\n        }\n        return col;\n      });\n\n    const joinCustomData = ({data}: TableData) => {\n      if (this.state.attachments.length) {\n        const {projectId} = this.props;\n        const attachmentsWithUrl = this.state.attachments.map(attachment => ({\n          ...attachment,\n          url: `/api/0/projects/${organization.slug}/${projectId}/events/${attachment.event_id}/attachments/${attachment.id}/?download=1`,\n        }));\n\n        const eventIdMap = {};\n        data.forEach(event => {\n          event.attachments = [] as any;\n          eventIdMap[event.id] = event;\n        });\n        attachmentsWithUrl.forEach(attachment => {\n          const eventAttachments = eventIdMap[attachment.event_id]?.attachments;\n          if (eventAttachments) {\n            eventAttachments.push(attachment);\n          }\n        });\n      }\n    };\n\n    const fetchAttachments = async ({data}: TableData, cursor: string) => {\n      const eventIds = data.map(value => value.id);\n      const eventIdQuery = `event_id=${eventIds.join('&event_id=')}`;\n      const res: IssueAttachment[] = await this.api.requestPromise(\n        `/api/0/issues/${this.props.issueId}/attachments/?${eventIdQuery}`\n      );\n\n      let hasMinidumps = false;\n\n      res.forEach(attachment => {\n        if (attachment.type === 'event.minidump') {\n          hasMinidumps = true;\n        }\n      });\n      this.setState({\n        ...this.state,\n        lastFetchedCursor: cursor,\n        attachments: res,\n        hasMinidumps,\n      });\n    };\n\n    return (\n      <div>\n        <DiscoverQuery\n          eventView={eventView}\n          orgSlug={organization.slug}\n          location={location}\n          setError={error => setError(error?.message)}\n          referrer=\"api.performance.transaction-events\"\n          useEvents\n        >\n          {({pageLinks, isLoading: isDiscoverQueryLoading, tableData}) => {\n            tableData ??= {data: []};\n            const parsedPageLinks = parseLinkHeader(pageLinks);\n            const cursor = parsedPageLinks?.next?.cursor;\n            const shouldFetchAttachments = !!this.props.issueId; // Only fetch on issue details page\n            let currentEvent = cursor?.split(':')[1] ?? 0;\n            if (!parsedPageLinks?.next?.results && totalEventCount) {\n              currentEvent = totalEventCount;\n            }\n\n            const paginationCaption =\n              totalEventCount && currentEvent\n                ? tct('Showing [currentEvent] of [totalEventCount] events', {\n                    currentEvent,\n                    totalEventCount,\n                  })\n                : undefined;\n            if (\n              shouldFetchAttachments &&\n              cursor &&\n              this.state.lastFetchedCursor !== cursor\n            ) {\n              fetchAttachments(tableData, cursor);\n            }\n            joinCustomData(tableData);\n            return (\n              <Fragment>\n                <GridEditable\n                  isLoading={isDiscoverQueryLoading}\n                  data={tableData?.data ?? []}\n                  columnOrder={columnOrder}\n                  columnSortBy={eventView.getSorts()}\n                  grid={{\n                    onResizeColumn: this.handleResizeColumn,\n                    renderHeadCell: this.renderHeadCellWithMeta(tableData?.meta) as any,\n                    renderBodyCell: this.renderBodyCellWithData(tableData) as any,\n                  }}\n                  location={location}\n                />\n                <Pagination\n                  disabled={isDiscoverQueryLoading}\n                  caption={paginationCaption}\n                  pageLinks={pageLinks}\n                />\n              </Fragment>\n            );\n          }}\n        </DiscoverQuery>\n      </div>\n    );\n  }\n}\n\nconst StyledIconQuestion = styled(QuestionTooltip)`\n  position: relative;\n  top: 1px;\n  left: 4px;\n`;\n\nexport default EventsTable;\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","endpoint","useEvents","afterFetch","data","_","fields","otherMeta","meta","undefined","route","useDiscoverQuery","useGenericDiscoverQuery","OperationSort","Component","isOpen","event","this","menuEl","target","Element","contains","setState","componentDidUpdate","_props","prevState","state","document","addEventListener","handleClickOutside","removeEventListener","componentWillUnmount","generateSortLink","field","eventView","tableMeta","location","queryStringObject","sortOnField","generateQueryStringObject","query","sort","renderMenuItem","operation","title","DropdownMenuItem","MenuItemContent","RadioLabel","StyledRadio","readOnly","radioSize","checked","sorts","some","onClick","sortLink","browserHistory","renderMenuContent","DropdownContent","t","renderMenu","createPortal","Popper","placement","modifiers","name","enabled","options","padding","ref","popperRef","style","DropdownWrapper","body","render","Title","menu","Manager","Reference","TitleWrapper","toggleOpen","p","theme","background","zIndex","tooltip","border","MenuItem","fontSizeMedium","innerBorder","Radio","OperationTitle","StyledIconQuestion","size","position","EventsTable","widths","lastFetchedCursor","attachments","hasMinidumps","Client","column","action","value","organization","excludedTags","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","searchConditions","normalizeSearchConditions","forEach","tag","removeFilter","updateQuery","pathname","cursor","formatString","tableData","dataRow","renderBodyCell","columnTitles","COLUMN_TITLES","index","renderHeadCell","columnIndex","nextColumn","width","Number","COL_WIDTH_UNDEFINED","key","String","rendered","getFieldRenderer","fieldRenderer","allowActions","Actions","includes","issueId","slug","generateTransactionLink","generateTraceLink","generateLink","handleCellAction","to","fieldName","getAggregateAlias","defined","toLocaleString","containerDisplayMode","onSortClick","currentSortKind","currentSortField","direction","align","fieldAlignment","type","currentSort","sortForField","canSort","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","isFieldSortable","kind","setError","totalEventCount","totalTransactionsView","clone","containsSpanOpsBreakdown","getColumns","find","col","columnOrder","filter","length","isSpanOperationBreakdownField","map","i","joinCustomData","projectId","attachmentsWithUrl","attachment","url","event_id","eventIdMap","eventAttachments","push","fetchAttachments","async","eventIdQuery","join","res","api","requestPromise","orgSlug","error","message","referrer","pageLinks","isLoading","isDiscoverQueryLoading","parsedPageLinks","parseLinkHeader","next","shouldFetchAttachments","currentEvent","split","results","paginationCaption","tct","Fragment","columnSortBy","getSorts","grid","onResizeColumn","handleResizeColumn","renderHeadCellWithMeta","renderBodyCellWithData","disabled","caption","QuestionTooltip"],"sourceRoot":""}