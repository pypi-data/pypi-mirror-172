{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionReplays_index_tsx-app_views_performance_t-69f76b.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/quickTrace/utils.tsx","webpack:///./app/utils/performance/urls.ts","webpack:///./app/views/performance/traceDetails/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/useReplaysFromTransaction.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///../node_modules/lodash/_baseExtremum.js","webpack:///../node_modules/lodash/_baseGt.js"],"sourcesContent":["import omit from 'lodash/omit';\nimport moment from 'moment-timezone';\n\nimport {getTraceDateTimeRange} from 'sentry/components/events/interfaces/spans/utils';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {OrganizationSummary} from 'sentry/types';\nimport {Event, EventTransaction} from 'sentry/types/event';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverQueryProps} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  QuickTrace,\n  QuickTraceEvent,\n  TraceFull,\n  TraceFullDetailed,\n  TraceLite,\n} from 'sentry/utils/performance/quickTrace/types';\n\nexport function isTransaction(event: Event): event is EventTransaction {\n  return event.type === 'transaction';\n}\n\n/**\n * An event can be an error or a transaction. We need to check whether the current\n * event id is in the list of errors as well\n */\nexport function isCurrentEvent(\n  event: TraceFull | QuickTraceEvent,\n  currentEvent: Event\n): boolean {\n  if (isTransaction(currentEvent)) {\n    return event.event_id === currentEvent.id;\n  }\n  return (\n    event.errors !== undefined && event.errors.some(e => e.event_id === currentEvent.id)\n  );\n}\n\ntype PathNode = {\n  event: TraceFull;\n  path: TraceLite;\n};\n\n/**\n * The `events-full` endpoint returns the full trace containing the specified event.\n * This means any sibling paths in the trace will also be returned.\n *\n * This method strips away these sibling paths leaving only the path from the root to\n * the specified event and all of its children/descendants.\n *\n * This method additionally flattens the trace into an array of the transactions in\n * the trace.\n */\nexport function flattenRelevantPaths(\n  currentEvent: Event,\n  traceFull: TraceFull\n): TraceLite {\n  const relevantPath: TraceLite = [];\n  const events: TraceFull[] = [];\n\n  /**\n   * First find a path from the root transaction to the current transaction via\n   * a breadth first search. This adds all transactions from the root to the\n   * current transaction (excluding the current transaction itself), to the\n   * relevant path.\n   */\n  const paths: PathNode[] = [{event: traceFull, path: []}];\n  while (paths.length) {\n    const current = paths.shift()!;\n    if (isCurrentEvent(current.event, currentEvent)) {\n      for (const node of current.path) {\n        relevantPath.push(node);\n      }\n      events.push(current.event);\n    } else {\n      const path = [...current.path, simplifyEvent(current.event)];\n      for (const child of current.event.children) {\n        paths.push({event: child, path});\n      }\n    }\n  }\n\n  if (!events.length) {\n    throw new Error('No relevant path exists!');\n  }\n\n  /**\n   * Traverse all transactions from current transaction onwards and add\n   * them all to the relevant path.\n   */\n  while (events.length) {\n    const current = events.shift()!;\n    for (const child of current.children) {\n      events.push(child);\n    }\n    relevantPath.push(simplifyEvent(current));\n  }\n\n  return relevantPath;\n}\n\nfunction simplifyEvent(event: TraceFull): QuickTraceEvent {\n  return omit(event, ['children']);\n}\n\ntype ParsedQuickTrace = {\n  /**\n   * `[]` represents the lack of ancestors in a full trace navigator\n   * `null` represents the uncertainty of ancestors in a lite trace navigator\n   */\n  ancestors: QuickTraceEvent[] | null;\n  /**\n   * `[]` represents the lack of children in a full/lite trace navigator\n   */\n  children: QuickTraceEvent[];\n  current: QuickTraceEvent;\n  /**\n   * `[]` represents the lack of descendants in a full trace navigator\n   * `null` represents the uncertainty of descendants in a lite trace navigator\n   */\n  descendants: QuickTraceEvent[] | null;\n  /**\n   * `null` represents either the lack of a direct parent or the uncertainty\n   * of what the parent is\n   */\n  parent: QuickTraceEvent | null;\n  /**\n   * `null` represents the lack of a root. It may still have a parent\n   */\n  root: QuickTraceEvent | null;\n};\n\nexport function parseQuickTrace(\n  quickTrace: QuickTrace,\n  event: Event,\n  organization: OrganizationSummary\n): ParsedQuickTrace | null {\n  const {type, trace} = quickTrace;\n\n  if (type === 'empty' || trace === null) {\n    throw new Error('Current event not in trace navigator!');\n  }\n\n  const isFullTrace = type === 'full';\n\n  const current = trace.find(e => isCurrentEvent(e, event)) ?? null;\n  if (current === null) {\n    throw new Error('Current event not in trace navigator!');\n  }\n\n  /**\n   * The parent event is the direct ancestor of the current event.\n   * This takes priority over the root, meaning if the parent is\n   * the root of the trace, this favours showing it as the parent.\n   */\n  const parent = current.parent_event_id\n    ? trace.find(e => e.event_id === current.parent_event_id) ?? null\n    : null;\n\n  /**\n   * The root event is the first event in the trace. This has lower priority\n   * than the parent event, meaning if the root event is the parent event of\n   * the current event, this favours showing it as the parent event.\n   */\n  const root =\n    trace.find(\n      e =>\n        // a root can't be the current event\n        e.event_id !== current.event_id &&\n        // a root can't be the direct parent\n        e.event_id !== parent?.event_id &&\n        // a root has to to be the first generation\n        e.generation === 0\n    ) ?? null;\n\n  const isChildren = e => e.parent_event_id === current.event_id;\n\n  const isDescendant = e =>\n    // the current generation needs to be known to determine a descendant\n    current.generation !== null &&\n    // the event's generation needs to be known to determine a descendant\n    e.generation !== null &&\n    // a descendant is the generation after the direct children\n    current.generation + 1 < e.generation;\n\n  const isAncestor = e =>\n    // the current generation needs to be known to determine an ancestor\n    current.generation !== null &&\n    // the event's generation needs to be known to determine an ancestor\n    e.generation !== null &&\n    // an ancestor can't be the root\n    e.generation > 0 &&\n    // an ancestor is the generation before the direct parent\n    current.generation - 1 > e.generation;\n\n  const ancestors: TraceLite | null = isFullTrace ? [] : null;\n  const children: TraceLite = [];\n  const descendants: TraceLite | null = isFullTrace ? [] : null;\n  const projects = new Set();\n\n  trace.forEach(e => {\n    projects.add(e.project_id);\n    if (isChildren(e)) {\n      children.push(e);\n    } else if (isFullTrace) {\n      if (isAncestor(e)) {\n        ancestors?.push(e);\n      } else if (isDescendant(e)) {\n        descendants?.push(e);\n      }\n    }\n  });\n\n  if (isFullTrace && projects.size > 1) {\n    handleProjectMeta(organization, projects.size);\n  }\n\n  return {\n    root,\n    ancestors: ancestors === null ? null : sortTraceLite(ancestors),\n    parent,\n    current,\n    children: sortTraceLite(children),\n    descendants: descendants === null ? null : sortTraceLite(descendants),\n  };\n}\n\nfunction sortTraceLite(trace: TraceLite): TraceLite {\n  return trace.sort((a, b) => b['transaction.duration'] - a['transaction.duration']);\n}\n\nexport function getTraceRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), ['field', 'sort', 'per_page']);\n}\n\nexport function makeEventView({\n  start,\n  end,\n  statsPeriod,\n}: {\n  end?: string;\n  start?: string;\n  statsPeriod?: string | null;\n}) {\n  return EventView.fromSavedQuery({\n    id: undefined,\n    version: 2,\n    name: '',\n    // This field doesn't actually do anything,\n    // just here to satisfy a constraint in EventView.\n    fields: ['transaction.duration'],\n    projects: [ALL_ACCESS_PROJECTS],\n    query: '',\n    environment: [],\n    start,\n    end,\n    range: statsPeriod ?? undefined,\n  });\n}\n\nexport function getTraceTimeRangeFromEvent(event: Event): {end: string; start: string} {\n  const start = isTransaction(event)\n    ? event.startTimestamp\n    : moment(event.dateReceived ? event.dateReceived : event.dateCreated).valueOf() /\n      1000;\n  const end = isTransaction(event) ? event.endTimestamp : start;\n  return getTraceDateTimeRange({start, end});\n}\n\nexport function reduceTrace<T>(\n  trace: TraceFullDetailed,\n  visitor: (acc: T, e: TraceFullDetailed) => T,\n  initialValue: T\n): T {\n  let result = initialValue;\n\n  const events = [trace];\n  while (events.length) {\n    const current = events.pop()!;\n    for (const child of current.children) {\n      events.push(child);\n    }\n    result = visitor(result, current);\n  }\n\n  return result;\n}\n\nexport function filterTrace(\n  trace: TraceFullDetailed,\n  predicate: (transaction: TraceFullDetailed) => boolean\n): TraceFullDetailed[] {\n  return reduceTrace<TraceFullDetailed[]>(\n    trace,\n    (transactions, transaction) => {\n      if (predicate(transaction)) {\n        transactions.push(transaction);\n      }\n      return transactions;\n    },\n    []\n  );\n}\n\nexport function isTraceFull(transaction): transaction is TraceFull {\n  return Boolean((transaction as TraceFull).event_id);\n}\n\nexport function isTraceFullDetailed(transaction): transaction is TraceFullDetailed {\n  return Boolean((transaction as TraceFullDetailed).event_id);\n}\n\nfunction handleProjectMeta(organization: OrganizationSummary, projects: number) {\n  trackAdvancedAnalyticsEvent('quick_trace.connected_services', {\n    organization: organization.id,\n    projects,\n  });\n}\n","import {LocationDescriptor, Query} from 'history';\n\nimport {spanTargetHash} from 'sentry/components/events/interfaces/spans/utils';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport function getTransactionDetailsUrl(\n  orgSlug: Organization['slug'],\n  eventSlug: string,\n  transaction?: string,\n  query?: Query,\n  spanId?: string\n): LocationDescriptor {\n  const locationQuery = {\n    ...(query || {}),\n    transaction,\n  };\n  if (!defined(locationQuery.transaction)) {\n    delete locationQuery.transaction;\n  }\n\n  const target = {\n    pathname: `/organizations/${orgSlug}/performance/${eventSlug}/`,\n    query: locationQuery,\n    hash: defined(spanId) ? spanTargetHash(spanId) : undefined,\n  };\n  if (!defined(target.hash)) {\n    delete target.hash;\n  }\n\n  return target;\n}\n","import {LocationDescriptor, Query} from 'history';\n\nimport {PAGE_URL_PARAM} from 'sentry/constants/pageFilters';\nimport {OrganizationSummary} from 'sentry/types';\nimport {TraceFullDetailed} from 'sentry/utils/performance/quickTrace/types';\nimport {reduceTrace} from 'sentry/utils/performance/quickTrace/utils';\n\nimport {TraceInfo} from './types';\n\nexport function getTraceDetailsUrl(\n  organization: OrganizationSummary,\n  traceSlug: string,\n  dateSelection,\n  query: Query\n): LocationDescriptor {\n  const {start, end, statsPeriod} = dateSelection;\n  return {\n    pathname: `/organizations/${organization.slug}/performance/trace/${traceSlug}/`,\n    query: {\n      ...query,\n      statsPeriod,\n      [PAGE_URL_PARAM.PAGE_START]: start,\n      [PAGE_URL_PARAM.PAGE_END]: end,\n    },\n  };\n}\n\nfunction traceVisitor() {\n  return (accumulator: TraceInfo, event: TraceFullDetailed) => {\n    for (const error of event.errors ?? []) {\n      accumulator.errors.add(error.event_id);\n    }\n\n    accumulator.transactions.add(event.event_id);\n    accumulator.projects.add(event.project_slug);\n\n    accumulator.startTimestamp = Math.min(\n      accumulator.startTimestamp,\n      event.start_timestamp\n    );\n    accumulator.endTimestamp = Math.max(accumulator.endTimestamp, event.timestamp);\n\n    accumulator.maxGeneration = Math.max(accumulator.maxGeneration, event.generation);\n\n    return accumulator;\n  };\n}\n\nexport function getTraceInfo(traces: TraceFullDetailed[]) {\n  const initial = {\n    projects: new Set<string>(),\n    errors: new Set<string>(),\n    transactions: new Set<string>(),\n    startTimestamp: Number.MAX_SAFE_INTEGER,\n    endTimestamp: 0,\n    maxGeneration: 0,\n  };\n\n  return traces.reduce(\n    (info: TraceInfo, trace: TraceFullDetailed) =>\n      reduceTrace<TraceInfo>(trace, traceVisitor(), info),\n    initial\n  );\n}\n\nexport function isRootTransaction(trace: TraceFullDetailed): boolean {\n  // Root transactions has no parent_span_id\n  return trace.parent_span_id === null;\n}\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport first from 'lodash/first';\nimport omit from 'lodash/omit';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Pagination from 'sentry/components/pagination';\nimport space from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nimport type {ReplayListRecordWithTx} from './useReplaysFromTransaction';\n\ntype Props = {\n  eventView: EventView;\n  isFetching: boolean;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n  pageLinks: string | null;\n  replays: ReplayListRecordWithTx[];\n};\n\nfunction ReplaysContent({\n  eventView,\n  isFetching,\n  location,\n  organization,\n  pageLinks,\n  replays,\n}: Props) {\n  const query = location.query;\n\n  function handleChange(key: string) {\n    return function (value: string | undefined) {\n      const queryParams = normalizeDateTimeParams({\n        ...(location.query || {}),\n        [key]: value,\n      });\n\n      // do not propagate pagination when making a new search\n      const toOmit = ['cursor'];\n      if (!defined(value)) {\n        toOmit.push(key);\n      }\n      const searchQueryParams = omit(queryParams, toOmit);\n\n      browserHistory.push({\n        ...location,\n        query: searchQueryParams,\n      });\n    };\n  }\n\n  return (\n    <Layout.Main fullWidth>\n      <FilterActions>\n        <PageFilterBar condensed>\n          <EnvironmentPageFilter />\n          <DatePageFilter alignDropdown=\"left\" />\n        </PageFilterBar>\n        <SearchBar\n          organization={organization}\n          projectIds={eventView.project}\n          query={query.query}\n          fields={eventView.fields}\n          onSearch={handleChange('query')}\n        />\n      </FilterActions>\n      <ReplayTable\n        isFetching={isFetching}\n        replays={replays}\n        showProjectColumn={false}\n        sort={first(eventView.sorts) || {field: 'startedAt', kind: 'asc'}}\n        showSlowestTxColumn\n      />\n      <Pagination pageLinks={pageLinks} />\n    </Layout.Main>\n  );\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: auto 1fr;\n  }\n`;\n\nexport default ReplaysContent;\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport type {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  SPAN_OP_BREAKDOWN_FIELDS,\n  SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nimport {decodeFilterFromLocation, SpanOperationBreakdownFilter} from '../filter';\nimport PageLayout, {ChildProps} from '../pageLayout';\nimport Tab from '../tabs';\n\nimport ReplaysContent from './content';\nimport useReplaysFromTransaction from './useReplaysFromTransaction';\n\ntype Props = {\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction renderNoAccess() {\n  return (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n}\n\nfunction TransactionReplays(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <Feature\n      features={['session-replay-ui']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <PageLayout\n        location={location}\n        organization={organization}\n        projects={projects}\n        tab={Tab.Replays}\n        getDocumentTitle={getDocumentTitle}\n        generateEventView={generateEventView}\n        childComponent={ReplaysContentWrapper}\n      />\n    </Feature>\n  );\n}\n\nfunction ReplaysContentWrapper({\n  eventView: eventsWithReplaysView,\n  location,\n  organization,\n  setError,\n}: ChildProps) {\n  const {eventView, replays, pageLinks, isFetching, fetchError} =\n    useReplaysFromTransaction({\n      eventsWithReplaysView,\n      location,\n      organization,\n    });\n\n  useEffect(() => {\n    setError(fetchError?.message);\n  }, [setError, fetchError]);\n\n  if (isFetching || !eventView) {\n    return (\n      <Layout.Main fullWidth>\n        <LoadingIndicator />\n      </Layout.Main>\n    );\n  }\n\n  return replays ? (\n    <ReplaysContent\n      eventView={eventView}\n      isFetching={isFetching}\n      location={location}\n      organization={organization}\n      pageLinks={pageLinks}\n      replays={replays}\n    />\n  ) : (\n    <Fragment>{null}</Fragment>\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Replays')].join(' \\u2014 ');\n  }\n\n  return [t('Summary'), t('Replays')].join(' \\u2014 ');\n}\n\nfunction generateEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}) {\n  const fields = ['replayId', 'count()', 'transaction.duration', 'trace', 'timestamp'];\n\n  const breakdown = decodeFilterFromLocation(location);\n  if (breakdown !== SpanOperationBreakdownFilter.None) {\n    fields.push(`spans.${breakdown}`);\n  } else {\n    fields.push(...SPAN_OP_BREAKDOWN_FIELDS, SPAN_OP_RELATIVE_BREAKDOWN_FIELD);\n  }\n\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n  conditions.addFilterValues('transaction', [transactionName]);\n  conditions.addFilterValues('!replayId', ['']);\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      id: '',\n      name: `Replay events within a transaction`,\n      version: 2,\n      fields,\n      query: conditions.formatString(),\n      projects: [],\n      orderby: decodeScalar(location.query.sort, '-timestamp'),\n    },\n    location\n  );\n}\n\nexport default withProjects(withOrganization(TransactionReplays));\n","import {useCallback, useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport type {Client} from 'sentry/api';\nimport type {Organization} from 'sentry/types';\nimport {TableData, TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {fromSorts} from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport fetchReplayList, {\n  DEFAULT_SORT,\n  REPLAY_LIST_FIELDS,\n} from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport {ReplayListRecord} from 'sentry/views/replays/types';\n\nexport type ReplayListRecordWithTx = ReplayListRecord & {\n  txEvent: {[x: string]: any};\n};\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>> & {\n  eventView: undefined | EventView;\n  replays?: ReplayListRecordWithTx[];\n};\n\ntype Options = {\n  eventsWithReplaysView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nfunction useReplaysFromTransaction({\n  eventsWithReplaysView,\n  location,\n  organization,\n}: Options) {\n  const api = useApi();\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n    eventView: undefined,\n  });\n\n  const load = useCallback(async () => {\n    const eventsData = await fetchEventsWithReplay({\n      api,\n      eventView: eventsWithReplaysView,\n      location,\n      organization,\n    });\n\n    const replayIds = eventsData?.map(row => row.replayId);\n\n    const eventView = EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: 'Replays within a transaction',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: `id:[${String(replayIds)}]`,\n      },\n      location\n    );\n\n    eventView.sorts = fromSorts(decodeScalar(location.query.sort, DEFAULT_SORT));\n\n    const listData = await fetchReplayList({\n      api,\n      eventView,\n      location,\n      organization,\n    });\n\n    const replays: ReplayListRecordWithTx[] | undefined = listData.replays?.map(\n      replay => {\n        let slowestEvent: TableDataRow | undefined;\n        for (const event of eventsData ?? []) {\n          // attach the slowest tx event to the replay\n          if (\n            event.replayId === replay.id &&\n            (!slowestEvent ||\n              event['transaction.duration'] > slowestEvent['transaction.duration'])\n          ) {\n            slowestEvent = event;\n          }\n        }\n\n        return {\n          ...replay,\n          txEvent: slowestEvent ?? {},\n        };\n      }\n    );\n\n    setData({\n      ...listData,\n      eventView,\n      replays,\n    });\n  }, [api, eventsWithReplaysView, location, organization]);\n\n  useEffect(() => {\n    load();\n  }, [load]);\n\n  return data;\n}\n\nasync function fetchEventsWithReplay({\n  api,\n  eventView,\n  location,\n  organization,\n}: {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n}) {\n  try {\n    const [data] = await doDiscoverQuery<TableData>(\n      api,\n      `/organizations/${organization.slug}/events/`,\n      eventView.getEventsAPIPayload(location)\n    );\n\n    return data.data;\n  } catch (err) {\n    return null;\n  }\n}\n\nexport default useReplaysFromTransaction;\n","import {PlainRoute} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport function generateReplayLink(routes: PlainRoute<any>[]) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const replayId = tableRow.replayId;\n    if (!replayId) {\n      return {};\n    }\n\n    const replaySlug = `${tableRow['project.name']}:${replayId}`;\n    const referrer = encodeURIComponent(getRouteStringFromRoutes(routes));\n\n    return {\n      pathname: `/organizations/${organization.slug}/replays/${replaySlug}`,\n      query: {\n        referrer,\n      },\n    };\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"names":["isTransaction","event","type","isCurrentEvent","currentEvent","event_id","id","undefined","errors","some","e","flattenRelevantPaths","traceFull","relevantPath","events","paths","path","length","current","shift","node","push","simplifyEvent","child","children","Error","omit","parseQuickTrace","quickTrace","organization","trace","isFullTrace","find","parent","parent_event_id","root","generation","ancestors","descendants","projects","Set","forEach","add","project_id","isChildren","isAncestor","isDescendant","size","trackAdvancedAnalyticsEvent","handleProjectMeta","sortTraceLite","sort","a","b","getTraceRequestPayload","eventView","location","getEventsAPIPayload","makeEventView","start","end","statsPeriod","EventView","version","name","fields","ALL_ACCESS_PROJECTS","query","environment","range","getTraceTimeRangeFromEvent","startTimestamp","moment","dateReceived","dateCreated","valueOf","endTimestamp","getTraceDateTimeRange","reduceTrace","visitor","initialValue","result","pop","filterTrace","predicate","transactions","transaction","isTraceFull","Boolean","isTraceFullDetailed","getTransactionDetailsUrl","orgSlug","eventSlug","spanId","locationQuery","defined","target","pathname","hash","spanTargetHash","getTraceDetailsUrl","traceSlug","dateSelection","slug","PAGE_URL_PARAM","getTraceInfo","traces","initial","Number","MAX_SAFE_INTEGER","maxGeneration","reduce","info","accumulator","error","project_slug","Math","min","start_timestamp","max","timestamp","isRootTransaction","parent_span_id","ReplaysContent","isFetching","pageLinks","replays","fullWidth","FilterActions","condensed","alignDropdown","projectIds","project","onSearch","key","value","queryParams","normalizeDateTimeParams","toOmit","searchQueryParams","browserHistory","showProjectColumn","first","sorts","field","kind","showSlowestTxColumn","space","p","theme","breakpoints","small","renderNoAccess","t","TransactionReplays","props","features","renderDisabled","tab","Tab","getDocumentTitle","generateEventView","childComponent","ReplaysContentWrapper","eventsWithReplaysView","setError","fetchError","api","useApi","data","setData","useState","load","useCallback","async","eventsData","doDiscoverQuery","err","fetchEventsWithReplay","replayIds","map","row","replayId","REPLAY_LIST_FIELDS","String","fromSorts","decodeScalar","DEFAULT_SORT","listData","fetchReplayList","replay","slowestEvent","txEvent","useEffect","useReplaysFromTransaction","message","Fragment","transactionName","trim","join","breakdown","decodeFilterFromLocation","SpanOperationBreakdownFilter","SPAN_OP_BREAKDOWN_FIELDS","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","conditions","MutableSearch","addFilterValues","formatString","orderby","withProjects","withOrganization","TransactionFilterOptions","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","transactionSummaryRouteWithQuery","projectID","unselectedSeries","display","trendFunction","trendColumn","showTransactions","additionalQuery","generateTransactionSummaryRoute","searchFilter","generateTraceLink","tableRow","_query","traceId","generateTransactionLink","generateEventSlug","generateReplayLink","routes","replaySlug","referrer","encodeURIComponent","getRouteStringFromRoutes","SidebarSpacer","isSymbol","module","exports","array","iteratee","comparator","index","computed","other"],"sourceRoot":""}