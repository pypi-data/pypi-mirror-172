{"version":3,"file":"chunks/app_utils_discover_charts_tsx-app_views_alerts_filterBar_tsx-app_views_alerts_list_header_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"owBAoDA,SAASA,EAAT,GASmC,IATA,SACjCC,EADiC,UAEjCC,EAFiC,aAGjCC,EAHiC,SAIjCC,EAJiC,QAKjCC,EALiC,UAMjCC,EANiC,qBAOjCC,KACGC,GAC8B,EACjC,MAAMC,EAAUR,EAASS,MAAKC,GAAKA,EAAEC,KAAQ,GAAEV,EAAUO,QAAQ,OAC3DI,EAAcX,EAAUY,4BAC1BD,EAAYE,OAAOC,SAAU,WAAUP,GAASQ,UAClDJ,EAAYE,MAASF,EAAYE,MAAiBG,QAC/C,WAAUT,GAASQ,OACpB,KAIJ,MAAME,EAAgBb,EAClBc,EAAAA,GAAyBd,GACzBe,EAAAA,GAEEC,EAAK,CACTC,SAAW,kBAAiBpB,EAAac,0BACzCF,MAAO,IACFF,EACHW,oBAAoB,EACpBjB,uBACAH,cACGe,EACHV,QAASA,GAASQ,KAClBQ,UAAWZ,EAAYa,OAASP,EAAcM,YAQlD,OACE,QAACE,EAAD,CACExB,aAAcA,EACdE,QAPgB,KAClBA,KAAW,EAOTiB,GAAIA,EACJ,cAAYM,EAAAA,EAAAA,GAAE,mBACVpB,GAGT,CAjDQR,EAAAA,YAAAA,4BAoET,MAAM2B,GAAoBE,EAAAA,EAAAA,aACxB,IAW8B,IAX7B,aACC1B,EADD,YAEC2B,EAFD,UAGCC,EAHD,SAIC3B,EAJD,OAKC4B,EALD,SAMCC,EAND,oBAOCC,EAPD,YAQCC,EARD,QASCC,KACG5B,GACyB,EAC5B,MAAM6B,GAAMC,EAAAA,EAAAA,KACNC,EAAkBC,IACtB,MAAMC,EAAS,IAAIC,gBAUnB,OATItC,GACFqC,EAAOE,OAAO,WAAYvC,GAEP,eAAjBoC,GACFC,EAAOE,OAAO,UAAWH,GAEvBL,GACFM,EAAOE,OAAO,eAAgBR,GAExB,kBAAiBhC,EAAac,uBAAuBwB,EAAOG,YAApE,EAGF,SAASC,EAA0BC,GACjCA,EAAMC,iBACNX,OAEAY,EAAAA,EAAAA,GAAWT,EAAe,cAAeP,EAC1C,CAEDiB,eAAeC,IACb,MAAMC,EAAoB,kBAAiBhD,EAAac,SACxDmC,EAAAA,EAAAA,MACA,UACQf,EAAIgB,eAAeF,EAAkB,CACzCG,OAAQ,MACRC,KAAM,CACJC,mBAAmB,MAGvBC,EAAAA,EAAAA,KAAkB7B,EAAAA,EAAAA,GAAE,8CAGrB,CAFC,MAAO8B,IACPC,EAAAA,EAAAA,KAAgB/B,EAAAA,EAAAA,GAAE,0CACnB,CACF,CAED,MAAMgC,GAAwBC,EAAAA,EAAAA,IAC5B,yFACA,CAACC,cAAc,QAAC,IAAD,CAAMxC,GAAK,aAAYnB,EAAac,WAG/C8C,EAAgBC,IACpB,QAAC,KAAD,CACEC,UAAWD,EACXE,MAAQF,OAAoCG,EAAxBP,EACpBQ,MAAOnC,IAAY,QAAC,KAAD,IAAeF,IAClCT,GAAIQ,EAAcS,EAAeT,QAAeqC,EAChDE,aAAc,CACZC,aAAa,EACbC,SAAU,MACVC,aAAc,CACZC,SAAU,UAGdpE,QAASyB,EAAcM,EAAUS,KAC7BrC,EAbN,SAeGA,EAAYkE,WAAY9C,EAAAA,EAAAA,GAAE,kBAIzB+C,GAAaxE,EAAaqD,qBAAuBtB,EAEvD,OACE,QAAC,IAAD,CAAQ/B,aAAcA,EAAcyE,OAAQ,CAAC,gBAA7C,SACG,QAAC,UAACZ,GAAF,SACCW,GACE,QAAC,IAAD,CAAQxE,aAAcA,EAAcyE,OAAQ,CAAC,aAA7C,SACG,QAAEZ,UAAWa,GAAb,SACC,QAAC,IAAD,CACEC,OAAQD,EAAa,qBAAuB,sBAC5CE,SAAUF,EAAa3B,OAA0BiB,EAFnD,SAIGJ,EAAaC,IALjB,IAUHD,EAAaC,EAbhB,GAFL,IAwBJ,G,gLCzMO,SAASgB,EACdC,GAEQ,IADRC,EACQ,uDAD4B,SAEpC,OAAKC,EAAAA,EAAAA,IAAQF,GAGNG,EAAyCH,EAAOC,GAF9C,GAGV,CAKM,SAASE,EACdH,EACAI,GAEA,KAAKF,EAAAA,EAAAA,IAAQF,GACX,MAAO,IAET,OAAQI,GACN,IAAK,UACL,IAAK,SACH,OAAOJ,EAAMK,iBACf,IAAK,aACH,OAAOC,EAAAA,EAAAA,IAAiBN,EAAO,GACjC,IAAK,WACH,OAAOO,EAAAA,EAAAA,IAAYP,EAAQ,IAAM,GAAG,GACtC,IAAK,OACH,OAAOQ,EAAAA,EAAAA,GAAiBR,GAC1B,QACE,OAAOA,EAAMrC,WAElB,CAMM,SAAS8C,EACdT,EACAC,GAGQ,IAFRS,EAEQ,wDADRC,EACQ,uCACR,OAAOC,EACLZ,EACAC,EACAS,EACAC,EAEH,CAKM,SAASC,EACdZ,EACAI,GAGQ,IAFRM,EAEQ,wDADRC,EACQ,uCACR,OAAQP,GACN,IAAK,UACL,IAAK,SACH,OAAOM,GAAeG,EAAAA,EAAAA,IAAwBb,GAASA,EAAMK,iBAC/D,IAAK,aACH,OAAOC,EAAAA,EAAAA,IAAiBN,EAAO,GACjC,IAAK,WACH,OAAOc,EAAad,EAAOW,GAC7B,IAAK,OACH,OAAOH,EAAAA,EAAAA,GAAiBR,EAAO,GACjC,QACE,OAAOA,EAAMrC,WAElB,CASM,SAASmD,EAAad,EAAeW,GAE1C,GADAA,IAAiBI,EAAmBf,GACtB,IAAVA,EACF,MAAO,IAET,OAAQW,GACN,KAAKK,EAAAA,GAAM,CACT,MAAMC,GAASjB,EAAQgB,EAAAA,IAAME,QAAQ,GACrC,OAAOvE,EAAAA,EAAAA,GAAE,OAAQsE,EAClB,CACD,KAAKE,EAAAA,GAAK,CACR,MAAMF,GAASjB,EAAQmB,EAAAA,IAAKD,QAAQ,GACpC,OAAOvE,EAAAA,EAAAA,GAAE,MAAOsE,EACjB,CACD,KAAKG,EAAAA,GAAM,CACT,MAAMH,GAASjB,EAAQoB,EAAAA,IAAMF,QAAQ,GACrC,OAAOvE,EAAAA,EAAAA,GAAE,OAAQsE,EAClB,CACD,KAAKI,EAAAA,GAAQ,CACX,MAAMJ,GAASjB,EAAQqB,EAAAA,IAAQH,QAAQ,GACvC,OAAOvE,EAAAA,EAAAA,GAAE,QAASsE,EACnB,CACD,KAAKK,EAAAA,GAAQ,CACX,MAAML,GAASjB,EAAQsB,EAAAA,IAAQJ,QAAQ,GACvC,OAAOvE,EAAAA,EAAAA,GAAE,MAAOsE,EACjB,CACD,QACE,MAAMA,EAAQjB,EAAMkB,QAAQ,GAC5B,OAAOvE,EAAAA,EAAAA,GAAE,OAAQsE,GAEtB,CAwCM,SAASM,EACdC,EACAC,GAEA,IAAId,EAAe,EACnB,MAAMe,EAnCD,SAAgCF,EAAkBC,GACvD,IAAIC,EACJ,GAAIF,EAAO,IAAIlD,KAAM,CACnB,IACIqD,EADAC,EAAYJ,EAAO,GAEvBA,EAAOK,SAAQ,CAAC,EAAoBC,KAAQ,IAA5B,WAACC,EAAD,KAAazD,GAAe,GACH,IAAnCmD,GAAQO,WAAWD,IAAyBzD,EAAK2D,SACnDL,EAAYJ,EAAOM,GACnBH,IAAcH,EAAOM,GACtB,IAECH,GAAWrD,OAOboD,EAAQ,CAACQ,IANGC,KAAKD,OACZP,EAAUrD,KAAK8D,KAAI,QAAC,MAACpC,GAAF,SAAaA,CAAb,IAAoBqC,QAAOrC,KAAWA,KAKhDsC,IAHFH,KAAKG,OACZV,EAAUtD,KAAK8D,KAAI,QAAC,MAACpC,GAAF,SAAaA,CAAb,IAAoBqC,QAAOrC,KAAWA,MAIjE,CACD,OAAO0B,CACR,CAaea,CAAuBf,EAAQC,GAC7C,GAAIC,EAAO,CACT,MAAMc,GAAOd,EAAMQ,IAAMR,EAAMY,KAAO,EACtC3B,EAAeI,GAAoBW,EAAMQ,IAAMR,EAAMY,KAAO,IAEvCE,EAAM7B,GAAcO,QAAQ,GAAGe,OAClC,IAChBtB,EAAeI,EAAmByB,GAErC,CACD,OAAO7B,CACR,CAOM,SAASI,EAAmBf,GACjC,OAAIA,GAASgB,EAAAA,GACJA,EAAAA,GAELhB,GAASmB,EAAAA,GACJA,EAAAA,GAELnB,GAASoB,EAAAA,GACJA,EAAAA,GAELpB,GAASqB,EAAAA,GACJA,EAAAA,GAELrB,GAASsB,EAAAA,GACJA,EAAAA,GAEF,CACR,C,gjBClMD,SAASmB,EAAT,GAMU,IANS,SACjBC,EADiB,eAEjBC,EAFiB,eAGjBC,EAHiB,eAIjBC,EAJiB,iBAKjBC,GACQ,EACR,MAAMC,GAAgBC,EAAAA,EAAAA,IAAcN,EAAS5G,MAAMmH,MAC7CC,GAAiBC,EAAAA,EAAAA,IAAeT,EAAS5G,MAAMsH,QAErD,OACE,QAACC,EAAD,YACE,QAACC,EAAD,CAAeC,IAAK,IAApB,WACE,QAAC,IAAD,CAAYR,cAAeA,EAAeS,mBAAoBZ,KAC9D,QAAC,IAAD,IACCE,GAAoBD,IACnB,QAAC,IAAD,CACEY,aAAc,CACZC,QAAQ/G,EAAAA,EAAAA,GAAE,WAEZgH,QAAS,CACP,CACE3D,MAAO,MACPiB,OAAOtE,EAAAA,EAAAA,GAAE,QAEX,CACEqD,MAAO,OACPiB,OAAOtE,EAAAA,EAAAA,GAAE,WAEX,CACEqD,MAAO,SACPiB,OAAOtE,EAAAA,EAAAA,GAAE,cAGbqD,MAAOkD,EACPU,SAAU,QAAC,MAAC5D,GAAF,SAAa6C,EAAe7C,EAA5B,QAIhB,QAAC,IAAD,CACE6D,aAAalH,EAAAA,EAAAA,GAAE,kBACfb,MAAO4G,EAAS5G,OAAOgI,KACvBC,SAAUpB,MAIjB,CA9CQF,EAAAA,YAAAA,YAgDT,UAEMY,GAAU,OAAO,MAAP,qBAAH,qBAEJW,EAAAA,EAAAA,GAAM,KAFF,mBAGMA,EAAAA,EAAAA,GAAM,GAHZ,wBAKUtI,GAAKA,EAAEuI,MAAMC,YAAYC,OALnC,6CAUPb,GAAgB,OAAOc,EAAAA,GAAP,qBAAH,uBACI1I,GAAKA,EAAEuI,MAAMC,YAAYC,OAD7B,8CAIRH,EAAAA,EAAAA,GAAM,KAJE,yBAOItI,GAAKA,EAAEuI,MAAMC,YAAYC,OAP7B,yD,6rBC5DnB,MAAME,EAAc,IAAgC,IAA/B,OAACtH,EAAD,UAASuH,GAAsB,EAClD,MAAMpJ,GAAeqJ,EAAAA,EAAAA,MACf,UAACC,IAAaC,EAAAA,EAAAA,KAUdC,GACJ,cAAIC,UAAyB,UAAdL,EAAwB,SAAW,GAAlD,UACE,QAAC,IAAD,CAAqBjI,GAAK,kBAAiBnB,EAAac,qBAAxD,UACGW,EAAAA,EAAAA,GAAE,mBAKT,OACE,QAAC,KAAD,YACE,QAAC,KAAD,WACE,QAACiI,EAAD,WAAoBjI,EAAAA,EAAAA,GAAE,eAExB,QAAC,KAAD,WACE,QAACkI,EAAD,CAAStB,IAAK,EAAd,WACE,QAAC,IAAD,CACErI,aAAcA,EACd4B,UAAW,CAACgI,KAAM,MAClBC,SAAS,UACT5J,SAAS,eACT8B,qBAAmB,EACnBJ,YACgC,IAA9B2H,EAAUxJ,SAASiH,OACf+C,EAAAA,EAAAA,QAAuB,GAAER,EAAUxJ,SAAS,OAAOgB,UACnDkD,EATR,UAYGvC,EAAAA,EAAAA,GAAE,mBAEL,QAAC,KAAD,CACEvB,QAnCwB6J,IAChCA,EAAEnH,kBACFC,EAAAA,EAAAA,GAAY,aAAY7C,EAAac,mCAAoCe,EAAzE,EAkCQmI,KAAK,IACL/F,MAAM,QAAC,KAAD,CAAc2F,KAAK,OACzB,cAAYnI,EAAAA,EAAAA,GAAE,oBAIpB,QAAC,KAAD,CAAsBwI,YAAU,EAAhC,UACGT,GACD,cAAIC,UAAyB,WAAdL,EAAyB,SAAW,GAAnD,UACE,QAAC,IAAD,CAAqBjI,GAAK,kBAAiBnB,EAAac,eAAxD,UACGW,EAAAA,EAAAA,GAAE,oBAjCb,EApBI0H,EAAAA,YAAAA,cA6DN,UAEMO,GAAoB,OAAOQ,EAAAA,GAAP,qBAAH,eACPpB,EAAAA,EAAAA,GAAM,IADC,KAIjBa,GAAU,OAAOT,EAAAA,GAAP,qBAAH,qC,6kBC3Db,MAAMiB,EAAmB,CACvB,CACEpE,OAAOtE,EAAAA,EAAAA,GAAE,YACTqD,MAAO,WAET,CACEiB,OAAOtE,EAAAA,EAAAA,GAAE,cACTqD,MAAO,eAIX,SAASsF,EAAT,GAMU,IANU,cAClBvC,EADkB,mBAElBS,EAFkB,kBAGlB+B,GAAoB,EAHF,qBAIlBC,GAAuB,EAJL,uBAKlBC,GAAyB,GACjB,EACR,MAAM,MAACC,EAAD,SAAQ3B,EAAR,SAAkB4B,IAAYC,EAAAA,EAAAA,GAAS,CAACC,iBAAkBN,IAE1DO,GAAcC,EAAAA,EAAAA,UAClB,IACEL,EAAMtD,KAAIa,IAAQ,CAChBjD,MAAOiD,EAAKtH,GACZsF,MAAQ,IAAGgC,EAAKjH,OAChBgK,cAAc,QAAC,IAAD,CAAY/C,KAAMA,EAAM6B,KAAM,UAEhD,CAACY,KAGIO,EAAaC,IAAgBH,EAAAA,EAAAA,UAAQ,KAC1C,MAAMI,EACJpD,EAAc,IAAMsC,EAAiB5J,MAAK2K,GAAOA,EAAIpG,QAAU+C,EAAc,KAEzEsD,EACJtD,EAAc,IAAM2C,EAAMjK,MAAKwH,GAAQA,EAAKtH,KAAOoH,EAAc,KAEnE,OAAIoD,EACK,EAAC,QAAC,KAAD,GAAe,GAAOA,EAAwBlF,OAGpDoF,EACK,EACL,QAAC,IAAD,CAAYpD,KAAMoD,EAAmBvB,KAAM,IAAS,GACnD,IAAGuB,EAAkBrK,QAInB,EACL,QAAC,KAAD,GAAe,GACfyJ,GAAyB9I,EAAAA,EAAAA,GAAE,aAAcA,EAAAA,EAAAA,GAAE,aAF7C,GAIC,CAACoG,EAAe2C,EAAOD,IAE1B,OACE,QAAC,IAAD,CACEa,UAAQ,EACRC,aAAW,EACXC,cAAY,EACZC,UAAWd,EACXe,WAAW/J,EAAAA,EAAAA,GAAE,gBACbgH,QACE6B,EACI,CACE,CAACxF,MAAO,aAAciB,OAAOtE,EAAAA,EAAAA,GAAE,aAAcgH,QAAS0B,GACtD,CAACrF,MAAO,SAAUiB,OAAOtE,EAAAA,EAAAA,GAAE,SAAUgH,QAASmC,IAEhDA,EAEN9F,MAAO+C,EACP4D,cAAeC,KAASC,IAAY9C,EAAS8C,EAAtB,GAA4BC,EAAAA,IACnDlD,SAAUmD,GAKDvD,EAHFuD,EAGqBA,EAAK3E,KAAIgE,GAAOA,EAAIpG,QAFlB,IAI9BkG,cACE,QAAC,EAAAc,SAAD,WACGd,EACAnD,EAAcd,OAAS,IACtB,QAACgF,EAAD,CAAaC,KAAO,KAAGnE,EAAcd,OAAS,QAIpDwB,aAAc,CAACtE,KAAM8G,IAG1B,CA9EQX,EAAAA,YAAAA,aAgFT,UAEM2B,GAAc,OAAOE,EAAAA,EAAP,qBAAH,uC","sources":["webpack:///./app/components/createAlertButton.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/alerts/filterBar.tsx","webpack:///./app/views/alerts/list/header.tsx","webpack:///./app/views/alerts/list/rules/teamFilter.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Access from 'sentry/components/acl/access';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {IconSiren} from 'sentry/icons';\nimport type {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization, Project} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardRuleTemplates,\n  DEFAULT_WIZARD_TEMPLATE,\n} from 'sentry/views/alerts/wizard/options';\n\nexport type CreateAlertFromViewButtonProps = ButtonProps & {\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  alertType?: AlertType;\n  className?: string;\n  /**\n   * Passed in value to override any metrics decision and switch back to transactions dataset.\n   * We currently do a few checks on metrics data on performance pages and this passes the decision onward to alerts.\n   */\n  disableMetricDataset?: boolean;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onClick?: () => void;\n\n  referrer?: string;\n};\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onClick,\n  alertType,\n  disableMetricDataset,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const queryParams = eventView.generateQueryStringObject();\n  if (queryParams.query?.includes(`project:${project?.slug}`)) {\n    queryParams.query = (queryParams.query as string).replace(\n      `project:${project?.slug}`,\n      ''\n    );\n  }\n\n  const alertTemplate = alertType\n    ? AlertWizardRuleTemplates[alertType]\n    : DEFAULT_WIZARD_TEMPLATE;\n\n  const to = {\n    pathname: `/organizations/${organization.slug}/alerts/new/metric/`,\n    query: {\n      ...queryParams,\n      createFromDiscover: true,\n      disableMetricDataset,\n      referrer,\n      ...alertTemplate,\n      project: project?.slug,\n      aggregate: queryParams.yAxis ?? alertTemplate.aggregate,\n    },\n  };\n\n  const handleClick = () => {\n    onClick?.();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      aria-label={t('Create Alert')}\n      {...buttonProps}\n    />\n  );\n}\n\ntype CreateAlertButtonProps = {\n  organization: Organization;\n  alertOption?: keyof typeof AlertWizardAlertNames;\n  hideIcon?: boolean;\n  iconProps?: SVGIconProps;\n  /**\n   * Callback when the button is clicked.\n   * This is different from `onClick` which always overrides the default\n   * behavior when the button was clicked.\n   */\n  onEnter?: () => void;\n  projectSlug?: string;\n  referrer?: string;\n  showPermissionGuide?: boolean;\n} & WithRouterProps &\n  ButtonProps;\n\nconst CreateAlertButton = withRouter(\n  ({\n    organization,\n    projectSlug,\n    iconProps,\n    referrer,\n    router,\n    hideIcon,\n    showPermissionGuide,\n    alertOption,\n    onEnter,\n    ...buttonProps\n  }: CreateAlertButtonProps) => {\n    const api = useApi();\n    const createAlertUrl = (providedProj: string): string => {\n      const params = new URLSearchParams();\n      if (referrer) {\n        params.append('referrer', referrer);\n      }\n      if (providedProj !== ':projectId') {\n        params.append('project', providedProj);\n      }\n      if (alertOption) {\n        params.append('alert_option', alertOption);\n      }\n      return `/organizations/${organization.slug}/alerts/wizard/?${params.toString()}`;\n    };\n\n    function handleClickWithoutProject(event: React.MouseEvent) {\n      event.preventDefault();\n      onEnter?.();\n\n      navigateTo(createAlertUrl(':projectId'), router);\n    }\n\n    async function enableAlertsMemberWrite() {\n      const settingsEndpoint = `/organizations/${organization.slug}/`;\n      addLoadingMessage();\n      try {\n        await api.requestPromise(settingsEndpoint, {\n          method: 'PUT',\n          data: {\n            alertsMemberWrite: true,\n          },\n        });\n        addSuccessMessage(t('Successfully updated organization settings'));\n      } catch (err) {\n        addErrorMessage(t('Unable to update organization settings'));\n      }\n    }\n\n    const permissionTooltipText = tct(\n      'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n      {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n    );\n\n    const renderButton = (hasAccess: boolean) => (\n      <Button\n        disabled={!hasAccess}\n        title={!hasAccess ? permissionTooltipText : undefined}\n        icon={!hideIcon && <IconSiren {...iconProps} />}\n        to={projectSlug ? createAlertUrl(projectSlug) : undefined}\n        tooltipProps={{\n          isHoverable: true,\n          position: 'top',\n          overlayStyle: {\n            maxWidth: '270px',\n          },\n        }}\n        onClick={projectSlug ? onEnter : handleClickWithoutProject}\n        {...buttonProps}\n      >\n        {buttonProps.children ?? t('Create Alert')}\n      </Button>\n    );\n\n    const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n    return (\n      <Access organization={organization} access={['alerts:write']}>\n        {({hasAccess}) =>\n          showGuide ? (\n            <Access organization={organization} access={['org:write']}>\n              {({hasAccess: isOrgAdmin}) => (\n                <GuideAnchor\n                  target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                  onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n                >\n                  {renderButton(hasAccess)}\n                </GuideAnchor>\n              )}\n            </Access>\n          ) : (\n            renderButton(hasAccess)\n          )\n        }\n      </Access>\n    );\n  }\n);\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n","import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n","import styled from '@emotion/styled';\nimport type {Location} from 'history';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CompactSelect from 'sentry/components/compactSelect';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SearchBar from 'sentry/components/searchBar';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport TeamFilter from './list/rules/teamFilter';\nimport {getQueryStatus, getTeamParams} from './utils';\n\ninterface Props {\n  location: Location<any>;\n  onChangeFilter: (activeFilters: string[]) => void;\n  onChangeSearch: (query: string) => void;\n  hasStatusFilters?: boolean;\n  onChangeStatus?: (status: string) => void;\n}\n\nfunction FilterBar({\n  location,\n  onChangeSearch,\n  onChangeFilter,\n  onChangeStatus,\n  hasStatusFilters,\n}: Props) {\n  const selectedTeams = getTeamParams(location.query.team);\n  const selectedStatus = getQueryStatus(location.query.status);\n\n  return (\n    <Wrapper>\n      <FilterButtons gap={1.5}>\n        <TeamFilter selectedTeams={selectedTeams} handleChangeFilter={onChangeFilter} />\n        <ProjectPageFilter />\n        {hasStatusFilters && onChangeStatus && (\n          <CompactSelect\n            triggerProps={{\n              prefix: t('Status'),\n            }}\n            options={[\n              {\n                value: 'all',\n                label: t('All'),\n              },\n              {\n                value: 'open',\n                label: t('Active'),\n              },\n              {\n                value: 'closed',\n                label: t('Inactive'),\n              },\n            ]}\n            value={selectedStatus}\n            onChange={({value}) => onChangeStatus(value)}\n          />\n        )}\n      </FilterButtons>\n      <SearchBar\n        placeholder={t('Search by name')}\n        query={location.query?.name}\n        onSearch={onChangeSearch}\n      />\n    </Wrapper>\n  );\n}\n\nexport default FilterBar;\n\nconst Wrapper = styled('div')`\n  display: grid;\n  gap: ${space(1.5)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: min-content 1fr;\n  }\n`;\n\nconst FilterButtons = styled(ButtonBar)`\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: flex-start;\n    gap: ${space(1.5)};\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: grid;\n    grid-auto-columns: minmax(auto, 300px);\n  }\n`;\n","import {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\n\ntype Props = {\n  activeTab: 'stream' | 'rules';\n  router: InjectedRouter;\n};\n\nconst AlertHeader = ({router, activeTab}: Props) => {\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  const alertRulesLink = (\n    <li className={activeTab === 'rules' ? 'active' : ''}>\n      <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n        {t('Alert Rules')}\n      </GlobalSelectionLink>\n    </li>\n  );\n\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n      </Layout.HeaderContent>\n      <Layout.HeaderActions>\n        <Actions gap={1}>\n          <CreateAlertButton\n            organization={organization}\n            iconProps={{size: 'sm'}}\n            priority=\"primary\"\n            referrer=\"alert_stream\"\n            showPermissionGuide\n            projectSlug={\n              selection.projects.length === 1\n                ? ProjectsStore.getById(`${selection.projects[0]}`)?.slug\n                : undefined\n            }\n          >\n            {t('Create Alert')}\n          </CreateAlertButton>\n          <Button\n            onClick={handleNavigateToSettings}\n            href=\"#\"\n            icon={<IconSettings size=\"sm\" />}\n            aria-label={t('Settings')}\n          />\n        </Actions>\n      </Layout.HeaderActions>\n      <Layout.HeaderNavTabs underlined>\n        {alertRulesLink}\n        <li className={activeTab === 'stream' ? 'active' : ''}>\n          <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/`}>\n            {t('History')}\n          </GlobalSelectionLink>\n        </li>\n      </Layout.HeaderNavTabs>\n    </Layout.Header>\n  );\n};\n\nexport default AlertHeader;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport TeamAvatar from 'sentry/components/avatar/teamAvatar';\nimport Badge from 'sentry/components/badge';\nimport CompactSelect from 'sentry/components/compactSelect';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport useTeams from 'sentry/utils/useTeams';\n\ninterface Props {\n  handleChangeFilter: (activeFilters: string[]) => void;\n  selectedTeams: string[];\n  /**\n   * only show teams user is a member of\n   */\n  showIsMemberTeams?: boolean;\n  /**\n   * show My Teams as the default dropdown description\n   */\n  showMyTeamsDescription?: boolean;\n  /**\n   * show suggested options (My Teams and Unassigned)\n   */\n  showSuggestedOptions?: boolean;\n}\n\nconst suggestedOptions = [\n  {\n    label: t('My Teams'),\n    value: 'myteams',\n  },\n  {\n    label: t('Unassigned'),\n    value: 'unassigned',\n  },\n];\n\nfunction TeamFilter({\n  selectedTeams,\n  handleChangeFilter,\n  showIsMemberTeams = false,\n  showSuggestedOptions = true,\n  showMyTeamsDescription = false,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams({provideUserTeams: showIsMemberTeams});\n\n  const teamOptions = useMemo(\n    () =>\n      teams.map(team => ({\n        value: team.id,\n        label: `#${team.slug}`,\n        leadingItems: <TeamAvatar team={team} size={18} />,\n      })),\n    [teams]\n  );\n\n  const [triggerIcon, triggerLabel] = useMemo(() => {\n    const firstSelectedSuggestion =\n      selectedTeams[0] && suggestedOptions.find(opt => opt.value === selectedTeams[0]);\n\n    const firstSelectedTeam =\n      selectedTeams[0] && teams.find(team => team.id === selectedTeams[0]);\n\n    if (firstSelectedSuggestion) {\n      return [<IconUser key={0} />, firstSelectedSuggestion.label];\n    }\n\n    if (firstSelectedTeam) {\n      return [\n        <TeamAvatar team={firstSelectedTeam} size={16} key={0} />,\n        `#${firstSelectedTeam.slug}`,\n      ];\n    }\n\n    return [\n      <IconUser key={0} />,\n      showMyTeamsDescription ? t('My Teams') : t('All Teams'),\n    ];\n  }, [selectedTeams, teams, showMyTeamsDescription]);\n\n  return (\n    <CompactSelect\n      multiple\n      isClearable\n      isSearchable\n      isLoading={fetching}\n      menuTitle={t('Filter teams')}\n      options={\n        showSuggestedOptions\n          ? [\n              {value: '_suggested', label: t('Suggested'), options: suggestedOptions},\n              {value: '_teams', label: t('Teams'), options: teamOptions},\n            ]\n          : teamOptions\n      }\n      value={selectedTeams}\n      onInputChange={debounce(val => void onSearch(val), DEFAULT_DEBOUNCE_DURATION)}\n      onChange={opts => {\n        // Compact select type inference does not work - onChange type is actually T | null.\n        if (!opts) {\n          return handleChangeFilter([]);\n        }\n        return handleChangeFilter(opts.map(opt => opt.value));\n      }}\n      triggerLabel={\n        <Fragment>\n          {triggerLabel}\n          {selectedTeams.length > 1 && (\n            <StyledBadge text={`+${selectedTeams.length - 1}`} />\n          )}\n        </Fragment>\n      }\n      triggerProps={{icon: triggerIcon}}\n    />\n  );\n}\n\nexport default TeamFilter;\n\nconst StyledBadge = styled(Badge)`\n  flex-shrink: 0;\n`;\n"],"names":["CreateAlertFromViewButton","projects","eventView","organization","referrer","onClick","alertType","disableMetricDataset","buttonProps","project","find","p","id","queryParams","generateQueryStringObject","query","includes","slug","replace","alertTemplate","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","to","pathname","createFromDiscover","aggregate","yAxis","CreateAlertButton","t","withRouter","projectSlug","iconProps","router","hideIcon","showPermissionGuide","alertOption","onEnter","api","useApi","createAlertUrl","providedProj","params","URLSearchParams","append","toString","handleClickWithoutProject","event","preventDefault","navigateTo","async","enableAlertsMemberWrite","settingsEndpoint","addLoadingMessage","requestPromise","method","data","alertsMemberWrite","addSuccessMessage","err","addErrorMessage","permissionTooltipText","tct","settingsLink","renderButton","hasAccess","disabled","title","undefined","icon","tooltipProps","isHoverable","position","overlayStyle","maxWidth","children","showGuide","access","isOrgAdmin","target","onFinish","tooltipFormatter","value","outputType","defined","tooltipFormatterUsingAggregateOutputType","type","toLocaleString","formatPercentage","getDuration","formatBytesBase2","axisLabelFormatter","abbreviation","durationUnit","axisLabelFormatterUsingAggregateOutputType","formatAbbreviatedNumber","axisDuration","categorizeDuration","WEEK","label","toFixed","DAY","HOUR","MINUTE","SECOND","getDurationUnit","series","legend","range","maxSeries","minSeries","forEach","idx","seriesName","selected","length","max","Math","map","filter","min","findRangeOfMultiSeries","avg","FilterBar","location","onChangeSearch","onChangeFilter","onChangeStatus","hasStatusFilters","selectedTeams","getTeamParams","team","selectedStatus","getQueryStatus","status","Wrapper","FilterButtons","gap","handleChangeFilter","triggerProps","prefix","options","onChange","placeholder","name","onSearch","space","theme","breakpoints","small","ButtonBar","AlertHeader","activeTab","useOrganization","selection","usePageFilters","alertRulesLink","className","StyledLayoutTitle","Actions","size","priority","ProjectsStore","e","href","underlined","Layout","suggestedOptions","TeamFilter","showIsMemberTeams","showSuggestedOptions","showMyTeamsDescription","teams","fetching","useTeams","provideUserTeams","teamOptions","useMemo","leadingItems","triggerIcon","triggerLabel","firstSelectedSuggestion","opt","firstSelectedTeam","multiple","isClearable","isSearchable","isLoading","menuTitle","onInputChange","debounce","val","DEFAULT_DEBOUNCE_DURATION","opts","Fragment","StyledBadge","text","Badge"],"sourceRoot":""}