{"version":3,"file":"chunks/app_views_settings_projectAlerts_settings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"glBAcA,MAAMA,EAAkB,IAAsC,IAArC,QAACC,EAAD,eAAUC,GAA2B,EAC5D,OAAuB,IAAnBD,EAAQE,OACH,MAIP,QAAC,KAAD,YACE,QAAC,KAAD,WAAcC,EAAAA,EAAAA,GAAE,4BAEhB,QAAC,IAAD,WACE,QAACC,EAAD,UACGJ,EAAQK,KAAIC,IACX,QAACC,EAAD,CAEEC,QAAS,IAAMP,EAAeK,GAC9BG,UAAY,qBAAoBH,EAAOI,KAHzC,UAKE,QAACC,EAAD,YACE,QAACC,EAAD,CAAkBC,SAAUP,EAAOI,MACnC,QAAC,IAAD,UAAeJ,EAAOQ,WAAaR,EAAOS,WANvCT,EAAOI,YARxB,EALIX,EAAAA,YAAAA,kBA6BN,MAAMK,GAAU,OAAO,MAAP,qBAAH,yBAEAY,EAAAA,EAAAA,GAAM,GAFN,2BAOPT,GAAoB,OAAO,SAAP,qBAAH,WACXS,EAAAA,EAAAA,GAAM,GADK,6CAIRC,GAAKA,EAAEC,MAAMC,eAJL,wIAWJF,GAAKA,EAAEC,MAAME,cAXT,6CAmBjBT,GAAQ,OAAO,MAAP,qBAAH,kFAMLC,GAAmB,OAAOS,EAAAA,GAAP,qBAAH,iBACJL,EAAAA,EAAAA,GAAM,GADF,KAItB,I,6CC/DA,MAAMM,EAAa,IAMN,IANO,aAClBC,EADkB,QAElBC,EAFkB,WAGlBC,EAHkB,gBAIlBC,EAAkB,SAJA,eAKlBzB,EAAiB,UACN,EACX,MAUM0B,EAAuBrB,KAC3BsB,EAAAA,EAAAA,IAAc,CACZC,UAAWL,EAAQM,KACnBC,MAAOR,EAAaO,KACpBjB,SAAUP,EAAOwB,OAGnBJ,EAAgBpB,EAAhB,EAGF,OAAKmB,EAAWvB,QAWd,yBACGuB,EACEO,QAAOf,GAAKA,EAAEgB,UACd5B,KAAI6B,IACH,QAAC,IAAD,CACEA,KAAMA,EACNX,aAAcA,EACdC,QAASA,EAETE,gBAAiBC,GADZO,EAAKxB,OAKhB,QAAC,EAAD,CACEV,QAASyB,EAAWO,QAAOf,IAAMA,EAAEgB,UAAYhB,EAAEkB,WACjDlC,eA9CsBK,KAC1B8B,EAAAA,EAAAA,IAAa,CACXP,UAAWL,EAAQM,KACnBC,MAAOR,EAAaO,KACpBjB,SAAUP,EAAOwB,OAGnB7B,EAAeK,EAAf,QAeE,QAAC,KAAD,WACE,QAAC,KAAD,WACGH,EAAAA,EAAAA,GAAE,0EAMX,EArCImB,EAAAA,YAAAA,aA2DN,S,sHCvEO,MAAMe,EAAQ,+CAEfC,EAAiBC,IACrBA,EAAQC,OAAOD,GAAS,IACjBE,EAAAA,EAAAA,IAAG,YAAa,aAAcF,IAG1BG,EAAiC,CAC5CC,gBAAiB,CACf5B,KAAM,kBACN6B,KAAM,SAGNC,OAAO1C,EAAAA,EAAAA,GAAE,oBACT2C,YAAa,yBACbC,MAAM5C,EAAAA,EAAAA,GACJ,yMAGJ6C,gBAAiB,CACfjC,KAAM,kBACN6B,KAAM,QACNK,IAAK,GACLC,IAAK,KACLC,KAAM,GACNC,aAAc,IACdP,OAAO1C,EAAAA,EAAAA,GAAE,6BACT4C,MAAM5C,EAAAA,EAAAA,GAAE,uDACRkD,YAAaf,GAEfgB,gBAAiB,CACfvC,KAAM,kBACN6B,KAAM,QACNK,IAAK,GACLC,IAAK,KACLC,KAAM,GACNC,aAAc,IACdP,OAAO1C,EAAAA,EAAAA,GAAE,6BACT4C,MAAM5C,EAAAA,EAAAA,GAAE,wDACRkD,YAAaf,G,0DC/BjB,QAZA,SACEiB,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACR,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC1C,C,wPCJc,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACR,CAEDC,SACE,OACE,QAAC,IAAD,CAAqBC,MAAOC,KAAKH,WAAjC,SACGG,KAAKC,mBAGX,EAdkBN,EAAAA,YAAAA,W,qRCCrB,MAAMO,EAAkB,QAAC,OAACC,EAAS,CAAC,oBAAqBC,GAAjC,SACtB,QAAC,IAAD,CAAQD,OAAQA,EAAhB,SACG,QAAC,UAACE,GAAF,SACEA,IACC,QAAC,IAAD,CAAO3B,KAAK,aAAc0B,EAA1B,UACGnE,EAAAA,EAAAA,GACC,oGAJP,GAFmB,EAAlBiE,EAAAA,YAAAA,kBAcN,S,6yBCUA,MAAMI,UAAiBX,EAAAA,EAAwB,qEAsBvBvD,IACpB4D,KAAKO,UAASC,IAAa,CACzBjD,YAAaiD,EAAUjD,YAAc,IAAIpB,KAAIY,GACvCA,EAAEP,KAAOJ,EAAOI,GACXO,EAEF,IACFX,EACH2B,SAAS,QAPf,KAvB2C,mCAoCtB3B,IACrB4D,KAAKO,UAASC,IAAa,CACzBjD,YAAaiD,EAAUjD,YAAc,IAAIpB,KAAIY,GACvCA,EAAEP,KAAOJ,EAAOI,GACXO,EAEF,IACFX,EACH2B,SAAS,QAPf,GArC2C,CAC7C0C,kBACE,MAAO,IACFC,MAAMD,kBACTnD,QAAS,KACTC,WAAY,GAEf,CACDoD,mBAAmB,GAAiC,IAAjC,MAAC9C,EAAD,UAAQF,GAAyB,EAClD,MAAQ,aAAYE,KAASF,IAC9B,CAEDiD,eACE,MAAM,OAACC,GAAUb,KAAKI,OAChB,MAACvC,EAAD,UAAQF,GAAakD,EAE3B,MAAO,CACL,CAAC,UAFqBb,KAAKW,mBAAmBE,IAG9C,CAAC,aAAe,aAAYhD,KAASF,cAExC,CA8BDkC,WACE,MAAM,UAAClC,GAAaqC,KAAKI,MAAMS,OAC/B,OAAOC,EAAAA,EAAAA,IAAc7E,EAAAA,EAAAA,GAAE,mBAAoB0B,GAAW,EACvD,CAEDoD,aACE,MAAM,YAACC,EAAD,aAAc3D,EAAd,OAA4BwD,GAAUb,KAAKI,OAC3C,MAACvC,GAASgD,GACV,QAACvD,EAAD,WAAUC,GAAcyC,KAAKiB,MAEnC,IAAK3D,EACH,OAAO,KAGT,MAAM4D,EAAkBlB,KAAKW,mBAAmBE,GAEhD,OACE,QAAC,EAAAM,SAAD,YACE,QAAC,IAAD,CACEpB,OAAO9D,EAAAA,EAAAA,GAAE,mBACTmF,QACE,QAAC,KAAD,CACEC,GAAI,CACFC,SAAW,kBAAiBzD,kBAC5B0D,MAAO,CAACjE,QAASA,EAAQd,KAE3BgF,KAAK,KALP,UAOGvF,EAAAA,EAAAA,GAAE,yBAIT,QAAC,IAAD,KACA,QAAC,IAAD,CAAWoF,GAAG,mCAAmCI,MAAM,QAAC,IAAD,IAAvD,UACGxF,EAAAA,EAAAA,GACC,+FAIJ,QAAC,IAAD,CACEyF,YAAU,EACVC,WAAS,EACTC,YAAa,CACXnD,gBAAiBnB,EAAQmB,gBACzBK,gBAAiBxB,EAAQwB,gBACzBM,gBAAiB9B,EAAQ8B,iBAE3ByC,UAAU,MACVC,YAAaZ,EATf,WAWE,QAAC,IAAD,CACEa,UAAWf,EACXjB,OAAO9D,EAAAA,EAAAA,GAAE,kBACTuC,OAAQ,CAACA,EAAAA,OAAAA,oBAGX,QAAC,IAAD,CACEuB,OAAO9D,EAAAA,EAAAA,GAAE,WACT8F,UAAWf,EACXxC,OAAQ,CAACA,EAAAA,OAAAA,gBAAwBA,EAAAA,OAAAA,iBACjCwD,aAAc,KACZ,QAAC,KAAD,CAAYtD,KAAK,OAAjB,UACGzC,EAAAA,EAAAA,GACC,wNAOT+E,IACC,QAAC,IAAD,CACE3D,aAAcA,EACdC,QAASA,EACTC,YAAaA,GAAc,IAAIO,QAC7Bf,GAAgB,iBAAXA,EAAE2B,MAA2B3B,EAAEkF,mBAEtClG,eAAgBiE,KAAKkC,mBACrB1E,gBAAiBwC,KAAKvC,wBAK/B,EAGH,S","sources":["webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/data/forms/projectAlerts.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectAlerts/settings.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport space from 'sentry/styles/space';\nimport {Plugin} from 'sentry/types';\n\ntype Props = {\n  onEnablePlugin: (plugin: Plugin) => void;\n  plugins: Plugin[];\n};\n\nconst InactivePlugins = ({plugins, onEnablePlugin}: Props) => {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled('button')`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'sentry/actionCreators/plugins';\nimport InactivePlugins from 'sentry/components/inactivePlugins';\nimport PluginConfig from 'sentry/components/pluginConfig';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\n\nimport {Panel, PanelItem} from './panels';\n\ntype Props = {\n  organization: Organization;\n  pluginList: Plugin[];\n  project: Project;\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nconst PluginList = ({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) => {\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n};\n\nexport default PluginList;\n","import {Field} from 'sentry/components/forms/types';\nimport {t, tn} from 'sentry/locale';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/alerts/';\n\nconst formatMinutes = (value: number | '') => {\n  value = Number(value) / 60;\n  return tn('%s minute', '%s minutes', value);\n};\n\nexport const fields: {[key: string]: Field} = {\n  subjectTemplate: {\n    name: 'subjectTemplate',\n    type: 'string',\n\n    // additional data/props that is related to rendering of form field rather than data\n    label: t('Subject Template'),\n    placeholder: 'e.g. $shortID - $title',\n    help: t(\n      'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $title, $shortID, $projectID, $orgID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'\n    ),\n  },\n  digestsMinDelay: {\n    name: 'digestsMinDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Minimum delivery interval'),\n    help: t('Notifications will be delivered at most this often.'),\n    formatLabel: formatMinutes,\n  },\n  digestsMaxDelay: {\n    name: 'digestsMaxDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Maximum delivery interval'),\n    help: t('Notifications will be delivered at least this often.'),\n    formatLabel: formatMinutes,\n  },\n};\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport AlertLink from 'sentry/components/alertLink';\nimport Button from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {PanelAlert} from 'sentry/components/panels';\nimport PluginList from 'sentry/components/pluginList';\nimport {fields} from 'sentry/data/forms/projectAlerts';\nimport {IconMail} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype RouteParams = {orgId: string; projectId: string};\ntype Props = RouteComponentProps<RouteParams, {}> &\n  AsyncView['props'] & {\n    canEditRule: boolean;\n    organization: Organization;\n    project: Project;\n  };\n\ntype State = AsyncView['state'] & {\n  pluginList: Array<Plugin> | null;\n  project: Project | null;\n};\n\nclass Settings extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      project: null,\n      pluginList: [],\n    };\n  }\n  getProjectEndpoint({orgId, projectId}: RouteParams) {\n    return `/projects/${orgId}/${projectId}/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {orgId, projectId} = params;\n    const projectEndpoint = this.getProjectEndpoint(params);\n    return [\n      ['project', projectEndpoint],\n      ['pluginList', `/projects/${orgId}/${projectId}/plugins/`],\n    ];\n  }\n\n  handleEnablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: true,\n        };\n      }),\n    }));\n  };\n\n  handleDisablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: false,\n        };\n      }),\n    }));\n  };\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Alerts Settings'), projectId, false);\n  }\n\n  renderBody() {\n    const {canEditRule, organization, params} = this.props;\n    const {orgId} = params;\n    const {project, pluginList} = this.state;\n\n    if (!project) {\n      return null;\n    }\n\n    const projectEndpoint = this.getProjectEndpoint(params);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Alerts Settings')}\n          action={\n            <Button\n              to={{\n                pathname: `/organizations/${orgId}/alerts/rules/`,\n                query: {project: project.id},\n              }}\n              size=\"sm\"\n            >\n              {t('View Alert Rules')}\n            </Button>\n          }\n        />\n        <PermissionAlert />\n        <AlertLink to=\"/settings/account/notifications/\" icon={<IconMail />}>\n          {t(\n            'Looking to fine-tune your personal notification preferences? Visit your Account Settings'\n          )}\n        </AlertLink>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            subjectTemplate: project.subjectTemplate,\n            digestsMinDelay: project.digestsMinDelay,\n            digestsMaxDelay: project.digestsMaxDelay,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={projectEndpoint}\n        >\n          <JsonForm\n            disabled={!canEditRule}\n            title={t('Email Settings')}\n            fields={[fields.subjectTemplate]}\n          />\n\n          <JsonForm\n            title={t('Digests')}\n            disabled={!canEditRule}\n            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                {t(\n                  'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. To control how frequently notifications are delivered, use the sliders below.'\n                )}\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        {canEditRule && (\n          <PluginList\n            organization={organization}\n            project={project}\n            pluginList={(pluginList ?? []).filter(\n              p => p.type === 'notification' && p.hasConfiguration\n            )}\n            onEnablePlugin={this.handleEnablePlugin}\n            onDisablePlugin={this.handleDisablePlugin}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Settings;\n"],"names":["InactivePlugins","plugins","onEnablePlugin","length","t","Plugins","map","plugin","IntegrationButton","onClick","className","id","Label","StyledPluginIcon","pluginId","shortName","name","space","p","theme","fontSizeSmall","borderRadius","PluginIcon","PluginList","organization","project","pluginList","onDisablePlugin","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","isHidden","enablePlugin","route","formatMinutes","value","Number","tn","fields","subjectTemplate","type","label","placeholder","help","digestsMinDelay","min","max","step","defaultValue","formatLabel","digestsMaxDelay","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","PermissionAlert","access","props","hasAccess","Settings","setState","prevState","getDefaultState","super","getProjectEndpoint","getEndpoints","params","routeTitleGen","renderBody","canEditRule","state","projectEndpoint","Fragment","action","to","pathname","query","size","icon","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","disabled","renderHeader","hasConfiguration","handleEnablePlugin"],"sourceRoot":""}