{"version":3,"file":"chunks/app_components_modals_featureTourModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/featureTourModal.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps, openModal} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nexport type TourStep = {\n  body: React.ReactNode;\n  title: string;\n  actions?: React.ReactNode;\n  image?: React.ReactNode;\n};\n\ntype ChildProps = {\n  showModal: () => void;\n};\n\ntype Props = {\n  children: (props: ChildProps) => React.ReactNode;\n  /**\n   * The list of tour steps.\n   * The FeatureTourModal will manage state on the active step.\n   */\n  steps: TourStep[];\n  /**\n   * Customize the text shown on the done button.\n   */\n  doneText?: string;\n  /**\n   * Provide a URL for the done state to open in a new tab.\n   */\n  doneUrl?: string;\n  /**\n   * Triggered when the tour is advanced.\n   */\n  onAdvance?: (currentIndex: number, durationOpen: number) => void;\n  /**\n   * Triggered when the tour is closed by completion or IconClose\n   */\n  onCloseModal?: (currentIndex: number, durationOpen: number) => void;\n};\n\ntype State = {\n  /**\n   * The last known step\n   */\n  current: number;\n\n  /**\n   * The timestamp when the modal was shown.\n   * Used to calculate how long the modal was open\n   */\n  openedAt: number;\n};\n\nconst defaultProps = {\n  doneText: t('Done'),\n};\n\n/**\n * Provide a showModal action to the child function that lets\n * a tour be triggered.\n *\n * Once active this component will track when the tour was started and keep\n * a last known step state. Ideally the state would live entirely in this component.\n * However, once the modal has been opened state changes in this component don't\n * trigger re-renders in the modal contents. This requires a bit of duplicate state\n * to be managed around the current step.\n */\nclass FeatureTourModal extends Component<Props, State> {\n  static defaultProps = defaultProps;\n\n  state: State = {\n    openedAt: 0,\n    current: 0,\n  };\n\n  // Record the step change and call the callback this component was given.\n  handleAdvance = (current: number, duration: number) => {\n    this.setState({current});\n    this.props.onAdvance?.(current, duration);\n  };\n\n  handleShow = () => {\n    this.setState({openedAt: Date.now()}, () => {\n      const modalProps = {\n        steps: this.props.steps,\n        onAdvance: this.handleAdvance,\n        openedAt: this.state.openedAt,\n        doneText: this.props.doneText,\n        doneUrl: this.props.doneUrl,\n      };\n      openModal(deps => <ModalContents {...deps} {...modalProps} />, {\n        onClose: this.handleClose,\n      });\n    });\n  };\n\n  handleClose = () => {\n    // The bootstrap modal and modal store both call this callback.\n    // We use the state flag to deduplicate actions to upstream components.\n    if (this.state.openedAt === 0) {\n      return;\n    }\n    const {onCloseModal} = this.props;\n\n    const duration = Date.now() - this.state.openedAt;\n    onCloseModal?.(this.state.current, duration);\n\n    // Reset the state now that the modal is closed, used to deduplicate close actions.\n    this.setState({openedAt: 0, current: 0});\n  };\n\n  render() {\n    const {children} = this.props;\n    return <Fragment>{children({showModal: this.handleShow})}</Fragment>;\n  }\n}\n\nexport default FeatureTourModal;\n\ntype ContentsProps = ModalRenderProps &\n  Pick<Props, 'steps' | 'doneText' | 'doneUrl' | 'onAdvance'> &\n  Pick<State, 'openedAt'>;\n\ntype ContentsState = {\n  current: number;\n  openedAt: number;\n};\n\nclass ModalContents extends Component<ContentsProps, ContentsState> {\n  static defaultProps = defaultProps;\n\n  state: ContentsState = {\n    current: 0,\n    openedAt: Date.now(),\n  };\n\n  handleAdvance = () => {\n    const {onAdvance, openedAt} = this.props;\n    this.setState(\n      prevState => ({current: prevState.current + 1}),\n      () => {\n        const duration = Date.now() - openedAt;\n        onAdvance?.(this.state.current, duration);\n      }\n    );\n  };\n\n  render() {\n    const {Body, steps, doneText, doneUrl, closeModal} = this.props;\n    const {current} = this.state;\n\n    const step = steps[current] !== undefined ? steps[current] : steps[steps.length - 1];\n    const hasNext = steps[current + 1] !== undefined;\n\n    return (\n      <Body data-test-id=\"feature-tour\">\n        <CloseButton\n          borderless\n          size=\"zero\"\n          onClick={closeModal}\n          icon={<IconClose />}\n          aria-label={t('Close tour')}\n        />\n        <TourContent>\n          {step.image}\n          <TourHeader>{step.title}</TourHeader>\n          {step.body}\n          <TourButtonBar gap={1}>\n            {step.actions && step.actions}\n            {hasNext && (\n              <Button priority=\"primary\" onClick={this.handleAdvance}>\n                {t('Next')}\n              </Button>\n            )}\n            {!hasNext && (\n              <Button\n                external\n                href={doneUrl}\n                onClick={closeModal}\n                priority=\"primary\"\n                aria-label={t('Complete tour')}\n              >\n                {doneText}\n              </Button>\n            )}\n          </TourButtonBar>\n          <StepCounter>{t('%s of %s', current + 1, steps.length)}</StepCounter>\n        </TourContent>\n      </Body>\n    );\n  }\n}\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  top: -${space(2)};\n  right: -${space(1)};\n`;\n\nconst TourContent = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: ${space(3)} ${space(4)} ${space(1)} ${space(4)};\n`;\n\nconst TourHeader = styled('h4')`\n  margin-bottom: ${space(1)};\n`;\n\nconst TourButtonBar = styled(ButtonBar)`\n  margin-bottom: ${space(3)};\n`;\n\nconst StepCounter = styled('div')`\n  text-transform: uppercase;\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: bold;\n  color: ${p => p.theme.gray300};\n`;\n\n// Styled components that can be used to build tour content.\nexport const TourText = styled('p')`\n  text-align: center;\n  margin-bottom: ${space(4)};\n`;\n\nexport const TourImage = styled('img')`\n  height: 200px;\n  margin-bottom: ${space(4)};\n\n  /** override styles in less files */\n  max-width: 380px !important;\n  box-shadow: none !important;\n  border: 0 !important;\n  border-radius: 0 !important;\n`;\n"],"names":["defaultProps","doneText","t","FeatureTourModal","Component","openedAt","current","duration","this","setState","props","onAdvance","Date","now","modalProps","steps","handleAdvance","state","doneUrl","openModal","deps","ModalContents","onClose","handleClose","onCloseModal","render","children","Fragment","showModal","handleShow","prevState","Body","closeModal","step","undefined","length","hasNext","CloseButton","borderless","size","onClick","icon","TourContent","image","TourHeader","title","body","TourButtonBar","gap","actions","priority","external","href","StepCounter","Button","space","ButtonBar","p","theme","fontSizeSmall","gray300","TourText","TourImage"],"sourceRoot":""}