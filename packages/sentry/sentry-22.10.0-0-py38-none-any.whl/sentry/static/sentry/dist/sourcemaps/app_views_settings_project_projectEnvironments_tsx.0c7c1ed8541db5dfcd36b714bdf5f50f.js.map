{"version":3,"file":"chunks/app_views_settings_project_projectEnvironments_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectEnvironments.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    /**\n     * The class to apply when the link is 'active'\n     */\n    activeClassName?: string;\n    disabled?: boolean;\n    index?: boolean;\n    /**\n     * Should be should be supplied by the parent component\n     */\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n    query?: string;\n  };\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  router,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const queryData = query ? qs.parse(query) : undefined;\n  const target: LocationDescriptor =\n    typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {Environment} from 'sentry/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import {PlainRoute} from 'react-router';\nimport {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: PlainRoute[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {ALL_ENVIRONMENTS_KEY} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Environment, Project} from 'sentry/types';\nimport {getDisplayName, getUrlRoutingName} from 'sentry/utils/environment';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withApi from 'sentry/utils/withApi';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = {\n  api: Client;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  environments: null | Environment[];\n  isLoading: boolean;\n  project: null | Project;\n};\n\nclass ProjectEnvironments extends Component<Props, State> {\n  state: State = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env: Environment, shouldHide: boolean) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n          displayName: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs: Environment[]) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments?.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} projectSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype RowProps = {\n  environment: Environment;\n  name: string;\n  actionText?: string;\n  isHidden?: boolean;\n  isSystemRow?: boolean;\n  onHide?: (env: Environment, isHidden: boolean) => void;\n  shouldShowAction?: boolean;\n};\n\nfunction EnvironmentRow({\n  environment,\n  name,\n  onHide,\n  shouldShowAction = false,\n  isSystemRow = false,\n  isHidden = false,\n  actionText = '',\n}: RowProps) {\n  return (\n    <EnvironmentItem>\n      <Name>{isSystemRow ? t('All Environments') : name}</Name>\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Fragment>\n            {shouldShowAction && onHide && (\n              <EnvironmentButton\n                size=\"xs\"\n                disabled={!hasAccess}\n                onClick={() => onHide(environment, !isHidden)}\n              >\n                {actionText}\n              </EnvironmentButton>\n            )}\n          </Fragment>\n        )}\n      </Access>\n    </EnvironmentItem>\n  );\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"names":["ListLink","children","className","isActive","query","router","to","activeClassName","index","disabled","props","queryData","qs","undefined","target","pathname","active","StyledLi","classNames","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","getUrlRoutingName","env","name","encodeURIComponent","displayName","getDisplayName","recreateRoute","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","PermissionAlert","access","hasAccess","type","t","ProjectEnvironments","Component","project","environments","isLoading","shouldHide","orgId","projectId","this","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","componentDidMount","componentDidUpdate","prevProps","endsWith","state","setState","visibility","fetchProjectDetails","renderEmpty","message","renderAllEnvironmentsSystemRow","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","renderEnvironmentList","envs","buttonText","Fragment","onHide","toggleEnv","actionText","shouldShowAction","renderBody","length","render","baseUrl","title","projectSlug","tabs","underlined","EnvironmentItem","Name","EnvironmentButton","size","onClick","PanelItem","Button","space","withApi"],"sourceRoot":""}