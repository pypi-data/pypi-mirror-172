{"version":3,"file":"chunks/app_views_settings_organizationAuditLog_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/activity/item/avatar.tsx","webpack:///./app/views/settings/organizationAuditLog/auditLogList.tsx","webpack:///./app/views/settings/organizationAuditLog/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconSentry} from 'sentry/icons';\nimport {AvatarUser} from 'sentry/types';\n\ntype Props = {\n  type: 'system' | 'user';\n  className?: string;\n  size?: number;\n  user?: AvatarUser;\n};\n\nfunction ActivityAvatar({className, type, user, size = 38}: Props) {\n  if (user) {\n    return <UserAvatar user={user} size={size} className={className} />;\n  }\n\n  if (type === 'system') {\n    // Return Sentry avatar\n    return (\n      <SystemAvatar className={className} size={size}>\n        <StyledIconSentry size=\"md\" />\n      </SystemAvatar>\n    );\n  }\n\n  return (\n    <Placeholder\n      className={className}\n      width={`${size}px`}\n      height={`${size}px`}\n      shape=\"circle\"\n    />\n  );\n}\n\nexport default ActivityAvatar;\n\ntype SystemAvatarProps = {\n  size: number;\n};\n\nconst SystemAvatar = styled('span')<SystemAvatarProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  background-color: ${p => p.theme.textColor};\n  color: ${p => p.theme.background};\n  border-radius: 50%;\n`;\n\nconst StyledIconSentry = styled(IconSentry)`\n  padding-bottom: 3px;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport ActivityAvatar from 'sentry/components/activity/item/avatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DateTime from 'sentry/components/dateTime';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport Link from 'sentry/components/links/link';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AuditLog, Organization, User} from 'sentry/types';\nimport {shouldUse24Hours} from 'sentry/utils/dates';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nconst avatarStyle = {\n  width: 36,\n  height: 36,\n  marginRight: 8,\n};\n\nconst getAvatarDisplay = (logEntryUser: User | undefined) => {\n  // Display Sentry's avatar for system or superuser-initiated events\n  if (\n    logEntryUser?.isSuperuser ||\n    (logEntryUser?.name === 'Sentry' && logEntryUser?.email === undefined)\n  ) {\n    return <SentryAvatar type=\"system\" size={36} />;\n  }\n  // Display user's avatar for non-superusers-initiated events\n  if (logEntryUser !== undefined) {\n    return <UserAvatar style={avatarStyle} user={logEntryUser} />;\n  }\n  return null;\n};\n\nconst addUsernameDisplay = (logEntryUser: User | undefined) => {\n  if (logEntryUser?.isSuperuser) {\n    return (\n      <Name data-test-id=\"actor-name\">\n        {logEntryUser.name}\n        <StaffTag>{t('Sentry Staff')}</StaffTag>\n      </Name>\n    );\n  }\n  if (logEntryUser !== undefined) {\n    return <Name data-test-id=\"actor-name\">{logEntryUser.name}</Name>;\n  }\n  return null;\n};\n\nfunction AuditNote({entry, orgSlug}: {entry: AuditLog; orgSlug: Organization['slug']}) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === String(entry.data.id));\n\n  if (!project) {\n    return <Note>{entry.note}</Note>;\n  }\n\n  const projectSlug = (\n    <Link to={`/settings/${orgSlug}/projects/${project.slug}/`}>{entry.data.slug}</Link>\n  );\n\n  if (entry.event === 'project.create') {\n    return (\n      <Note>\n        {tct('Created project [project-slug]', {['project-slug']: projectSlug})}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'project.edit') {\n    if (entry.data.old_slug && entry.data.new_slug) {\n      return (\n        <Note>\n          {tct('Renamed project slug from [old-slug] to [new-slug]', {\n            'old-slug': entry.data.old_slug,\n            'new-slug': (\n              <Link to={`/settings/${orgSlug}/projects/${entry.data.new_slug}/`}>\n                {entry.data.new_slug}\n              </Link>\n            ),\n          })}\n        </Note>\n      );\n    }\n\n    return (\n      <Note>\n        {tct('Edited project [project-slug] [note]', {\n          ['project-slug']: projectSlug,\n          note: entry.note.replace('edited project settings ', ''),\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'sampling.add') {\n    return (\n      <Note>\n        {tct('Added server-side sampling rule in the project [project-slug]', {\n          ['project-slug']: projectSlug,\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'sampling.remove') {\n    return (\n      <Note>\n        {tct('Deleted server-side sampling rule in the project [project-slug]', {\n          ['project-slug']: projectSlug,\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'sampling.edit') {\n    return (\n      <Note>\n        {tct('Edited server-side sampling rule in the project [project-slug]', {\n          ['project-slug']: projectSlug,\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'sampling.activate') {\n    return (\n      <Note>\n        {tct('Enabled server-side sampling rule in the project [project-slug]', {\n          ['project-slug']: projectSlug,\n        })}\n      </Note>\n    );\n  }\n\n  if (entry.event === 'sampling.deactivate') {\n    return (\n      <Note>\n        {tct('Disabled server-side sampling rule in the project [project-slug]', {\n          ['project-slug']: projectSlug,\n        })}\n      </Note>\n    );\n  }\n\n  return <Note>{entry.note}</Note>;\n}\n\ntype Props = {\n  entries: AuditLog[] | null;\n  eventType: string | undefined;\n  eventTypes: string[] | null;\n  isLoading: boolean;\n  onCursor: CursorHandler | undefined;\n  onEventSelect: (value: string) => void;\n  pageLinks: string | null;\n};\n\nconst AuditLogList = ({\n  isLoading,\n  pageLinks,\n  entries,\n  eventType,\n  eventTypes,\n  onCursor,\n  onEventSelect,\n}: Props) => {\n  const is24Hours = shouldUse24Hours();\n  const organization = useOrganization();\n  const hasEntries = entries && entries.length > 0;\n  const ipv4Length = 15;\n\n  const eventOptions = eventTypes?.map(type => ({\n    label: type,\n    value: type,\n  }));\n\n  const action = (\n    <EventSelector\n      clearable\n      isDisabled={isLoading}\n      name=\"eventFilter\"\n      value={eventType}\n      placeholder={t('Select Action: ')}\n      options={eventOptions}\n      onChange={options => {\n        onEventSelect(options?.value);\n      }}\n    />\n  );\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Audit Log')} action={action} />\n      <PanelTable\n        headers={[t('Member'), t('Action'), t('IP'), t('Time')]}\n        isEmpty={!hasEntries && entries?.length === 0}\n        emptyMessage={t('No audit entries available')}\n        isLoading={isLoading}\n      >\n        {entries?.map(entry => {\n          return (\n            <Fragment key={entry.id}>\n              <UserInfo>\n                <div>{getAvatarDisplay(entry.actor)}</div>\n                <NameContainer>\n                  {addUsernameDisplay(entry.actor)}\n                  <AuditNote entry={entry} orgSlug={organization.slug} />\n                </NameContainer>\n              </UserInfo>\n              <FlexCenter>\n                <MonoDetail>{entry.event}</MonoDetail>\n              </FlexCenter>\n              <FlexCenter>\n                {entry.ipAddress && (\n                  <IpAddressOverflow>\n                    <Tooltip\n                      title={entry.ipAddress}\n                      disabled={entry.ipAddress.length <= ipv4Length}\n                    >\n                      <MonoDetail>{entry.ipAddress}</MonoDetail>\n                    </Tooltip>\n                  </IpAddressOverflow>\n                )}\n              </FlexCenter>\n              <TimestampInfo>\n                <DateTime dateOnly date={entry.dateCreated} />\n                <DateTime\n                  timeOnly\n                  format={is24Hours ? 'HH:mm zz' : 'LT zz'}\n                  date={entry.dateCreated}\n                />\n              </TimestampInfo>\n            </Fragment>\n          );\n        })}\n      </PanelTable>\n      {pageLinks && <Pagination pageLinks={pageLinks} onCursor={onCursor} />}\n    </div>\n  );\n};\n\nconst SentryAvatar = styled(ActivityAvatar)`\n  margin-right: ${space(1)};\n`;\n\nconst Name = styled('strong')`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StaffTag = styled(Tag)`\n  padding: ${space(1)};\n`;\n\nconst EventSelector = styled(SelectControl)`\n  width: 250px;\n`;\n\nconst UserInfo = styled('div')`\n  display: flex;\n  align-items: center;\n  line-height: 1.2;\n  font-size: ${p => p.theme.fontSizeSmall};\n  min-width: 250px;\n`;\n\nconst NameContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst Note = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  word-break: break-word;\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IpAddressOverflow = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  min-width: 90px;\n`;\n\nconst MonoDetail = styled('code')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: no-wrap;\n`;\n\nconst TimestampInfo = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto;\n  gap: ${space(1)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default AuditLogList;\n","import {Fragment, useCallback, useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {CursorHandler} from 'sentry/components/pagination';\nimport {AuditLog} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport AuditLogList from './auditLogList';\n\ntype Props = {\n  location: Location;\n};\n\ntype State = {\n  entryList: AuditLog[] | null;\n  entryListPageLinks: string | null;\n  eventType: string | undefined;\n  eventTypes: string[] | null;\n  isLoading: boolean;\n  currentCursor?: string;\n};\n\nfunction OrganizationAuditLog({location}: Props) {\n  const [state, setState] = useState<State>({\n    entryList: [],\n    entryListPageLinks: null,\n    eventType: decodeScalar(location.query.event),\n    eventTypes: [],\n    isLoading: true,\n  });\n  const organization = useOrganization();\n  const api = useApi();\n\n  const handleCursor: CursorHandler = resultsCursor => {\n    setState(prevState => ({\n      ...prevState,\n      currentCursor: resultsCursor,\n    }));\n  };\n\n  useEffect(() => {\n    // Watch the location for changes so we can re-fetch data.\n    const eventType = decodeScalar(location.query.event);\n    setState(prevState => ({...prevState, eventType}));\n  }, [location.query]);\n\n  const fetchAuditLogData = useCallback(async () => {\n    setState(prevState => ({...prevState, isLoading: true}));\n\n    try {\n      const payload = {cursor: state.currentCursor, event: state.eventType};\n      if (!payload.cursor) {\n        delete payload.cursor;\n      }\n      if (!payload.event) {\n        delete payload.event;\n      }\n      setState(prevState => ({...prevState, isLoading: true}));\n      const [data, _, response] = await api.requestPromise(\n        `/organizations/${organization.slug}/audit-logs/`,\n        {\n          method: 'GET',\n          includeAllArgs: true,\n          query: payload,\n        }\n      );\n      setState(prevState => ({\n        ...prevState,\n        entryList: data.rows,\n        eventTypes: data.options.sort(),\n        isLoading: false,\n        entryListPageLinks: response?.getResponseHeader('Link') ?? null,\n      }));\n    } catch (err) {\n      if (err.status !== 401 && err.status !== 403) {\n        Sentry.captureException(err);\n      }\n      setState(prevState => ({\n        ...prevState,\n        isLoading: false,\n      }));\n      addErrorMessage('Unable to load audit logs.');\n    }\n  }, [api, organization.slug, state.currentCursor, state.eventType]);\n\n  useEffect(() => {\n    fetchAuditLogData();\n  }, [fetchAuditLogData]);\n\n  const handleEventSelect = (value: string) => {\n    setState(prevState => ({\n      ...prevState,\n      eventType: value,\n    }));\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {...location.query, event: value},\n    });\n  };\n\n  return (\n    <Fragment>\n      <AuditLogList\n        entries={state.entryList}\n        pageLinks={state.entryListPageLinks}\n        eventType={state.eventType}\n        eventTypes={state.eventTypes}\n        onEventSelect={handleEventSelect}\n        isLoading={state.isLoading}\n        onCursor={handleCursor}\n      />\n    </Fragment>\n  );\n}\n\nexport default OrganizationAuditLog;\n"],"names":["ActivityAvatar","className","type","user","size","SystemAvatar","StyledIconSentry","width","height","shape","p","theme","textColor","background","IconSentry","avatarStyle","marginRight","addUsernameDisplay","logEntryUser","isSuperuser","Name","name","StaffTag","t","undefined","AuditNote","entry","orgSlug","projects","useProjects","project","find","id","String","data","Note","note","projectSlug","to","slug","event","tct","old_slug","new_slug","replace","AuditLogList","isLoading","pageLinks","entries","eventType","eventTypes","onCursor","onEventSelect","is24Hours","shouldUse24Hours","organization","useOrganization","hasEntries","length","eventOptions","map","label","value","action","EventSelector","clearable","isDisabled","placeholder","options","onChange","title","headers","isEmpty","emptyMessage","Fragment","UserInfo","actor","email","SentryAvatar","style","NameContainer","FlexCenter","MonoDetail","ipAddress","IpAddressOverflow","disabled","TimestampInfo","dateOnly","date","dateCreated","timeOnly","format","space","fontSizeMedium","Tag","SelectControl","fontSizeSmall","overflowEllipsis","OrganizationAuditLog","location","state","setState","useState","entryList","entryListPageLinks","decodeScalar","query","api","useApi","useEffect","prevState","fetchAuditLogData","useCallback","async","payload","cursor","currentCursor","_","response","requestPromise","method","includeAllArgs","rows","sort","getResponseHeader","err","status","Sentry","addErrorMessage","browserHistory","pathname","resultsCursor"],"sourceRoot":""}