# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from contek_viper.execution import aggregated_trading_service_pb2 as contek__viper_dot_execution_dot_aggregated__trading__service__pb2


class AggregatedTradingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PlaceOrders = channel.unary_unary(
                '/contek_viper.exchange.AggregatedTradingService/PlaceOrders',
                request_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.PlaceOrdersRequest.SerializeToString,
                response_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.PlaceOrdersResponse.FromString,
                )
        self.CancelOrders = channel.unary_unary(
                '/contek_viper.exchange.AggregatedTradingService/CancelOrders',
                request_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.CancelOrdersRequest.SerializeToString,
                response_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.CancelOrdersResponse.FromString,
                )
        self.GetOpenOrders = channel.unary_unary(
                '/contek_viper.exchange.AggregatedTradingService/GetOpenOrders',
                request_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.GetOpenOrdersRequest.SerializeToString,
                response_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.GetOpenOrdersResponse.FromString,
                )
        self.SubscribeUpdateEvents = channel.unary_stream(
                '/contek_viper.exchange.AggregatedTradingService/SubscribeUpdateEvents',
                request_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.SubscribeUpdateEventsRequest.SerializeToString,
                response_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.UpdateEvent.FromString,
                )
        self.SubscribeTargetEvents = channel.unary_stream(
                '/contek_viper.exchange.AggregatedTradingService/SubscribeTargetEvents',
                request_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.SubscribeTargetEventsRequest.SerializeToString,
                response_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.TargetEvent.FromString,
                )


class AggregatedTradingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PlaceOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOpenOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeUpdateEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTargetEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregatedTradingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PlaceOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceOrders,
                    request_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.PlaceOrdersRequest.FromString,
                    response_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.PlaceOrdersResponse.SerializeToString,
            ),
            'CancelOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrders,
                    request_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.CancelOrdersRequest.FromString,
                    response_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.CancelOrdersResponse.SerializeToString,
            ),
            'GetOpenOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOpenOrders,
                    request_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.GetOpenOrdersRequest.FromString,
                    response_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.GetOpenOrdersResponse.SerializeToString,
            ),
            'SubscribeUpdateEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeUpdateEvents,
                    request_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.SubscribeUpdateEventsRequest.FromString,
                    response_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.UpdateEvent.SerializeToString,
            ),
            'SubscribeTargetEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTargetEvents,
                    request_deserializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.SubscribeTargetEventsRequest.FromString,
                    response_serializer=contek__viper_dot_execution_dot_aggregated__trading__service__pb2.TargetEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'contek_viper.exchange.AggregatedTradingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AggregatedTradingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PlaceOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/contek_viper.exchange.AggregatedTradingService/PlaceOrders',
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.PlaceOrdersRequest.SerializeToString,
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.PlaceOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/contek_viper.exchange.AggregatedTradingService/CancelOrders',
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.CancelOrdersRequest.SerializeToString,
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.CancelOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOpenOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/contek_viper.exchange.AggregatedTradingService/GetOpenOrders',
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.GetOpenOrdersRequest.SerializeToString,
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.GetOpenOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeUpdateEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/contek_viper.exchange.AggregatedTradingService/SubscribeUpdateEvents',
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.SubscribeUpdateEventsRequest.SerializeToString,
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.UpdateEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeTargetEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/contek_viper.exchange.AggregatedTradingService/SubscribeTargetEvents',
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.SubscribeTargetEventsRequest.SerializeToString,
            contek__viper_dot_execution_dot_aggregated__trading__service__pb2.TargetEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
