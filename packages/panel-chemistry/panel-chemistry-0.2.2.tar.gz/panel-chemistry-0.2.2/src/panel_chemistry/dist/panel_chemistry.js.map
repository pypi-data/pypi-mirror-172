{"version":3,"sources":["@@/src/panel_chemistry/dist/lib/index.js","@@/src/panel_chemistry/dist/lib/bokeh_extensions/index.js","@@/src/panel_chemistry/dist/lib/bokeh_extensions/jsme_editor.js","@@/src/panel_chemistry/dist/lib/bokeh_extensions/ngl_viewer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjfile":"generated.js","sourceRoot":"","sourcesContent":["/* index.js */ function _(require, module, exports, __esModule, __esExport) {\n    __esModule();\n    const tslib_1 = require(\"tslib\");\n    const PanelChemistryExtensions = (0, tslib_1.__importStar)(require(\"86de82b1ae\") /* ./bokeh_extensions/ */);\n    exports.PanelChemistryExtensions = PanelChemistryExtensions;\n    const base_1 = require(\"@bokehjs/base\");\n    (0, base_1.register_models)(PanelChemistryExtensions);\n}\n","/* bokeh_extensions/index.js */ function _(require, module, exports, __esModule, __esExport) {\n    __esModule();\n    var jsme_editor_1 = require(\"62a5ef401e\") /* ./jsme_editor */;\n    __esExport(\"JSMEEditor\", jsme_editor_1.JSMEEditor);\n    var ngl_viewer_1 = require(\"19eceeedfd\") /* ./ngl_viewer */;\n    __esExport(\"NGLViewer\", ngl_viewer_1.NGLViewer);\n}\n","/* bokeh_extensions/jsme_editor.js */ function _(require, module, exports, __esModule, __esExport) {\n    __esModule();\n    // See https://docs.bokeh.org/en/latest/docs/reference/models/layouts.html\n    const html_box_1 = require(\"@bokehjs/models/layouts/html_box\");\n    const dom_1 = require(\"@bokehjs/core/dom\");\n    function uuidv4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n    const notSubscribed = \"Not Subscribed\";\n    function readSDFValue(jsmeElement) {\n        var data = jsmeElement.getMultiSDFstack();\n        var output = \"No multirecords SDF was pasted into the editor \";\n        if (data.length > 0) {\n            output = data.join(\"$$$$\\n\") + \"$$$$\\n\";\n        }\n        return output;\n    }\n    function setModelValue(model, jsmeElement) {\n        console.log(\"setValue - start\", model.value);\n        var value = model.value;\n        if (model.format === \"smiles\") {\n            console.log(\"getting smiles\");\n            value = jsmeElement.smiles();\n            console.log(\"got smiles\");\n        }\n        else if (model.format === \"mol\") {\n            value = jsmeElement.molFile(false);\n        }\n        else if (model.format === \"mol3000\") {\n            value = jsmeElement.molFile(true);\n        }\n        else if (model.format === \"sdf\") {\n            value = readSDFValue(jsmeElement);\n        }\n        else {\n            value = jsmeElement.jmeFile();\n        }\n        if (model.value !== value && value !== null) {\n            console.log(\"setting value\", value);\n            model.value = value;\n        }\n        console.log(\"setValue - end\", model.value);\n    }\n    function setModelValues(model, jsmeElement) {\n        console.log(\"setValues - start\");\n        setModelValue(model, jsmeElement);\n        setOtherModelValues(model, jsmeElement);\n        console.log(\"setValues - end\");\n    }\n    function resetOtherModelValues(model, jsmeElement) {\n        if (!model.subscriptions.includes(\"jme\")) {\n            model.jme = notSubscribed;\n        }\n        if (!model.subscriptions.includes(\"smiles\")) {\n            model.smiles = notSubscribed;\n        }\n        if (!model.subscriptions.includes(\"mol\")) {\n            model.mol = notSubscribed;\n        }\n        if (!model.subscriptions.includes(\"mol3000\")) {\n            model.mol3000 = notSubscribed;\n        }\n        if (!model.subscriptions.includes(\"sdf\")) {\n            model.sdf = notSubscribed;\n        }\n        setModelValues(model, jsmeElement);\n    }\n    function cleanValue(value) {\n        if (value === null) {\n            return \"null\";\n        }\n        else {\n            return value;\n        }\n    }\n    function setOtherModelValues(model, jsmeElement) {\n        console.log(\"setOtherValues - start\");\n        if (model.subscriptions.includes(\"jme\")) {\n            model.jme = cleanValue(jsmeElement.jmeFile());\n        }\n        if (model.subscriptions.includes(\"smiles\")) {\n            model.smiles = cleanValue(jsmeElement.smiles());\n        }\n        if (model.subscriptions.includes(\"mol\")) {\n            model.mol = cleanValue(jsmeElement.molFile(false));\n        }\n        if (model.subscriptions.includes(\"mol3000\")) {\n            model.mol3000 = cleanValue(jsmeElement.molFile(true));\n        }\n        if (model.subscriptions.includes(\"sdf\")) {\n            model.sdf = cleanValue(readSDFValue(jsmeElement));\n        }\n        console.log(\"setOtherValues - end\");\n    }\n    // The view of the Bokeh extension/ HTML element\n    // Here you can define how to render the model as well as react to model changes or View events.\n    class JSMEEditorView extends html_box_1.HTMLBoxView {\n        constructor() {\n            super(...arguments);\n            this.JSME = window.JSApplet.JSME;\n            this.valueChanging = true;\n        }\n        connect_signals() {\n            super.connect_signals();\n            this.connect(this.model.properties.value.change, () => {\n                console.log(\"value change\", this.model.value);\n                if (!this.valueChanging) {\n                    if (this.model.value === \"\") {\n                        this.jsmeElement.reset();\n                    }\n                    else {\n                        this.jsmeElement.readGenericMolecularInput(this.model.value);\n                    }\n                }\n            });\n            this.connect(this.model.properties.format.change, () => {\n                console.log(\"format change\", this.model.format);\n                setModelValue(this.model, this.jsmeElement);\n            });\n            this.connect(this.model.properties.subscriptions.change, () => {\n                console.log(\"subscriptions change\", this.model.subscriptions);\n                resetOtherModelValues(this.model, this.jsmeElement);\n            });\n            this.connect(this.model.properties.options.change, () => {\n                console.log(\"options change\", this.model.options);\n                this.setJSMEOptions();\n            });\n            this.connect(this.model.properties.guicolor.change, () => {\n                console.log(\"options change\", this.model.options);\n                this.setGUIColor();\n            });\n        }\n        render() {\n            console.log(\"render - start\");\n            super.render();\n            const id = \"jsme-\" + uuidv4();\n            const container = (0, dom_1.div)({ class: \"jsme-editor\", id: id });\n            this.el.appendChild(container);\n            this.jsmeElement = new this.JSME(id, this.getHeight(), this.getWidth(), {\n                \"options\": this.model.options.join(\",\"),\n                \"guicolor\": this.model.guicolor\n            });\n            this.jsmeElement.readGenericMolecularInput(this.model.value);\n            resetOtherModelValues(this.model, this.jsmeElement);\n            setModelValues(this.model, this.jsmeElement);\n            const this_ = this;\n            function showEvent(event) {\n                console.log(\"event\", event);\n                this_.valueChanging = true;\n                setModelValues(this_.model, this_.jsmeElement);\n                this_.valueChanging = false;\n            }\n            this.jsmeElement.setAfterStructureModifiedCallback(showEvent);\n            console.log(\"render - end\");\n        }\n        setGUIColor() {\n            console.log(\"setGUIColor\", this.model.guicolor);\n            this.jsmeElement.setUserInterfaceBackgroundColor(this.model.guicolor);\n        }\n        setJSMEOptions() {\n            const options = this.model.options.join(\",\");\n            console.log(\"setJSMEOptions\", options);\n            this.jsmeElement.options(options);\n        }\n        getHeight() {\n            if ((this.model.sizing_mode === \"stretch_height\" || this.model.sizing_mode === \"stretch_both\") && this.el.style.height) {\n                return this.el.style.height;\n            }\n            else if (this.model.height) {\n                return this.model.height.toString() + \"px\";\n            }\n            else {\n                return \"100px\";\n            }\n        }\n        getWidth() {\n            if ((this.model.sizing_mode === \"stretch_width\" || this.model.sizing_mode === \"stretch_both\") && this.el.style.width) {\n                return this.el.style.width;\n            }\n            else if (this.model.width) {\n                return this.model.width.toString() + \"px\";\n            }\n            else {\n                return \"100px\";\n            }\n        }\n        resizeJSMEElement() {\n            this.jsmeElement.setSize(this.getWidth(), this.getHeight());\n        }\n        after_layout() {\n            super.after_layout();\n            this.resizeJSMEElement();\n        }\n    }\n    exports.JSMEEditorView = JSMEEditorView;\n    JSMEEditorView.__name__ = \"JSMEEditorView\";\n    // The Bokeh .ts model corresponding to the Bokeh .py model\n    class JSMEEditor extends html_box_1.HTMLBox {\n        constructor(attrs) {\n            super(attrs);\n        }\n        static init_JSMEEditor() {\n            this.prototype.default_view = JSMEEditorView;\n            this.define(({ String, Array }) => ({\n                value: [String, \"\"],\n                format: [String, \"\"],\n                options: [Array(String), []],\n                jme: [String, \"\"],\n                smiles: [String, \"\"],\n                mol: [String, \"\"],\n                mol3000: [String, \"\"],\n                sdf: [String, \"\"],\n                subscriptions: [Array(String), []],\n                guicolor: [String, \"#c0c0c0\"],\n            }));\n        }\n    }\n    exports.JSMEEditor = JSMEEditor;\n    JSMEEditor.__name__ = \"JSMEEditor\";\n    JSMEEditor.__module__ = \"panel_chemistry.bokeh_extensions.jsme_editor\";\n    JSMEEditor.init_JSMEEditor();\n}\n","/* bokeh_extensions/ngl_viewer.js */ function _(require, module, exports, __esModule, __esExport) {\n    __esModule();\n    const html_box_1 = require(\"@bokehjs/models/layouts/html_box\");\n    class NGLViewerView extends html_box_1.HTMLBoxView {\n        connect_signals() {\n            super.connect_signals();\n            this.connect(this.model.properties.object.change, this.updateStage);\n            this.connect(this.model.properties.extension.change, this.updateStage);\n            this.connect(this.model.properties.representation.change, this.updateStage);\n            this.connect(this.model.properties.color_scheme.change, this.updateParameters);\n            this.connect(this.model.properties.custom_color_scheme.change, this.updateParameters);\n            this.connect(this.model.properties.effect.change, this.updateEffect);\n            this.connect(this.model.properties.background.change, this.setBackgroundcolor);\n        }\n        render() {\n            super.render();\n            this.el.id = \"viewport\";\n            const wn = window;\n            const ngl = wn.NGL;\n            this._stage = new ngl.Stage(this.el);\n            this.setBackgroundcolor();\n            const stage = this._stage;\n            this.updateStage();\n            window.addEventListener(\"resize\", function () {\n                stage.handleResize();\n            }, false);\n        }\n        setBackgroundcolor() {\n            console.log(this.model.background);\n            this._stage.setParameters({ backgroundColor: this.model.background });\n        }\n        after_layout() {\n            super.after_layout();\n            this._stage.handleResize();\n        }\n        updateEffect() {\n            if (this.model.effect === \"spin\") {\n                this._stage.setSpin(true);\n            }\n            else if (this.model.effect === \"rock\") {\n                this._stage.setRock(true);\n            }\n            else {\n                this._stage.setSpin(false);\n                this._stage.setRock(false);\n            }\n        }\n        getParameters() {\n            if (this.model.color_scheme === \"custom\") {\n                var list = this.model.custom_color_scheme;\n                var scheme = NGL.ColormakerRegistry.addSelectionScheme(list, \"new scheme\");\n                return { color: scheme };\n            }\n            else {\n                return { colorScheme: this.model.color_scheme };\n            }\n        }\n        updateParameters() {\n            const parameters = this.getParameters();\n            try {\n                this._stage.compList[0].reprList[0].setParameters(parameters);\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n        updateStage() {\n            const model = this.model;\n            this._stage.removeAllComponents();\n            if (model.object === \"\") {\n                return;\n            }\n            const parameters = this.getParameters();\n            function finish(o) {\n                o.addRepresentation(model.representation, parameters);\n                o.autoView();\n            }\n            if (model.extension !== \"\") {\n                this._stage.loadFile(new Blob([model.object], { type: 'text/plain' }), { ext: model.extension }).then(finish);\n            }\n            else if (model.object.includes(\"://\")) {\n                this._stage.loadFile(model.object).then(finish);\n            }\n            else {\n                this._stage.loadFile(\"rcsb://\" + model.object).then(finish);\n            }\n            // this.updateColor()\n            this.updateEffect();\n        }\n    }\n    exports.NGLViewerView = NGLViewerView;\n    NGLViewerView.__name__ = \"NGLViewerView\";\n    class NGLViewer extends html_box_1.HTMLBox {\n        constructor(attrs) {\n            super(attrs);\n        }\n        static init_NGLViewer() {\n            this.prototype.default_view = NGLViewerView;\n            this.define(({ String, Any }) => ({\n                object: [String, \"\"],\n                extension: [String, \"\"],\n                representation: [String, \"ribbon\"],\n                color_scheme: [String, \"chainid\"],\n                custom_color_scheme: [Any, \"chainid\"],\n                effect: [String, \"\"],\n            }));\n            this.override({\n                height: 400,\n                width: 600\n            });\n        }\n    }\n    exports.NGLViewer = NGLViewer;\n    NGLViewer.__name__ = \"NGLViewer\";\n    NGLViewer.__module__ = \"panel_chemistry.bokeh_extensions.ngl_viewer\";\n    NGLViewer.init_NGLViewer();\n}\n"]}