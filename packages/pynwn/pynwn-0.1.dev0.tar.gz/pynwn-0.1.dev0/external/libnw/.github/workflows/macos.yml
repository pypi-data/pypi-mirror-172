name: macOS
on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"

jobs:
  build:
    env:
      buildDir: "${{ github.workspace }}/build/"
      vcpkg-tag: "2022.03.10"
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg/"
      VCPKG_DEFAULT_BINARY_CACHE: "${{ github.workspace }}/vcpkg/.cache"
      NWN_ROOT: "${{ github.workspace }}/nwn/"
      CI_GITHUB_ACTIONS: "1"

    name: build on macOS
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Install latest CMake.
      - uses: lukka/get-cmake@latest

      - name: install non-vcpkg dependencies
        env:
          HOMEBREW_NO_ANALYTICS: "ON"
          HOMEBREW_NO_AUTO_UPDATE: "ON"
          HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
          HOMEBREW_NO_INSTALL_CLEANUP: "ON"
        run: |
          brew install pkg-config automake ninja libtool

      - name: set ENV variables for clang 13
        run: |
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV

      - name: check clang version
        run: $CC --version

      - name: download vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg ${{ github.workspace }}/vcpkg || true
          pushd vcpkg
          git checkout --force ${{ env.vcpkg-tag }}
          ./bootstrap-vcpkg.sh
          popd

      - name: cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v2
        env:
          cache-name: cache-vcpgk4
        with:
          path: |
            ${{ github.workspace }}/vcpkg/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.vcpkg-tag }}-${{ hashFiles('vcpkg.json') }}

      - name: Make cache dir
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: mkdir "${{ github.workspace }}/vcpkg/.cache"

      - name: cache nwn
        id: cache-nwn
        uses: actions/cache@v2
        env:
          cache-name: cache-nwn
        with:
          path: |
            ${{ github.workspace }}/nwn/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-3e02cddcea5d0ae82111a3038f14aef6c14d05d9

      - name: Download NWN dedicated server
        if: steps.cache-nwn.outputs.cache-hit != 'true'
        run: |
          curl https://nwn.beamdog.net/downloads/nwnee-dedicated-8193.34.zip -O
          unzip nwnee-dedicated-8193.34.zip -d ${{ github.workspace }}/nwn/
          ls -l ${{ github.workspace }}/nwn/

      - name: Configure
        run: |
          cmake --preset macos

      - name: Build
        run: |
          cmake --build --preset default

      - name: Test
        run: |
          ctest --preset default
