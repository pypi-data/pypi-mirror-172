Metadata-Version: 2.1
Name: seaplanekit
Version: 0.1.2
Summary: Seaplane Python SDK
Home-page: https://github.com/seaplane-io/seaplane/tree/main/seaplane-sdk/python
License: Apache License
Author: Seaplane IO, Inc.
Requires-Python: >=3.8,<3.11
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: attrs (==21.4.0)
Requires-Dist: certifi (==2022.6.15)
Requires-Dist: charset-normalizer (==2.1.0)
Requires-Dist: idna (==3.3)
Requires-Dist: iniconfig (==1.1.1)
Requires-Dist: packaging (==21.3)
Requires-Dist: pluggy (==1.0.0)
Requires-Dist: py (==1.11.0)
Requires-Dist: pyparsing (==3.0.9)
Requires-Dist: requests (==2.28.1)
Requires-Dist: requests-mock (>=1.9.3,<2.0.0)
Requires-Dist: returns (>=0.19.0,<0.20.0)
Requires-Dist: simplejson (>=3.17.6,<4.0.0)
Requires-Dist: tomli (==2.0.1)
Requires-Dist: types-requests (>=2.28.0,<3.0.0)
Requires-Dist: types-simplejson (>=3.17.7,<4.0.0)
Requires-Dist: urllib3 (==1.26.9)
Project-URL: Documentation, https://github.com/seaplane-io/seaplane/tree/main/seaplane-sdk/python
Project-URL: Repository, https://github.com/seaplane-io/seaplane/tree/main/seaplane-sdk/python
Description-Content-Type: text/markdown

# Seaplane Python SDK

Simple Python library to manage your resources at seaplane.

## What is Seaplane?

Seaplane is the global platform for building and scaling your application stack
without the complexity of managing cloud infrastructure.

It serves as a reference application for how our APIs can be utilized.

Not sure where to go to quickly run a workload on Seaplane? See our [Getting
Started] guide.

### Dependencies

Install dependencies

```
$ poetry install
```

To [activate](https://python-poetry.org/docs/basic-usage#activating-the-virtual-environment) the virtual environment that is automatically created by Poetry:

```
$ poetry shell
```

To deactivate the environment:

```
(seaplane) $ exit
```

To upgrade all dependencies to their latest versions:

```
$ poetry update
```

## Packaging

To package the project as both a source distribution and a wheel:

```
$ poetry build
```

This will generate `dist/fact-1.0.0.tar.gz` and `dist/fact-1.0.0-py3-none-any.whl`.

Source and wheel redistributable packages can be [published to PyPI](https://python-poetry.org/docs/cli#publish) or installed directly from the filesystem using pip.

```
$ poetry publish
```

## Enforcing Code Quality

Automated code quality checks are performed using [Nox](https://nox.thea.codes/en/stable/) and [nox-poetry](https://nox-poetry.readthedocs.io/en/stable/)

To run all default sessions:

> Note: nox is installed into the virtual environment automatically by the poetry install command above. Run poetry shell to activate the virtual environment.

```
(seaplane) $ nox
```

## Testing

To pass arguments to pytest through nox:

```
(seaplane) $ nox -s test -- -k invalid_factorial
```

To run end to end tests you have to set the E2E_API_KEY env var:

```
(seaplane) $ export E2E_API_KEY="sp-your_api_key"
(seaplane) $ nox -s e2e
```

## Code Style Checking

[PEP 8](https://peps.python.org/pep-0008/) is the universally accepted style guide for
Python code. PEP 8 code compliance is verified using [Flake8](http://flake8.pycqa.org/). Flake8 is
configured in the `[tool.flake8]` section of `pyproject.toml`. Extra Flake8 plugins are also
included:

- `flake8-bugbear`: Find likely bugs and design problems in your program.
- `flake8-broken-line`: Forbid using backslashes (`\`) for line breaks.
- `flake8-comprehensions`: Helps write better `list`/`set`/`dict` comprehensions.
- `pep8-naming`: Ensure functions, classes, and variables are named with correct casing.
- `pyproject-flake8`: Allow configuration of `flake8` through `pyproject.toml`.

To lint code, run:

```bash
(seaplane) $ nox -s lint
```

## Automated Code Formatting

Code is automatically formatted using [black](https://github.com/psf/black). Imports are
automatically sorted and grouped using [isort](https://github.com/PyCQA/isort/).

These tools are configured by:

- [`pyproject.toml`](./pyproject.toml)

To automatically format code, run:

```bash
(fact) $ nox -s fmt
```

To verify code has been formatted, such as in a CI job:

```bash
(fact) $ nox -s fmt_check
```

## Type Checking

[Type annotations](https://docs.python.org/3/library/typing.html) allows developers to include
optional static typing information to Python source code. This allows static analyzers such
as [mypy](http://mypy-lang.org/), [PyCharm](https://www.jetbrains.com/pycharm/),
or [Pyright](https://github.com/microsoft/pyright) to check that functions are used with the correct types before runtime.

mypy is configured in [`pyproject.toml`](./pyproject.toml). To type check code, run:

```bash
(fact) $ nox -s type_check
```
See also [awesome-python-typing](https://github.com/typeddjango/awesome-python-typing).


## Configure your API KEY

* Set `SEAPLANE_API_KEY` environment variable.
* Use `config` object in order to set the api key.

```python
from seaplanekit import sea

sea.config.set_api_key("your_api_key")
```

## License

Licensed under the Apache License, Version 2.0, [LICENSE](LICENSE). Copyright 2022 Seaplane IO, Inc.

[//]: # (Links)

[Seaplane]: https://seaplane.io/
[CLI]: https://github.com/seaplane-io/seaplane/tree/main/seaplane-cli
[SDK]: https://github.com/seaplane-io/seaplane/tree/main/seaplane
[Getting Started]: https://github.com/seaplane-io/seaplane/blob/main/docs/GETTING_STARTED.md

