# Generated from eva/parser/evaql/evaql_parser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,176,1174,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,1,0,3,0,216,8,0,1,0,3,0,219,
        8,0,1,0,1,0,1,1,1,1,3,1,225,8,1,1,1,1,1,1,1,5,1,230,8,1,10,1,12,
        1,233,9,1,1,1,1,1,3,1,237,8,1,1,1,3,1,240,8,1,1,1,3,1,243,8,1,1,
        2,1,2,1,2,3,2,248,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,3,4,262,8,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,270,8,5,1,6,1,6,1,
        6,3,6,275,8,6,1,7,1,7,1,7,3,7,280,8,7,1,7,1,7,1,8,1,8,1,8,1,8,3,
        8,288,8,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,297,8,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,3,11,311,8,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,3,
        12,327,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
        14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,350,8,
        17,10,17,12,17,353,9,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,361,8,
        18,1,19,1,19,5,19,365,8,19,10,19,12,19,368,9,19,1,20,1,20,1,20,1,
        20,3,20,374,8,20,1,20,1,20,1,20,3,20,379,8,20,3,20,381,8,20,1,21,
        1,21,3,21,385,8,21,1,21,3,21,388,8,21,1,21,1,21,1,22,1,22,1,22,3,
        22,395,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
        24,3,24,408,8,24,1,24,1,24,1,25,1,25,1,25,3,25,415,8,25,1,25,1,25,
        1,26,1,26,1,27,1,27,3,27,423,8,27,1,27,1,27,1,27,1,27,1,27,3,27,
        430,8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,440,8,28,1,
        28,5,28,443,8,28,10,28,12,28,446,9,28,1,29,1,29,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,3,30,459,8,30,1,30,1,30,3,30,463,8,30,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,3,32,479,8,32,1,32,1,32,3,32,483,8,32,1,33,1,33,1,34,1,34,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,499,8,35,10,
        35,12,35,502,9,35,3,35,504,8,35,1,36,1,36,1,36,1,36,3,36,510,8,36,
        1,37,1,37,1,37,1,37,1,37,3,37,517,8,37,1,37,3,37,520,8,37,1,37,1,
        37,3,37,524,8,37,1,38,1,38,1,38,3,38,529,8,38,1,38,3,38,532,8,38,
        1,38,1,38,1,38,1,38,5,38,538,8,38,10,38,12,38,541,9,38,1,38,1,38,
        3,38,545,8,38,1,38,3,38,548,8,38,1,38,3,38,551,8,38,1,39,1,39,1,
        39,1,39,1,39,5,39,558,8,39,10,39,12,39,561,9,39,1,40,1,40,3,40,565,
        8,40,1,41,1,41,1,42,1,42,5,42,571,8,42,10,42,12,42,574,9,42,1,43,
        1,43,3,43,578,8,43,1,43,3,43,581,8,43,1,43,3,43,584,8,43,1,44,1,
        44,3,44,588,8,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,596,8,45,1,46,
        1,46,1,46,1,46,1,46,3,46,603,8,46,1,47,1,47,1,47,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,3,48,617,8,48,1,48,1,48,1,48,1,48,
        3,48,623,8,48,3,48,625,8,48,1,49,3,49,628,8,49,1,49,1,49,1,49,1,
        49,1,49,1,49,3,49,636,8,49,1,49,3,49,639,8,49,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,3,50,649,8,50,1,51,1,51,1,51,1,51,3,51,655,8,
        51,1,51,3,51,658,8,51,1,51,3,51,661,8,51,1,51,3,51,664,8,51,1,52,
        1,52,3,52,668,8,52,1,52,1,52,5,52,672,8,52,10,52,12,52,675,9,52,
        1,53,1,53,1,53,1,53,1,53,1,53,3,53,683,8,53,1,53,3,53,686,8,53,1,
        53,1,53,3,53,690,8,53,1,53,3,53,693,8,53,1,53,1,53,3,53,697,8,53,
        1,53,1,53,3,53,701,8,53,1,53,3,53,704,8,53,3,53,706,8,53,1,54,1,
        54,1,54,1,54,3,54,712,8,54,1,54,1,54,1,54,1,54,1,54,5,54,719,8,54,
        10,54,12,54,722,9,54,3,54,724,8,54,1,54,1,54,3,54,728,8,54,1,55,
        1,55,3,55,732,8,55,1,56,1,56,1,56,1,56,3,56,738,8,56,1,56,1,56,1,
        56,1,56,1,56,3,56,745,8,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,
        59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,
        63,3,63,768,8,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,3,
        67,779,8,67,3,67,781,8,67,1,68,1,68,1,68,1,68,1,68,3,68,788,8,68,
        1,68,3,68,791,8,68,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,4,70,809,8,70,11,70,12,70,810,
        1,71,1,71,3,71,815,8,71,1,72,1,72,1,73,1,73,1,73,3,73,822,8,73,1,
        74,1,74,1,75,1,75,1,76,1,76,1,77,3,77,831,8,77,1,77,1,77,1,78,1,
        78,1,78,1,78,5,78,839,8,78,10,78,12,78,842,9,78,1,78,1,78,1,78,1,
        78,3,78,848,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,857,8,79,
        1,79,1,79,3,79,861,8,79,1,80,1,80,1,81,1,81,1,81,3,81,868,8,81,1,
        81,1,81,3,81,872,8,81,1,81,1,81,3,81,876,8,81,1,81,3,81,879,8,81,
        1,81,1,81,3,81,883,8,81,1,81,3,81,886,8,81,1,81,3,81,889,8,81,1,
        82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,
        84,5,84,905,8,84,10,84,12,84,908,9,84,1,84,1,84,1,84,1,85,1,85,1,
        85,5,85,916,8,85,10,85,12,85,919,9,85,1,86,1,86,1,86,5,86,924,8,
        86,10,86,12,86,927,9,86,1,87,1,87,1,87,1,87,5,87,933,8,87,10,87,
        12,87,936,9,87,1,87,1,87,1,88,1,88,1,88,5,88,943,8,88,10,88,12,88,
        946,9,88,1,89,1,89,1,89,5,89,951,8,89,10,89,12,89,954,9,89,1,90,
        1,90,3,90,958,8,90,1,91,1,91,3,91,962,8,91,1,92,1,92,1,92,1,93,1,
        93,1,93,1,93,1,94,1,94,3,94,973,8,94,1,95,1,95,1,95,1,95,1,95,3,
        95,980,8,95,1,96,1,96,1,96,3,96,985,8,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,3,96,994,8,96,1,96,3,96,997,8,96,1,96,3,96,1000,8,96,1,
        97,1,97,1,97,1,97,3,97,1006,8,97,1,97,1,97,1,97,1,97,1,97,3,97,1013,
        8,97,5,97,1015,8,97,10,97,12,97,1018,9,97,1,98,1,98,1,98,1,98,3,
        98,1024,8,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1032,8,99,1,99,1,
        99,1,99,3,99,1037,8,99,1,99,1,99,1,99,1,99,5,99,1043,8,99,10,99,
        12,99,1046,9,99,1,100,1,100,1,100,3,100,1051,8,100,1,100,1,100,1,
        100,1,100,1,100,1,100,1,100,1,100,3,100,1061,8,100,1,100,1,100,1,
        100,1,100,3,100,1067,8,100,1,100,1,100,1,100,1,100,1,100,1,100,1,
        100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1083,8,100,1,
        100,1,100,1,100,3,100,1088,8,100,5,100,1090,8,100,10,100,12,100,
        1093,9,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,5,101,1106,8,101,10,101,12,101,1109,9,101,1,101,1,101,
        1,101,1,101,1,101,1,101,3,101,1117,8,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,5,101,1127,8,101,10,101,12,101,1130,9,101,
        1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1152,
        8,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1161,8,104,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1170,8,105,1,106,
        1,106,1,106,0,4,56,198,200,202,107,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,0,17,1,0,84,85,1,0,80,81,2,0,75,75,117,117,2,
        0,11,11,19,19,2,0,62,62,65,65,2,0,171,171,173,173,3,0,9,9,159,161,
        167,167,2,0,26,26,64,64,2,0,46,46,169,169,1,0,93,105,3,0,106,106,
        108,109,111,111,2,0,5,5,21,21,2,0,45,45,146,146,3,0,26,26,64,64,
        68,68,3,0,5,5,8,8,60,60,4,0,45,45,138,138,140,140,146,147,1,0,135,
        142,1263,0,215,1,0,0,0,2,231,1,0,0,0,4,247,1,0,0,0,6,249,1,0,0,0,
        8,261,1,0,0,0,10,269,1,0,0,0,12,274,1,0,0,0,14,276,1,0,0,0,16,283,
        1,0,0,0,18,293,1,0,0,0,20,301,1,0,0,0,22,307,1,0,0,0,24,322,1,0,
        0,0,26,336,1,0,0,0,28,338,1,0,0,0,30,340,1,0,0,0,32,342,1,0,0,0,
        34,345,1,0,0,0,36,360,1,0,0,0,38,362,1,0,0,0,40,380,1,0,0,0,42,382,
        1,0,0,0,44,391,1,0,0,0,46,398,1,0,0,0,48,404,1,0,0,0,50,411,1,0,
        0,0,52,418,1,0,0,0,54,420,1,0,0,0,56,433,1,0,0,0,58,447,1,0,0,0,
        60,449,1,0,0,0,62,464,1,0,0,0,64,467,1,0,0,0,66,484,1,0,0,0,68,486,
        1,0,0,0,70,503,1,0,0,0,72,505,1,0,0,0,74,511,1,0,0,0,76,525,1,0,
        0,0,78,552,1,0,0,0,80,562,1,0,0,0,82,566,1,0,0,0,84,568,1,0,0,0,
        86,575,1,0,0,0,88,587,1,0,0,0,90,595,1,0,0,0,92,602,1,0,0,0,94,604,
        1,0,0,0,96,624,1,0,0,0,98,638,1,0,0,0,100,648,1,0,0,0,102,650,1,
        0,0,0,104,667,1,0,0,0,106,705,1,0,0,0,108,707,1,0,0,0,110,729,1,
        0,0,0,112,733,1,0,0,0,114,746,1,0,0,0,116,749,1,0,0,0,118,752,1,
        0,0,0,120,754,1,0,0,0,122,757,1,0,0,0,124,760,1,0,0,0,126,763,1,
        0,0,0,128,769,1,0,0,0,130,771,1,0,0,0,132,773,1,0,0,0,134,775,1,
        0,0,0,136,782,1,0,0,0,138,792,1,0,0,0,140,794,1,0,0,0,142,814,1,
        0,0,0,144,816,1,0,0,0,146,821,1,0,0,0,148,823,1,0,0,0,150,825,1,
        0,0,0,152,827,1,0,0,0,154,830,1,0,0,0,156,847,1,0,0,0,158,860,1,
        0,0,0,160,862,1,0,0,0,162,888,1,0,0,0,164,890,1,0,0,0,166,894,1,
        0,0,0,168,900,1,0,0,0,170,912,1,0,0,0,172,920,1,0,0,0,174,928,1,
        0,0,0,176,939,1,0,0,0,178,947,1,0,0,0,180,957,1,0,0,0,182,961,1,
        0,0,0,184,963,1,0,0,0,186,966,1,0,0,0,188,972,1,0,0,0,190,974,1,
        0,0,0,192,999,1,0,0,0,194,1005,1,0,0,0,196,1023,1,0,0,0,198,1036,
        1,0,0,0,200,1047,1,0,0,0,202,1116,1,0,0,0,204,1131,1,0,0,0,206,1151,
        1,0,0,0,208,1160,1,0,0,0,210,1169,1,0,0,0,212,1171,1,0,0,0,214,216,
        3,2,1,0,215,214,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,219,
        5,139,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,
        5,0,0,1,221,1,1,0,0,0,222,224,3,4,2,0,223,225,5,139,0,0,224,223,
        1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,157,0,0,227,230,
        1,0,0,0,228,230,3,6,3,0,229,222,1,0,0,0,229,228,1,0,0,0,230,233,
        1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,242,1,0,0,0,233,231,
        1,0,0,0,234,239,3,4,2,0,235,237,5,139,0,0,236,235,1,0,0,0,236,237,
        1,0,0,0,237,238,1,0,0,0,238,240,5,157,0,0,239,236,1,0,0,0,239,240,
        1,0,0,0,240,243,1,0,0,0,241,243,3,6,3,0,242,234,1,0,0,0,242,241,
        1,0,0,0,243,3,1,0,0,0,244,248,3,8,4,0,245,248,3,10,5,0,246,248,3,
        12,6,0,247,244,1,0,0,0,247,245,1,0,0,0,247,246,1,0,0,0,248,5,1,0,
        0,0,249,250,5,157,0,0,250,7,1,0,0,0,251,262,3,14,7,0,252,262,3,18,
        9,0,253,262,3,16,8,0,254,262,3,22,11,0,255,262,3,24,12,0,256,262,
        3,44,22,0,257,262,3,48,24,0,258,262,3,50,25,0,259,262,3,46,23,0,
        260,262,3,20,10,0,261,251,1,0,0,0,261,252,1,0,0,0,261,253,1,0,0,
        0,261,254,1,0,0,0,261,255,1,0,0,0,261,256,1,0,0,0,261,257,1,0,0,
        0,261,258,1,0,0,0,261,259,1,0,0,0,261,260,1,0,0,0,262,9,1,0,0,0,
        263,270,3,56,28,0,264,270,3,54,27,0,265,270,3,58,29,0,266,270,3,
        52,26,0,267,270,3,60,30,0,268,270,3,64,32,0,269,263,1,0,0,0,269,
        264,1,0,0,0,269,265,1,0,0,0,269,266,1,0,0,0,269,267,1,0,0,0,269,
        268,1,0,0,0,270,11,1,0,0,0,271,275,3,120,60,0,272,275,3,122,61,0,
        273,275,3,124,62,0,274,271,1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,
        0,275,13,1,0,0,0,276,277,5,15,0,0,277,279,5,16,0,0,278,280,3,186,
        93,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,282,3,142,
        71,0,282,15,1,0,0,0,283,284,5,15,0,0,284,285,5,35,0,0,285,287,3,
        142,71,0,286,288,3,32,16,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,
        1,0,0,0,289,290,5,48,0,0,290,291,3,128,64,0,291,292,3,174,87,0,292,
        17,1,0,0,0,293,294,5,15,0,0,294,296,5,61,0,0,295,297,3,186,93,0,
        296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,3,128,64,
        0,299,300,3,34,17,0,300,19,1,0,0,0,301,302,5,54,0,0,302,303,5,61,
        0,0,303,304,3,130,65,0,304,305,5,63,0,0,305,306,3,132,66,0,306,21,
        1,0,0,0,307,308,5,15,0,0,308,310,5,118,0,0,309,311,3,186,93,0,310,
        309,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,3,26,13,0,313,
        314,5,119,0,0,314,315,3,34,17,0,315,316,5,120,0,0,316,317,3,34,17,
        0,317,318,5,121,0,0,318,319,3,28,14,0,319,320,5,122,0,0,320,321,
        3,30,15,0,321,23,1,0,0,0,322,323,5,15,0,0,323,324,5,123,0,0,324,
        326,5,124,0,0,325,327,3,186,93,0,326,325,1,0,0,0,326,327,1,0,0,0,
        327,328,1,0,0,0,328,329,3,128,64,0,329,330,5,152,0,0,330,331,3,170,
        85,0,331,332,5,153,0,0,332,333,1,0,0,0,333,334,5,10,0,0,334,335,
        3,56,28,0,335,25,1,0,0,0,336,337,3,142,71,0,337,27,1,0,0,0,338,339,
        3,142,71,0,339,29,1,0,0,0,340,341,3,150,75,0,341,31,1,0,0,0,342,
        343,5,74,0,0,343,344,7,0,0,0,344,33,1,0,0,0,345,346,5,152,0,0,346,
        351,3,36,18,0,347,348,5,156,0,0,348,350,3,36,18,0,349,347,1,0,0,
        0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,
        0,353,351,1,0,0,0,354,355,5,153,0,0,355,35,1,0,0,0,356,357,3,142,
        71,0,357,358,3,38,19,0,358,361,1,0,0,0,359,361,3,42,21,0,360,356,
        1,0,0,0,360,359,1,0,0,0,361,37,1,0,0,0,362,366,3,162,81,0,363,365,
        3,40,20,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,
        1,0,0,0,367,39,1,0,0,0,368,366,1,0,0,0,369,381,3,154,77,0,370,371,
        5,17,0,0,371,381,3,180,90,0,372,374,5,52,0,0,373,372,1,0,0,0,373,
        374,1,0,0,0,374,375,1,0,0,0,375,381,5,39,0,0,376,378,5,67,0,0,377,
        379,5,39,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,
        369,1,0,0,0,380,370,1,0,0,0,380,373,1,0,0,0,380,376,1,0,0,0,381,
        41,1,0,0,0,382,384,5,35,0,0,383,385,3,142,71,0,384,383,1,0,0,0,384,
        385,1,0,0,0,385,387,1,0,0,0,386,388,3,32,16,0,387,386,1,0,0,0,387,
        388,1,0,0,0,388,389,1,0,0,0,389,390,3,174,87,0,390,43,1,0,0,0,391,
        392,5,22,0,0,392,394,5,16,0,0,393,395,3,184,92,0,394,393,1,0,0,0,
        394,395,1,0,0,0,395,396,1,0,0,0,396,397,3,142,71,0,397,45,1,0,0,
        0,398,399,5,22,0,0,399,400,5,35,0,0,400,401,3,142,71,0,401,402,5,
        48,0,0,402,403,3,128,64,0,403,47,1,0,0,0,404,405,5,22,0,0,405,407,
        5,61,0,0,406,408,3,184,92,0,407,406,1,0,0,0,407,408,1,0,0,0,408,
        409,1,0,0,0,409,410,3,172,86,0,410,49,1,0,0,0,411,412,5,22,0,0,412,
        414,5,118,0,0,413,415,3,184,92,0,414,413,1,0,0,0,414,415,1,0,0,0,
        415,416,1,0,0,0,416,417,3,26,13,0,417,51,1,0,0,0,418,419,3,74,37,
        0,419,53,1,0,0,0,420,422,5,36,0,0,421,423,5,34,0,0,422,421,1,0,0,
        0,422,423,1,0,0,0,423,424,1,0,0,0,424,429,3,128,64,0,425,426,5,152,
        0,0,426,427,3,170,85,0,427,428,5,153,0,0,428,430,1,0,0,0,429,425,
        1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,3,70,35,0,432,55,
        1,0,0,0,433,434,6,28,-1,0,434,435,3,102,51,0,435,444,1,0,0,0,436,
        437,10,1,0,0,437,439,5,66,0,0,438,440,5,5,0,0,439,438,1,0,0,0,439,
        440,1,0,0,0,440,441,1,0,0,0,441,443,3,56,28,2,442,436,1,0,0,0,443,
        446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,57,1,0,0,0,446,444,
        1,0,0,0,447,448,3,76,38,0,448,59,1,0,0,0,449,450,5,43,0,0,450,451,
        5,32,0,0,451,452,3,66,33,0,452,453,5,34,0,0,453,458,3,128,64,0,454,
        455,5,152,0,0,455,456,3,170,85,0,456,457,5,153,0,0,457,459,1,0,0,
        0,458,454,1,0,0,0,458,459,1,0,0,0,459,462,1,0,0,0,460,461,5,78,0,
        0,461,463,3,62,31,0,462,460,1,0,0,0,462,463,1,0,0,0,463,61,1,0,0,
        0,464,465,5,79,0,0,465,466,7,1,0,0,466,63,1,0,0,0,467,468,5,73,0,
        0,468,469,5,51,0,0,469,470,3,66,33,0,470,471,5,12,0,0,471,472,3,
        68,34,0,472,473,5,34,0,0,473,478,3,128,64,0,474,475,5,152,0,0,475,
        476,3,170,85,0,476,477,5,153,0,0,477,479,1,0,0,0,478,474,1,0,0,0,
        478,479,1,0,0,0,479,482,1,0,0,0,480,481,5,78,0,0,481,483,3,62,31,
        0,482,480,1,0,0,0,482,483,1,0,0,0,483,65,1,0,0,0,484,485,3,150,75,
        0,485,67,1,0,0,0,486,487,3,150,75,0,487,69,1,0,0,0,488,504,3,56,
        28,0,489,490,7,2,0,0,490,491,5,152,0,0,491,492,3,178,89,0,492,500,
        5,153,0,0,493,494,5,156,0,0,494,495,5,152,0,0,495,496,3,178,89,0,
        496,497,5,153,0,0,497,499,1,0,0,0,498,493,1,0,0,0,499,502,1,0,0,
        0,500,498,1,0,0,0,500,501,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,
        0,503,488,1,0,0,0,503,489,1,0,0,0,504,71,1,0,0,0,505,506,3,134,67,
        0,506,509,5,143,0,0,507,510,3,198,99,0,508,510,5,17,0,0,509,507,
        1,0,0,0,509,508,1,0,0,0,510,73,1,0,0,0,511,512,5,18,0,0,512,513,
        5,27,0,0,513,516,3,128,64,0,514,515,5,76,0,0,515,517,3,198,99,0,
        516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,520,3,78,39,
        0,519,518,1,0,0,0,519,520,1,0,0,0,520,523,1,0,0,0,521,522,5,42,0,
        0,522,524,3,148,74,0,523,521,1,0,0,0,523,524,1,0,0,0,524,75,1,0,
        0,0,525,526,5,72,0,0,526,531,3,128,64,0,527,529,5,10,0,0,528,527,
        1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,532,3,142,71,0,531,528,
        1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,534,5,57,0,0,534,539,
        3,72,36,0,535,536,5,156,0,0,536,538,3,72,36,0,537,535,1,0,0,0,538,
        541,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,544,1,0,0,0,541,
        539,1,0,0,0,542,543,5,76,0,0,543,545,3,198,99,0,544,542,1,0,0,0,
        544,545,1,0,0,0,545,547,1,0,0,0,546,548,3,78,39,0,547,546,1,0,0,
        0,547,548,1,0,0,0,548,550,1,0,0,0,549,551,3,112,56,0,550,549,1,0,
        0,0,550,551,1,0,0,0,551,77,1,0,0,0,552,553,5,50,0,0,553,554,5,13,
        0,0,554,559,3,80,40,0,555,556,5,156,0,0,556,558,3,80,40,0,557,555,
        1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,79,1,
        0,0,0,561,559,1,0,0,0,562,564,3,198,99,0,563,565,7,3,0,0,564,563,
        1,0,0,0,564,565,1,0,0,0,565,81,1,0,0,0,566,567,3,84,42,0,567,83,
        1,0,0,0,568,572,3,86,43,0,569,571,3,96,48,0,570,569,1,0,0,0,571,
        574,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,85,1,0,0,0,574,572,
        1,0,0,0,575,580,3,88,44,0,576,578,5,10,0,0,577,576,1,0,0,0,577,578,
        1,0,0,0,578,579,1,0,0,0,579,581,3,142,71,0,580,577,1,0,0,0,580,581,
        1,0,0,0,581,583,1,0,0,0,582,584,3,94,47,0,583,582,1,0,0,0,583,584,
        1,0,0,0,584,87,1,0,0,0,585,588,3,128,64,0,586,588,3,92,46,0,587,
        585,1,0,0,0,587,586,1,0,0,0,588,89,1,0,0,0,589,596,3,188,94,0,590,
        591,5,70,0,0,591,592,5,152,0,0,592,593,3,188,94,0,593,594,5,153,
        0,0,594,596,1,0,0,0,595,589,1,0,0,0,595,590,1,0,0,0,596,91,1,0,0,
        0,597,603,3,56,28,0,598,599,5,152,0,0,599,600,3,56,28,0,600,601,
        5,153,0,0,601,603,1,0,0,0,602,597,1,0,0,0,602,598,1,0,0,0,603,93,
        1,0,0,0,604,605,5,55,0,0,605,606,3,148,74,0,606,95,1,0,0,0,607,608,
        5,38,0,0,608,616,3,86,43,0,609,610,5,48,0,0,610,617,3,198,99,0,611,
        612,5,74,0,0,612,613,5,152,0,0,613,614,3,170,85,0,614,615,5,153,
        0,0,615,617,1,0,0,0,616,609,1,0,0,0,616,611,1,0,0,0,616,617,1,0,
        0,0,617,625,1,0,0,0,618,619,5,38,0,0,619,620,5,40,0,0,620,622,3,
        90,45,0,621,623,3,98,49,0,622,621,1,0,0,0,622,623,1,0,0,0,623,625,
        1,0,0,0,624,607,1,0,0,0,624,618,1,0,0,0,625,97,1,0,0,0,626,628,5,
        10,0,0,627,626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,3,
        142,71,0,630,631,5,152,0,0,631,632,3,170,85,0,632,633,5,153,0,0,
        633,639,1,0,0,0,634,636,5,10,0,0,635,634,1,0,0,0,635,636,1,0,0,0,
        636,637,1,0,0,0,637,639,3,142,71,0,638,627,1,0,0,0,638,635,1,0,0,
        0,639,99,1,0,0,0,640,641,5,152,0,0,641,642,3,102,51,0,642,643,5,
        153,0,0,643,649,1,0,0,0,644,645,5,152,0,0,645,646,3,100,50,0,646,
        647,5,153,0,0,647,649,1,0,0,0,648,640,1,0,0,0,648,644,1,0,0,0,649,
        101,1,0,0,0,650,651,5,56,0,0,651,652,3,104,52,0,652,654,3,108,54,
        0,653,655,3,78,39,0,654,653,1,0,0,0,654,655,1,0,0,0,655,657,1,0,
        0,0,656,658,3,112,56,0,657,656,1,0,0,0,657,658,1,0,0,0,658,660,1,
        0,0,0,659,661,3,114,57,0,660,659,1,0,0,0,660,661,1,0,0,0,661,663,
        1,0,0,0,662,664,3,116,58,0,663,662,1,0,0,0,663,664,1,0,0,0,664,103,
        1,0,0,0,665,668,5,135,0,0,666,668,3,106,53,0,667,665,1,0,0,0,667,
        666,1,0,0,0,668,673,1,0,0,0,669,670,5,156,0,0,670,672,3,106,53,0,
        671,669,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,
        674,105,1,0,0,0,675,673,1,0,0,0,676,677,3,126,63,0,677,678,5,151,
        0,0,678,679,5,135,0,0,679,706,1,0,0,0,680,685,3,134,67,0,681,683,
        5,10,0,0,682,681,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,686,
        3,142,71,0,685,682,1,0,0,0,685,686,1,0,0,0,686,706,1,0,0,0,687,692,
        3,188,94,0,688,690,5,10,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,
        691,1,0,0,0,691,693,3,142,71,0,692,689,1,0,0,0,692,693,1,0,0,0,693,
        706,1,0,0,0,694,695,5,174,0,0,695,697,5,126,0,0,696,694,1,0,0,0,
        696,697,1,0,0,0,697,698,1,0,0,0,698,703,3,198,99,0,699,701,5,10,
        0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,704,3,142,
        71,0,703,700,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,705,676,1,0,
        0,0,705,680,1,0,0,0,705,687,1,0,0,0,705,696,1,0,0,0,706,107,1,0,
        0,0,707,708,5,27,0,0,708,711,3,82,41,0,709,710,5,76,0,0,710,712,
        3,198,99,0,711,709,1,0,0,0,711,712,1,0,0,0,712,723,1,0,0,0,713,714,
        5,28,0,0,714,715,5,13,0,0,715,720,3,110,55,0,716,717,5,156,0,0,717,
        719,3,110,55,0,718,716,1,0,0,0,719,722,1,0,0,0,720,718,1,0,0,0,720,
        721,1,0,0,0,721,724,1,0,0,0,722,720,1,0,0,0,723,713,1,0,0,0,723,
        724,1,0,0,0,724,727,1,0,0,0,725,726,5,29,0,0,726,728,3,198,99,0,
        727,725,1,0,0,0,727,728,1,0,0,0,728,109,1,0,0,0,729,731,3,198,99,
        0,730,732,7,3,0,0,731,730,1,0,0,0,731,732,1,0,0,0,732,111,1,0,0,
        0,733,744,5,42,0,0,734,735,3,148,74,0,735,736,5,156,0,0,736,738,
        1,0,0,0,737,734,1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,745,
        3,148,74,0,740,741,3,148,74,0,741,742,5,47,0,0,742,743,3,148,74,
        0,743,745,1,0,0,0,744,737,1,0,0,0,744,740,1,0,0,0,745,113,1,0,0,
        0,746,747,5,82,0,0,747,748,5,168,0,0,748,115,1,0,0,0,749,750,5,83,
        0,0,750,751,5,168,0,0,751,117,1,0,0,0,752,753,5,58,0,0,753,119,1,
        0,0,0,754,755,5,20,0,0,755,756,3,128,64,0,756,121,1,0,0,0,757,758,
        5,115,0,0,758,759,5,166,0,0,759,123,1,0,0,0,760,761,5,59,0,0,761,
        762,7,4,0,0,762,125,1,0,0,0,763,767,3,142,71,0,764,768,5,170,0,0,
        765,766,5,151,0,0,766,768,3,142,71,0,767,764,1,0,0,0,767,765,1,0,
        0,0,767,768,1,0,0,0,768,127,1,0,0,0,769,770,3,126,63,0,770,129,1,
        0,0,0,771,772,3,126,63,0,772,131,1,0,0,0,773,774,3,126,63,0,774,
        133,1,0,0,0,775,780,3,142,71,0,776,778,3,146,73,0,777,779,3,146,
        73,0,778,777,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,776,1,0,
        0,0,780,781,1,0,0,0,781,135,1,0,0,0,782,787,3,142,71,0,783,784,5,
        152,0,0,784,785,3,148,74,0,785,786,5,153,0,0,786,788,1,0,0,0,787,
        783,1,0,0,0,787,788,1,0,0,0,788,790,1,0,0,0,789,791,7,3,0,0,790,
        789,1,0,0,0,790,791,1,0,0,0,791,137,1,0,0,0,792,793,7,5,0,0,793,
        139,1,0,0,0,794,795,3,148,74,0,795,796,5,140,0,0,796,797,3,148,74,
        0,797,798,5,140,0,0,798,799,3,148,74,0,799,800,5,140,0,0,800,801,
        3,148,74,0,801,802,5,140,0,0,802,808,3,148,74,0,803,804,5,165,0,
        0,804,805,3,148,74,0,805,806,5,140,0,0,806,807,3,148,74,0,807,809,
        1,0,0,0,808,803,1,0,0,0,809,810,1,0,0,0,810,808,1,0,0,0,810,811,
        1,0,0,0,811,141,1,0,0,0,812,815,3,144,72,0,813,815,5,172,0,0,814,
        812,1,0,0,0,814,813,1,0,0,0,815,143,1,0,0,0,816,817,5,171,0,0,817,
        145,1,0,0,0,818,822,5,170,0,0,819,820,5,151,0,0,820,822,3,142,71,
        0,821,818,1,0,0,0,821,819,1,0,0,0,822,147,1,0,0,0,823,824,7,6,0,
        0,824,149,1,0,0,0,825,826,5,166,0,0,826,151,1,0,0,0,827,828,7,7,
        0,0,828,153,1,0,0,0,829,831,5,45,0,0,830,829,1,0,0,0,830,831,1,0,
        0,0,831,832,1,0,0,0,832,833,7,8,0,0,833,155,1,0,0,0,834,835,5,154,
        0,0,835,840,3,158,79,0,836,837,5,156,0,0,837,839,3,158,79,0,838,
        836,1,0,0,0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,
        843,1,0,0,0,842,840,1,0,0,0,843,844,5,155,0,0,844,848,1,0,0,0,845,
        846,5,154,0,0,846,848,5,155,0,0,847,834,1,0,0,0,847,845,1,0,0,0,
        848,157,1,0,0,0,849,861,3,150,75,0,850,861,3,148,74,0,851,852,5,
        140,0,0,852,861,3,148,74,0,853,861,3,152,76,0,854,861,5,168,0,0,
        855,857,5,45,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,
        858,861,7,8,0,0,859,861,3,156,78,0,860,849,1,0,0,0,860,850,1,0,0,
        0,860,851,1,0,0,0,860,853,1,0,0,0,860,854,1,0,0,0,860,856,1,0,0,
        0,860,859,1,0,0,0,861,159,1,0,0,0,862,863,7,9,0,0,863,161,1,0,0,
        0,864,889,5,88,0,0,865,867,5,91,0,0,866,868,3,164,82,0,867,866,1,
        0,0,0,867,868,1,0,0,0,868,889,1,0,0,0,869,871,5,89,0,0,870,872,5,
        71,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,889,1,0,0,0,873,875,5,
        90,0,0,874,876,3,166,83,0,875,874,1,0,0,0,875,876,1,0,0,0,876,878,
        1,0,0,0,877,879,5,71,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,889,
        1,0,0,0,880,882,5,92,0,0,881,883,3,160,80,0,882,881,1,0,0,0,882,
        883,1,0,0,0,883,885,1,0,0,0,884,886,3,168,84,0,885,884,1,0,0,0,885,
        886,1,0,0,0,886,889,1,0,0,0,887,889,5,105,0,0,888,864,1,0,0,0,888,
        865,1,0,0,0,888,869,1,0,0,0,888,873,1,0,0,0,888,880,1,0,0,0,888,
        887,1,0,0,0,889,163,1,0,0,0,890,891,5,152,0,0,891,892,3,148,74,0,
        892,893,5,153,0,0,893,165,1,0,0,0,894,895,5,152,0,0,895,896,3,148,
        74,0,896,897,5,156,0,0,897,898,3,148,74,0,898,899,5,153,0,0,899,
        167,1,0,0,0,900,906,5,152,0,0,901,902,3,148,74,0,902,903,5,156,0,
        0,903,905,1,0,0,0,904,901,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,
        0,906,907,1,0,0,0,907,909,1,0,0,0,908,906,1,0,0,0,909,910,3,148,
        74,0,910,911,5,153,0,0,911,169,1,0,0,0,912,917,3,142,71,0,913,914,
        5,156,0,0,914,916,3,142,71,0,915,913,1,0,0,0,916,919,1,0,0,0,917,
        915,1,0,0,0,917,918,1,0,0,0,918,171,1,0,0,0,919,917,1,0,0,0,920,
        925,3,128,64,0,921,922,5,156,0,0,922,924,3,128,64,0,923,921,1,0,
        0,0,924,927,1,0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,173,1,0,
        0,0,927,925,1,0,0,0,928,929,5,152,0,0,929,934,3,136,68,0,930,931,
        5,156,0,0,931,933,3,136,68,0,932,930,1,0,0,0,933,936,1,0,0,0,934,
        932,1,0,0,0,934,935,1,0,0,0,935,937,1,0,0,0,936,934,1,0,0,0,937,
        938,5,153,0,0,938,175,1,0,0,0,939,944,3,198,99,0,940,941,5,156,0,
        0,941,943,3,198,99,0,942,940,1,0,0,0,943,946,1,0,0,0,944,942,1,0,
        0,0,944,945,1,0,0,0,945,177,1,0,0,0,946,944,1,0,0,0,947,952,3,182,
        91,0,948,949,5,156,0,0,949,951,3,182,91,0,950,948,1,0,0,0,951,954,
        1,0,0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,179,1,0,0,0,954,952,
        1,0,0,0,955,958,5,46,0,0,956,958,3,158,79,0,957,955,1,0,0,0,957,
        956,1,0,0,0,958,181,1,0,0,0,959,962,3,198,99,0,960,962,5,17,0,0,
        961,959,1,0,0,0,961,960,1,0,0,0,962,183,1,0,0,0,963,964,5,30,0,0,
        964,965,5,24,0,0,965,185,1,0,0,0,966,967,5,30,0,0,967,968,5,45,0,
        0,968,969,5,24,0,0,969,187,1,0,0,0,970,973,3,190,95,0,971,973,3,
        192,96,0,972,970,1,0,0,0,972,971,1,0,0,0,973,189,1,0,0,0,974,975,
        3,144,72,0,975,976,5,152,0,0,976,977,3,194,97,0,977,979,5,153,0,
        0,978,980,3,146,73,0,979,978,1,0,0,0,979,980,1,0,0,0,980,191,1,0,
        0,0,981,982,7,10,0,0,982,984,5,152,0,0,983,985,7,11,0,0,984,983,
        1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,987,3,196,98,0,987,988,
        5,153,0,0,988,1000,1,0,0,0,989,990,5,107,0,0,990,996,5,152,0,0,991,
        997,5,135,0,0,992,994,5,5,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,
        995,1,0,0,0,995,997,3,196,98,0,996,991,1,0,0,0,996,993,1,0,0,0,997,
        998,1,0,0,0,998,1000,5,153,0,0,999,981,1,0,0,0,999,989,1,0,0,0,1000,
        193,1,0,0,0,1001,1006,3,158,79,0,1002,1006,3,134,67,0,1003,1006,
        3,188,94,0,1004,1006,3,198,99,0,1005,1001,1,0,0,0,1005,1002,1,0,
        0,0,1005,1003,1,0,0,0,1005,1004,1,0,0,0,1006,1016,1,0,0,0,1007,1012,
        5,156,0,0,1008,1013,3,158,79,0,1009,1013,3,134,67,0,1010,1013,3,
        188,94,0,1011,1013,3,198,99,0,1012,1008,1,0,0,0,1012,1009,1,0,0,
        0,1012,1010,1,0,0,0,1012,1011,1,0,0,0,1013,1015,1,0,0,0,1014,1007,
        1,0,0,0,1015,1018,1,0,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,
        195,1,0,0,0,1018,1016,1,0,0,0,1019,1024,3,158,79,0,1020,1024,3,134,
        67,0,1021,1024,3,188,94,0,1022,1024,3,198,99,0,1023,1019,1,0,0,0,
        1023,1020,1,0,0,0,1023,1021,1,0,0,0,1023,1022,1,0,0,0,1024,197,1,
        0,0,0,1025,1026,6,99,-1,0,1026,1027,7,12,0,0,1027,1037,3,198,99,
        4,1028,1029,3,200,100,0,1029,1031,5,37,0,0,1030,1032,5,45,0,0,1031,
        1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1034,7,13,
        0,0,1034,1037,1,0,0,0,1035,1037,3,200,100,0,1036,1025,1,0,0,0,1036,
        1028,1,0,0,0,1036,1035,1,0,0,0,1037,1044,1,0,0,0,1038,1039,10,3,
        0,0,1039,1040,3,208,104,0,1040,1041,3,198,99,4,1041,1043,1,0,0,0,
        1042,1038,1,0,0,0,1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,
        1,0,0,0,1045,199,1,0,0,0,1046,1044,1,0,0,0,1047,1050,6,100,-1,0,
        1048,1049,5,174,0,0,1049,1051,5,126,0,0,1050,1048,1,0,0,0,1050,1051,
        1,0,0,0,1051,1052,1,0,0,0,1052,1053,3,202,101,0,1053,1091,1,0,0,
        0,1054,1055,10,4,0,0,1055,1056,3,206,103,0,1056,1057,3,200,100,5,
        1057,1090,1,0,0,0,1058,1060,10,6,0,0,1059,1061,5,45,0,0,1060,1059,
        1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1063,5,31,0,0,1063,
        1066,5,152,0,0,1064,1067,3,56,28,0,1065,1067,3,176,88,0,1066,1064,
        1,0,0,0,1066,1065,1,0,0,0,1067,1068,1,0,0,0,1068,1069,5,153,0,0,
        1069,1090,1,0,0,0,1070,1071,10,5,0,0,1071,1072,5,37,0,0,1072,1090,
        3,154,77,0,1073,1074,10,3,0,0,1074,1075,3,206,103,0,1075,1076,7,
        14,0,0,1076,1077,5,152,0,0,1077,1078,3,56,28,0,1078,1079,5,153,0,
        0,1079,1090,1,0,0,0,1080,1082,10,2,0,0,1081,1083,5,45,0,0,1082,1081,
        1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1085,5,41,0,0,1085,
        1087,3,200,100,0,1086,1088,5,166,0,0,1087,1086,1,0,0,0,1087,1088,
        1,0,0,0,1088,1090,1,0,0,0,1089,1054,1,0,0,0,1089,1058,1,0,0,0,1089,
        1070,1,0,0,0,1089,1073,1,0,0,0,1089,1080,1,0,0,0,1090,1093,1,0,0,
        0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,201,1,0,0,0,1093,1091,
        1,0,0,0,1094,1095,6,101,-1,0,1095,1117,3,158,79,0,1096,1117,3,134,
        67,0,1097,1117,3,188,94,0,1098,1099,3,204,102,0,1099,1100,3,202,
        101,5,1100,1117,1,0,0,0,1101,1102,5,152,0,0,1102,1107,3,198,99,0,
        1103,1104,5,156,0,0,1104,1106,3,198,99,0,1105,1103,1,0,0,0,1106,
        1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1110,1,0,0,
        0,1109,1107,1,0,0,0,1110,1111,5,153,0,0,1111,1117,1,0,0,0,1112,1113,
        5,152,0,0,1113,1114,3,56,28,0,1114,1115,5,153,0,0,1115,1117,1,0,
        0,0,1116,1094,1,0,0,0,1116,1096,1,0,0,0,1116,1097,1,0,0,0,1116,1098,
        1,0,0,0,1116,1101,1,0,0,0,1116,1112,1,0,0,0,1117,1128,1,0,0,0,1118,
        1119,10,2,0,0,1119,1120,3,210,105,0,1120,1121,3,202,101,3,1121,1127,
        1,0,0,0,1122,1123,10,1,0,0,1123,1124,3,212,106,0,1124,1125,3,202,
        101,2,1125,1127,1,0,0,0,1126,1118,1,0,0,0,1126,1122,1,0,0,0,1127,
        1130,1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,203,1,0,0,
        0,1130,1128,1,0,0,0,1131,1132,7,15,0,0,1132,205,1,0,0,0,1133,1152,
        5,143,0,0,1134,1152,5,144,0,0,1135,1152,5,145,0,0,1136,1137,5,145,
        0,0,1137,1152,5,143,0,0,1138,1139,5,144,0,0,1139,1152,5,143,0,0,
        1140,1141,5,145,0,0,1141,1152,5,144,0,0,1142,1143,5,146,0,0,1143,
        1152,5,143,0,0,1144,1145,5,145,0,0,1145,1146,5,143,0,0,1146,1152,
        5,144,0,0,1147,1148,5,158,0,0,1148,1152,5,144,0,0,1149,1150,5,145,
        0,0,1150,1152,5,158,0,0,1151,1133,1,0,0,0,1151,1134,1,0,0,0,1151,
        1135,1,0,0,0,1151,1136,1,0,0,0,1151,1138,1,0,0,0,1151,1140,1,0,0,
        0,1151,1142,1,0,0,0,1151,1144,1,0,0,0,1151,1147,1,0,0,0,1151,1149,
        1,0,0,0,1152,207,1,0,0,0,1153,1161,5,7,0,0,1154,1155,5,149,0,0,1155,
        1161,5,149,0,0,1156,1161,5,77,0,0,1157,1161,5,49,0,0,1158,1159,5,
        148,0,0,1159,1161,5,148,0,0,1160,1153,1,0,0,0,1160,1154,1,0,0,0,
        1160,1156,1,0,0,0,1160,1157,1,0,0,0,1160,1158,1,0,0,0,1161,209,1,
        0,0,0,1162,1163,5,145,0,0,1163,1170,5,145,0,0,1164,1165,5,144,0,
        0,1165,1170,5,144,0,0,1166,1170,5,149,0,0,1167,1170,5,150,0,0,1168,
        1170,5,148,0,0,1169,1162,1,0,0,0,1169,1164,1,0,0,0,1169,1166,1,0,
        0,0,1169,1167,1,0,0,0,1169,1168,1,0,0,0,1170,211,1,0,0,0,1171,1172,
        7,16,0,0,1172,213,1,0,0,0,140,215,218,224,229,231,236,239,242,247,
        261,269,274,279,287,296,310,326,351,360,366,373,378,380,384,387,
        394,407,414,422,429,439,444,458,462,478,482,500,503,509,516,519,
        523,528,531,539,544,547,550,559,564,572,577,580,583,587,595,602,
        616,622,624,627,635,638,648,654,657,660,663,667,673,682,685,689,
        692,696,700,703,705,711,720,723,727,731,737,744,767,778,780,787,
        790,810,814,821,830,840,847,856,860,867,871,875,878,882,885,888,
        906,917,925,934,944,952,957,961,972,979,984,993,996,999,1005,1012,
        1016,1023,1031,1036,1044,1050,1060,1066,1082,1087,1089,1091,1107,
        1116,1126,1128,1151,1160,1169
    ]

class evaql_parser ( Parser ):

    grammarFileName = "evaql_parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ALL'", "'ALTER'", "'AND'", "'ANY'", 
                     "'ANYDIM'", "'AS'", "'ASC'", "'BLOB'", "'BY'", "'COLUMN'", 
                     "'CREATE'", "'DATABASE'", "'DEFAULT'", "'DELETE'", 
                     "'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DROP'", "'EXIT'", 
                     "'EXISTS'", "'EXPLAIN'", "'FALSE'", "'FROM'", "'GROUP'", 
                     "'HAVING'", "'IF'", "'IN'", "'FILE'", "'INDIR'", "'INTO'", 
                     "'INDEX'", "'INSERT'", "'IS'", "'JOIN'", "'KEY'", "'LATERAL'", 
                     "'LIKE'", "'LIMIT'", "'LOAD'", "'NO'", "'NOT'", "'NULL'", 
                     "'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'PATH'", "'PRIMARY'", 
                     "'REFERENCES'", "'RENAME'", "'SAMPLE'", "'SELECT'", 
                     "'SET'", "'SHUTDOWN'", "'SHOW'", "'SOME'", "'TABLE'", 
                     "'TABLES'", "'TO'", "'TRUE'", "'UDFS'", "'UNION'", 
                     "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", "'UNNEST'", "'UNSIGNED'", 
                     "'UPDATE'", "'UPLOAD'", "'USING'", "'VALUES'", "'WHERE'", 
                     "'XOR'", "'WITH'", "'FORMAT'", "'CSV'", "'VIDEO'", 
                     "'ERROR_WITHIN'", "'AT_CONFIDENCE'", "'BTREE'", "'HASH'", 
                     "'OBJECT_DETECTION'", "'ACTION_CLASSICATION'", "'BOOLEAN'", 
                     "'INTEGER'", "'FLOAT'", "'TEXT'", "'NDARRAY'", "'INT8'", 
                     "'UINT8'", "'INT16'", "'INT32'", "'INT64'", "'UNICODE'", 
                     "'BOOL'", "'FLOAT32'", "'FLOAT64'", "'DECIMAL'", "'STR'", 
                     "'DATETIME'", "'ANYTYPE'", "'AVG'", "'COUNT'", "'MAX'", 
                     "'MIN'", "'STD'", "'SUM'", "'FCOUNT'", "'AUTO_INCREMENT'", 
                     "'COLUMNS'", "'HELP'", "'TEMPTABLE'", "'VALUE'", "'UDF'", 
                     "'INPUT'", "'OUTPUT'", "'TYPE'", "'IMPL'", "'MATERIALIZED'", 
                     "'VIEW'", "'ABS'", "':='", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
                     "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
                     "'('", "')'", "'['", "']'", "','", "';'", "'@'", "'0'", 
                     "'1'", "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_EVAQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ALL", "ALTER", "AND", "ANY", "ANYDIM", 
                      "AS", "ASC", "BLOB", "BY", "COLUMN", "CREATE", "DATABASE", 
                      "DEFAULT", "DELETE", "DESC", "DESCRIBE", "DISTINCT", 
                      "DROP", "EXIT", "EXISTS", "EXPLAIN", "FALSE", "FROM", 
                      "GROUP", "HAVING", "IF", "IN", "FILE", "INDIR", "INTO", 
                      "INDEX", "INSERT", "IS", "JOIN", "KEY", "LATERAL", 
                      "LIKE", "LIMIT", "LOAD", "NO", "NOT", "NULL_LITERAL", 
                      "OFFSET", "ON", "OR", "ORDER", "PATH", "PRIMARY", 
                      "REFERENCES", "RENAME", "SAMPLE", "SELECT", "SET", 
                      "SHUTDOWN", "SHOW", "SOME", "TABLE", "TABLES", "TO", 
                      "TRUE", "UDFS", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", 
                      "UNNEST", "UNSIGNED", "UPDATE", "UPLOAD", "USING", 
                      "VALUES", "WHERE", "XOR", "WITH", "FORMAT", "CSV", 
                      "VIDEO", "ERROR_BOUNDS", "CONFIDENCE_LEVEL", "BTREE", 
                      "HASH", "OBJECT_DETECTION", "ACTION_CLASSICATION", 
                      "BOOLEAN", "INTEGER", "FLOAT", "TEXT", "NDARRAY", 
                      "INT8", "UINT8", "INT16", "INT32", "INT64", "UNICODE", 
                      "BOOL", "FLOAT32", "FLOAT64", "DECIMAL", "STR", "DATETIME", 
                      "ANYTYPE", "AVG", "COUNT", "MAX", "MIN", "STD", "SUM", 
                      "FCOUNT", "AUTO_INCREMENT", "COLUMNS", "HELP", "TEMPTABLE", 
                      "VALUE", "UDF", "INPUT", "OUTPUT", "TYPE", "IMPL", 
                      "MATERIALIZED", "VIEW", "ABS", "VAR_ASSIGN", "PLUS_ASSIGN", 
                      "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", 
                      "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                      "DOT", "LR_BRACKET", "RR_BRACKET", "LR_SQ_BRACKET", 
                      "RR_SQ_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
                      "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
                      "STRING_LITERAL", "DECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
                      "STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_utilityStatement = 6
    RULE_createDatabase = 7
    RULE_createIndex = 8
    RULE_createTable = 9
    RULE_renameTable = 10
    RULE_createUdf = 11
    RULE_createMaterializedView = 12
    RULE_udfName = 13
    RULE_udfType = 14
    RULE_udfImpl = 15
    RULE_indexType = 16
    RULE_createDefinitions = 17
    RULE_createDefinition = 18
    RULE_columnDefinition = 19
    RULE_columnConstraint = 20
    RULE_indexColumnDefinition = 21
    RULE_dropDatabase = 22
    RULE_dropIndex = 23
    RULE_dropTable = 24
    RULE_dropUdf = 25
    RULE_deleteStatement = 26
    RULE_insertStatement = 27
    RULE_selectStatement = 28
    RULE_updateStatement = 29
    RULE_loadStatement = 30
    RULE_fileOptions = 31
    RULE_uploadStatement = 32
    RULE_fileName = 33
    RULE_videoBlob = 34
    RULE_insertStatementValue = 35
    RULE_updatedElement = 36
    RULE_singleDeleteStatement = 37
    RULE_singleUpdateStatement = 38
    RULE_orderByClause = 39
    RULE_orderByExpression = 40
    RULE_tableSources = 41
    RULE_tableSource = 42
    RULE_tableSourceItemWithSample = 43
    RULE_tableSourceItem = 44
    RULE_tableValuedFunction = 45
    RULE_subqueryTableSourceItem = 46
    RULE_sampleClause = 47
    RULE_joinPart = 48
    RULE_aliasClause = 49
    RULE_queryExpression = 50
    RULE_querySpecification = 51
    RULE_selectElements = 52
    RULE_selectElement = 53
    RULE_fromClause = 54
    RULE_groupByItem = 55
    RULE_limitClause = 56
    RULE_errorBoundsExpression = 57
    RULE_confidenceLevelExpression = 58
    RULE_shutdownStatement = 59
    RULE_simpleDescribeStatement = 60
    RULE_helpStatement = 61
    RULE_showStatement = 62
    RULE_fullId = 63
    RULE_tableName = 64
    RULE_oldtableName = 65
    RULE_newtableName = 66
    RULE_fullColumnName = 67
    RULE_indexColumnName = 68
    RULE_userName = 69
    RULE_uuidSet = 70
    RULE_uid = 71
    RULE_simpleId = 72
    RULE_dottedId = 73
    RULE_decimalLiteral = 74
    RULE_stringLiteral = 75
    RULE_booleanLiteral = 76
    RULE_nullNotnull = 77
    RULE_arrayLiteral = 78
    RULE_constant = 79
    RULE_arrayType = 80
    RULE_dataType = 81
    RULE_lengthOneDimension = 82
    RULE_lengthTwoDimension = 83
    RULE_lengthDimensionList = 84
    RULE_uidList = 85
    RULE_tables = 86
    RULE_indexColumnNames = 87
    RULE_expressions = 88
    RULE_expressionsWithDefaults = 89
    RULE_defaultValue = 90
    RULE_expressionOrDefault = 91
    RULE_ifExists = 92
    RULE_ifNotExists = 93
    RULE_functionCall = 94
    RULE_udfFunction = 95
    RULE_aggregateWindowedFunction = 96
    RULE_functionArgs = 97
    RULE_functionArg = 98
    RULE_expression = 99
    RULE_predicate = 100
    RULE_expressionAtom = 101
    RULE_unaryOperator = 102
    RULE_comparisonOperator = 103
    RULE_logicalOperator = 104
    RULE_bitOperator = 105
    RULE_mathOperator = 106

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                   "ddlStatement", "dmlStatement", "utilityStatement", "createDatabase", 
                   "createIndex", "createTable", "renameTable", "createUdf", 
                   "createMaterializedView", "udfName", "udfType", "udfImpl", 
                   "indexType", "createDefinitions", "createDefinition", 
                   "columnDefinition", "columnConstraint", "indexColumnDefinition", 
                   "dropDatabase", "dropIndex", "dropTable", "dropUdf", 
                   "deleteStatement", "insertStatement", "selectStatement", 
                   "updateStatement", "loadStatement", "fileOptions", "uploadStatement", 
                   "fileName", "videoBlob", "insertStatementValue", "updatedElement", 
                   "singleDeleteStatement", "singleUpdateStatement", "orderByClause", 
                   "orderByExpression", "tableSources", "tableSource", "tableSourceItemWithSample", 
                   "tableSourceItem", "tableValuedFunction", "subqueryTableSourceItem", 
                   "sampleClause", "joinPart", "aliasClause", "queryExpression", 
                   "querySpecification", "selectElements", "selectElement", 
                   "fromClause", "groupByItem", "limitClause", "errorBoundsExpression", 
                   "confidenceLevelExpression", "shutdownStatement", "simpleDescribeStatement", 
                   "helpStatement", "showStatement", "fullId", "tableName", 
                   "oldtableName", "newtableName", "fullColumnName", "indexColumnName", 
                   "userName", "uuidSet", "uid", "simpleId", "dottedId", 
                   "decimalLiteral", "stringLiteral", "booleanLiteral", 
                   "nullNotnull", "arrayLiteral", "constant", "arrayType", 
                   "dataType", "lengthOneDimension", "lengthTwoDimension", 
                   "lengthDimensionList", "uidList", "tables", "indexColumnNames", 
                   "expressions", "expressionsWithDefaults", "defaultValue", 
                   "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", 
                   "udfFunction", "aggregateWindowedFunction", "functionArgs", 
                   "functionArg", "expression", "predicate", "expressionAtom", 
                   "unaryOperator", "comparisonOperator", "logicalOperator", 
                   "bitOperator", "mathOperator" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_EVAQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ALL=5
    ALTER=6
    AND=7
    ANY=8
    ANYDIM=9
    AS=10
    ASC=11
    BLOB=12
    BY=13
    COLUMN=14
    CREATE=15
    DATABASE=16
    DEFAULT=17
    DELETE=18
    DESC=19
    DESCRIBE=20
    DISTINCT=21
    DROP=22
    EXIT=23
    EXISTS=24
    EXPLAIN=25
    FALSE=26
    FROM=27
    GROUP=28
    HAVING=29
    IF=30
    IN=31
    FILE=32
    INDIR=33
    INTO=34
    INDEX=35
    INSERT=36
    IS=37
    JOIN=38
    KEY=39
    LATERAL=40
    LIKE=41
    LIMIT=42
    LOAD=43
    NO=44
    NOT=45
    NULL_LITERAL=46
    OFFSET=47
    ON=48
    OR=49
    ORDER=50
    PATH=51
    PRIMARY=52
    REFERENCES=53
    RENAME=54
    SAMPLE=55
    SELECT=56
    SET=57
    SHUTDOWN=58
    SHOW=59
    SOME=60
    TABLE=61
    TABLES=62
    TO=63
    TRUE=64
    UDFS=65
    UNION=66
    UNIQUE=67
    UNKNOWN=68
    UNLOCK=69
    UNNEST=70
    UNSIGNED=71
    UPDATE=72
    UPLOAD=73
    USING=74
    VALUES=75
    WHERE=76
    XOR=77
    WITH=78
    FORMAT=79
    CSV=80
    VIDEO=81
    ERROR_BOUNDS=82
    CONFIDENCE_LEVEL=83
    BTREE=84
    HASH=85
    OBJECT_DETECTION=86
    ACTION_CLASSICATION=87
    BOOLEAN=88
    INTEGER=89
    FLOAT=90
    TEXT=91
    NDARRAY=92
    INT8=93
    UINT8=94
    INT16=95
    INT32=96
    INT64=97
    UNICODE=98
    BOOL=99
    FLOAT32=100
    FLOAT64=101
    DECIMAL=102
    STR=103
    DATETIME=104
    ANYTYPE=105
    AVG=106
    COUNT=107
    MAX=108
    MIN=109
    STD=110
    SUM=111
    FCOUNT=112
    AUTO_INCREMENT=113
    COLUMNS=114
    HELP=115
    TEMPTABLE=116
    VALUE=117
    UDF=118
    INPUT=119
    OUTPUT=120
    TYPE=121
    IMPL=122
    MATERIALIZED=123
    VIEW=124
    ABS=125
    VAR_ASSIGN=126
    PLUS_ASSIGN=127
    MINUS_ASSIGN=128
    MULT_ASSIGN=129
    DIV_ASSIGN=130
    MOD_ASSIGN=131
    AND_ASSIGN=132
    XOR_ASSIGN=133
    OR_ASSIGN=134
    STAR=135
    DIVIDE=136
    MODULE=137
    PLUS=138
    MINUSMINUS=139
    MINUS=140
    DIV=141
    MOD=142
    EQUAL_SYMBOL=143
    GREATER_SYMBOL=144
    LESS_SYMBOL=145
    EXCLAMATION_SYMBOL=146
    BIT_NOT_OP=147
    BIT_OR_OP=148
    BIT_AND_OP=149
    BIT_XOR_OP=150
    DOT=151
    LR_BRACKET=152
    RR_BRACKET=153
    LR_SQ_BRACKET=154
    RR_SQ_BRACKET=155
    COMMA=156
    SEMI=157
    AT_SIGN=158
    ZERO_DECIMAL=159
    ONE_DECIMAL=160
    TWO_DECIMAL=161
    SINGLE_QUOTE_SYMB=162
    DOUBLE_QUOTE_SYMB=163
    REVERSE_QUOTE_SYMB=164
    COLON_SYMB=165
    STRING_LITERAL=166
    DECIMAL_LITERAL=167
    REAL_LITERAL=168
    NULL_SPEC_LITERAL=169
    DOT_ID=170
    ID=171
    REVERSE_QUOTE_ID=172
    STRING_USER_NAME=173
    LOCAL_ID=174
    GLOBAL_ID=175
    ERROR_RECONGNIGION=176

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(evaql_parser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(evaql_parser.SqlStatementsContext,0)


        def MINUSMINUS(self):
            return self.getToken(evaql_parser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = evaql_parser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & ((1 << (evaql_parser.CREATE - 15)) | (1 << (evaql_parser.DELETE - 15)) | (1 << (evaql_parser.DESCRIBE - 15)) | (1 << (evaql_parser.DROP - 15)) | (1 << (evaql_parser.INSERT - 15)) | (1 << (evaql_parser.LOAD - 15)) | (1 << (evaql_parser.RENAME - 15)) | (1 << (evaql_parser.SELECT - 15)) | (1 << (evaql_parser.SHOW - 15)) | (1 << (evaql_parser.UPDATE - 15)) | (1 << (evaql_parser.UPLOAD - 15)))) != 0) or _la==evaql_parser.HELP or _la==evaql_parser.SEMI:
                self.state = 214
                self.sqlStatements()


            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.MINUSMINUS:
                self.state = 217
                self.match(evaql_parser.MINUSMINUS)


            self.state = 220
            self.match(evaql_parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SqlStatementContext,i)


        def emptyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.EmptyStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.EmptyStatementContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.SEMI)
            else:
                return self.getToken(evaql_parser.SEMI, i)

        def MINUSMINUS(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.MINUSMINUS)
            else:
                return self.getToken(evaql_parser.MINUSMINUS, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatements" ):
                return visitor.visitSqlStatements(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatements(self):

        localctx = evaql_parser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 229
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [evaql_parser.CREATE, evaql_parser.DELETE, evaql_parser.DESCRIBE, evaql_parser.DROP, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.RENAME, evaql_parser.SELECT, evaql_parser.SHOW, evaql_parser.UPDATE, evaql_parser.UPLOAD, evaql_parser.HELP]:
                        self.state = 222
                        self.sqlStatement()
                        self.state = 224
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.MINUSMINUS:
                            self.state = 223
                            self.match(evaql_parser.MINUSMINUS)


                        self.state = 226
                        self.match(evaql_parser.SEMI)
                        pass
                    elif token in [evaql_parser.SEMI]:
                        self.state = 228
                        self.emptyStatement()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.CREATE, evaql_parser.DELETE, evaql_parser.DESCRIBE, evaql_parser.DROP, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.RENAME, evaql_parser.SELECT, evaql_parser.SHOW, evaql_parser.UPDATE, evaql_parser.UPLOAD, evaql_parser.HELP]:
                self.state = 234
                self.sqlStatement()
                self.state = 239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.MINUSMINUS:
                        self.state = 235
                        self.match(evaql_parser.MINUSMINUS)


                    self.state = 238
                    self.match(evaql_parser.SEMI)


                pass
            elif token in [evaql_parser.SEMI]:
                self.state = 241
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(evaql_parser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(evaql_parser.DmlStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(evaql_parser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatement" ):
                return visitor.visitSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatement(self):

        localctx = evaql_parser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.CREATE, evaql_parser.DROP, evaql_parser.RENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.ddlStatement()
                pass
            elif token in [evaql_parser.DELETE, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.SELECT, evaql_parser.UPDATE, evaql_parser.UPLOAD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.dmlStatement()
                pass
            elif token in [evaql_parser.DESCRIBE, evaql_parser.SHOW, evaql_parser.HELP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 246
                self.utilityStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(evaql_parser.SEMI, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = evaql_parser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(evaql_parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(evaql_parser.CreateDatabaseContext,0)


        def createTable(self):
            return self.getTypedRuleContext(evaql_parser.CreateTableContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(evaql_parser.CreateIndexContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(evaql_parser.CreateUdfContext,0)


        def createMaterializedView(self):
            return self.getTypedRuleContext(evaql_parser.CreateMaterializedViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(evaql_parser.DropDatabaseContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(evaql_parser.DropTableContext,0)


        def dropUdf(self):
            return self.getTypedRuleContext(evaql_parser.DropUdfContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(evaql_parser.DropIndexContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(evaql_parser.RenameTableContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdlStatement" ):
                return visitor.visitDdlStatement(self)
            else:
                return visitor.visitChildren(self)




    def ddlStatement(self):

        localctx = evaql_parser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.createTable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 253
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 254
                self.createUdf()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 255
                self.createMaterializedView()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 256
                self.dropDatabase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 257
                self.dropTable()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 258
                self.dropUdf()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 259
                self.dropIndex()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 260
                self.renameTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(evaql_parser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(evaql_parser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(evaql_parser.DeleteStatementContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(evaql_parser.LoadStatementContext,0)


        def uploadStatement(self):
            return self.getTypedRuleContext(evaql_parser.UploadStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)




    def dmlStatement(self):

        localctx = evaql_parser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.selectStatement(0)
                pass
            elif token in [evaql_parser.INSERT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.insertStatement()
                pass
            elif token in [evaql_parser.UPDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self.updateStatement()
                pass
            elif token in [evaql_parser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 266
                self.deleteStatement()
                pass
            elif token in [evaql_parser.LOAD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 267
                self.loadStatement()
                pass
            elif token in [evaql_parser.UPLOAD]:
                self.enterOuterAlt(localctx, 6)
                self.state = 268
                self.uploadStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(evaql_parser.SimpleDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(evaql_parser.HelpStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(evaql_parser.ShowStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUtilityStatement" ):
                return visitor.visitUtilityStatement(self)
            else:
                return visitor.visitChildren(self)




    def utilityStatement(self):

        localctx = evaql_parser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_utilityStatement)
        try:
            self.state = 274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.DESCRIBE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 271
                self.simpleDescribeStatement()
                pass
            elif token in [evaql_parser.HELP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 272
                self.helpStatement()
                pass
            elif token in [evaql_parser.SHOW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 273
                self.showStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(evaql_parser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabase" ):
                return visitor.visitCreateDatabase(self)
            else:
                return visitor.visitChildren(self)




    def createDatabase(self):

        localctx = evaql_parser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(evaql_parser.CREATE)
            self.state = 277
            self.match(evaql_parser.DATABASE)
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 278
                self.ifNotExists()


            self.state = 281
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ON(self):
            return self.getToken(evaql_parser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(evaql_parser.IndexTypeContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)




    def createIndex(self):

        localctx = evaql_parser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(evaql_parser.CREATE)
            self.state = 284
            self.match(evaql_parser.INDEX)
            self.state = 285
            self.uid()
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.USING:
                self.state = 286
                self.indexType()


            self.state = 289
            self.match(evaql_parser.ON)
            self.state = 290
            self.tableName()
            self.state = 291
            self.indexColumnNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)
        def TABLE(self):
            return self.getToken(evaql_parser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(evaql_parser.CreateDefinitionsContext,0)

        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnCreateTable" ):
                return visitor.visitColumnCreateTable(self)
            else:
                return visitor.visitChildren(self)



    def createTable(self):

        localctx = evaql_parser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            localctx = evaql_parser.ColumnCreateTableContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(evaql_parser.CREATE)
            self.state = 294
            self.match(evaql_parser.TABLE)
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 295
                self.ifNotExists()


            self.state = 298
            self.tableName()
            self.state = 299
            self.createDefinitions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(evaql_parser.RENAME, 0)

        def TABLE(self):
            return self.getToken(evaql_parser.TABLE, 0)

        def oldtableName(self):
            return self.getTypedRuleContext(evaql_parser.OldtableNameContext,0)


        def TO(self):
            return self.getToken(evaql_parser.TO, 0)

        def newtableName(self):
            return self.getTypedRuleContext(evaql_parser.NewtableNameContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_renameTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)




    def renameTable(self):

        localctx = evaql_parser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_renameTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(evaql_parser.RENAME)
            self.state = 302
            self.match(evaql_parser.TABLE)
            self.state = 303
            self.oldtableName()
            self.state = 304
            self.match(evaql_parser.TO)
            self.state = 305
            self.newtableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def UDF(self):
            return self.getToken(evaql_parser.UDF, 0)

        def udfName(self):
            return self.getTypedRuleContext(evaql_parser.UdfNameContext,0)


        def INPUT(self):
            return self.getToken(evaql_parser.INPUT, 0)

        def createDefinitions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.CreateDefinitionsContext)
            else:
                return self.getTypedRuleContext(evaql_parser.CreateDefinitionsContext,i)


        def OUTPUT(self):
            return self.getToken(evaql_parser.OUTPUT, 0)

        def TYPE(self):
            return self.getToken(evaql_parser.TYPE, 0)

        def udfType(self):
            return self.getTypedRuleContext(evaql_parser.UdfTypeContext,0)


        def IMPL(self):
            return self.getToken(evaql_parser.IMPL, 0)

        def udfImpl(self):
            return self.getTypedRuleContext(evaql_parser.UdfImplContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createUdf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdf" ):
                listener.enterCreateUdf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdf" ):
                listener.exitCreateUdf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUdf" ):
                return visitor.visitCreateUdf(self)
            else:
                return visitor.visitChildren(self)




    def createUdf(self):

        localctx = evaql_parser.CreateUdfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_createUdf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(evaql_parser.CREATE)
            self.state = 308
            self.match(evaql_parser.UDF)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 309
                self.ifNotExists()


            self.state = 312
            self.udfName()
            self.state = 313
            self.match(evaql_parser.INPUT)
            self.state = 314
            self.createDefinitions()
            self.state = 315
            self.match(evaql_parser.OUTPUT)
            self.state = 316
            self.createDefinitions()
            self.state = 317
            self.match(evaql_parser.TYPE)
            self.state = 318
            self.udfType()
            self.state = 319
            self.match(evaql_parser.IMPL)
            self.state = 320
            self.udfImpl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMaterializedViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(evaql_parser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(evaql_parser.VIEW, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createMaterializedView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedView" ):
                listener.enterCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedView" ):
                listener.exitCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedView" ):
                return visitor.visitCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)




    def createMaterializedView(self):

        localctx = evaql_parser.CreateMaterializedViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createMaterializedView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(evaql_parser.CREATE)
            self.state = 323
            self.match(evaql_parser.MATERIALIZED)
            self.state = 324
            self.match(evaql_parser.VIEW)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 325
                self.ifNotExists()


            self.state = 328
            self.tableName()

            self.state = 329
            self.match(evaql_parser.LR_BRACKET)
            self.state = 330
            localctx.columns = self.uidList()
            self.state = 331
            self.match(evaql_parser.RR_BRACKET)
            self.state = 333
            self.match(evaql_parser.AS)
            self.state = 334
            self.selectStatement(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfName" ):
                listener.enterUdfName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfName" ):
                listener.exitUdfName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfName" ):
                return visitor.visitUdfName(self)
            else:
                return visitor.visitChildren(self)




    def udfName(self):

        localctx = evaql_parser.UdfNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_udfName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfType" ):
                listener.enterUdfType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfType" ):
                listener.exitUdfType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfType" ):
                return visitor.visitUdfType(self)
            else:
                return visitor.visitChildren(self)




    def udfType(self):

        localctx = evaql_parser.UdfTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_udfType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfImplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfImpl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfImpl" ):
                listener.enterUdfImpl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfImpl" ):
                listener.exitUdfImpl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfImpl" ):
                return visitor.visitUdfImpl(self)
            else:
                return visitor.visitChildren(self)




    def udfImpl(self):

        localctx = evaql_parser.UdfImplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_udfImpl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(evaql_parser.USING, 0)

        def BTREE(self):
            return self.getToken(evaql_parser.BTREE, 0)

        def HASH(self):
            return self.getToken(evaql_parser.HASH, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexType" ):
                return visitor.visitIndexType(self)
            else:
                return visitor.visitChildren(self)




    def indexType(self):

        localctx = evaql_parser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(evaql_parser.USING)
            self.state = 343
            _la = self._input.LA(1)
            if not(_la==evaql_parser.BTREE or _la==evaql_parser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.CreateDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDefinitions" ):
                return visitor.visitCreateDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def createDefinitions(self):

        localctx = evaql_parser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(evaql_parser.LR_BRACKET)
            self.state = 346
            self.createDefinition()
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 347
                self.match(evaql_parser.COMMA)
                self.state = 348
                self.createDefinition()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 354
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(evaql_parser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDeclaration" ):
                return visitor.visitColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexDeclaration" ):
                return visitor.visitIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def createDefinition(self):

        localctx = evaql_parser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createDefinition)
        try:
            self.state = 360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID]:
                localctx = evaql_parser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 356
                self.uid()
                self.state = 357
                self.columnDefinition()
                pass
            elif token in [evaql_parser.INDEX]:
                localctx = evaql_parser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(evaql_parser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return evaql_parser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = evaql_parser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.dataType()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (evaql_parser.DEFAULT - 17)) | (1 << (evaql_parser.KEY - 17)) | (1 << (evaql_parser.NOT - 17)) | (1 << (evaql_parser.NULL_LITERAL - 17)) | (1 << (evaql_parser.PRIMARY - 17)) | (1 << (evaql_parser.UNIQUE - 17)))) != 0) or _la==evaql_parser.NULL_SPEC_LITERAL:
                self.state = 363
                self.columnConstraint()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(evaql_parser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(evaql_parser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyColumnConstraint" ):
                return visitor.visitPrimaryKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(evaql_parser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(evaql_parser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueKeyColumnConstraint" ):
                return visitor.visitUniqueKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(evaql_parser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullColumnConstraint" ):
                return visitor.visitNullColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(evaql_parser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultColumnConstraint" ):
                return visitor.visitDefaultColumnConstraint(self)
            else:
                return visitor.visitChildren(self)



    def columnConstraint(self):

        localctx = evaql_parser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.NULL_SPEC_LITERAL]:
                localctx = evaql_parser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.nullNotnull()
                pass
            elif token in [evaql_parser.DEFAULT]:
                localctx = evaql_parser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.match(evaql_parser.DEFAULT)
                self.state = 371
                self.defaultValue()
                pass
            elif token in [evaql_parser.KEY, evaql_parser.PRIMARY]:
                localctx = evaql_parser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.PRIMARY:
                    self.state = 372
                    self.match(evaql_parser.PRIMARY)


                self.state = 375
                self.match(evaql_parser.KEY)
                pass
            elif token in [evaql_parser.UNIQUE]:
                localctx = evaql_parser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 376
                self.match(evaql_parser.UNIQUE)
                self.state = 378
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 377
                    self.match(evaql_parser.KEY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnNamesContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(evaql_parser.IndexTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIndexDeclaration" ):
                return visitor.visitSimpleIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def indexColumnDefinition(self):

        localctx = evaql_parser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            localctx = evaql_parser.SimpleIndexDeclarationContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(evaql_parser.INDEX)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                self.state = 383
                self.uid()


            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.USING:
                self.state = 386
                self.indexType()


            self.state = 389
            self.indexColumnNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def DATABASE(self):
            return self.getToken(evaql_parser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(evaql_parser.IfExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabase" ):
                return visitor.visitDropDatabase(self)
            else:
                return visitor.visitChildren(self)




    def dropDatabase(self):

        localctx = evaql_parser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(evaql_parser.DROP)
            self.state = 392
            self.match(evaql_parser.DATABASE)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 393
                self.ifExists()


            self.state = 396
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ON(self):
            return self.getToken(evaql_parser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)




    def dropIndex(self):

        localctx = evaql_parser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_dropIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(evaql_parser.DROP)
            self.state = 399
            self.match(evaql_parser.INDEX)
            self.state = 400
            self.uid()
            self.state = 401
            self.match(evaql_parser.ON)
            self.state = 402
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def TABLE(self):
            return self.getToken(evaql_parser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(evaql_parser.TablesContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(evaql_parser.IfExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)




    def dropTable(self):

        localctx = evaql_parser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(evaql_parser.DROP)
            self.state = 405
            self.match(evaql_parser.TABLE)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 406
                self.ifExists()


            self.state = 409
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUdfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def UDF(self):
            return self.getToken(evaql_parser.UDF, 0)

        def udfName(self):
            return self.getTypedRuleContext(evaql_parser.UdfNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(evaql_parser.IfExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropUdf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUdf" ):
                listener.enterDropUdf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUdf" ):
                listener.exitDropUdf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropUdf" ):
                return visitor.visitDropUdf(self)
            else:
                return visitor.visitChildren(self)




    def dropUdf(self):

        localctx = evaql_parser.DropUdfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_dropUdf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(evaql_parser.DROP)
            self.state = 412
            self.match(evaql_parser.UDF)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 413
                self.ifExists()


            self.state = 416
            self.udfName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(evaql_parser.SingleDeleteStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = evaql_parser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_deleteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.singleDeleteStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def INSERT(self):
            return self.getToken(evaql_parser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(evaql_parser.InsertStatementValueContext,0)


        def INTO(self):
            return self.getToken(evaql_parser.INTO, 0)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = evaql_parser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(evaql_parser.INSERT)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.INTO:
                self.state = 421
                self.match(evaql_parser.INTO)


            self.state = 424
            self.tableName()

            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 425
                self.match(evaql_parser.LR_BRACKET)
                self.state = 426
                localctx.columns = self.uidList()
                self.state = 427
                self.match(evaql_parser.RR_BRACKET)


            self.state = 431
            self.insertStatementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectStatementContext
            super().__init__(parser)
            self.left = None # SelectStatementContext
            self.unionAll = None # Token
            self.right = None # SelectStatementContext
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(evaql_parser.UNION, 0)
        def selectStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SelectStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SelectStatementContext,i)

        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionSelect" ):
                return visitor.visitUnionSelect(self)
            else:
                return visitor.visitChildren(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(evaql_parser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleSelect" ):
                return visitor.visitSimpleSelect(self)
            else:
                return visitor.visitChildren(self)



    def selectStatement(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.SelectStatementContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_selectStatement, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = evaql_parser.SimpleSelectContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 434
            self.querySpecification()
            self._ctx.stop = self._input.LT(-1)
            self.state = 444
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = evaql_parser.UnionSelectContext(self, evaql_parser.SelectStatementContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_selectStatement)
                    self.state = 436
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 437
                    self.match(evaql_parser.UNION)
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.ALL:
                        self.state = 438
                        localctx.unionAll = self.match(evaql_parser.ALL)


                    self.state = 441
                    localctx.right = self.selectStatement(2) 
                self.state = 446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(evaql_parser.SingleUpdateStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateStatement" ):
                return visitor.visitUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def updateStatement(self):

        localctx = evaql_parser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_updateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.singleUpdateStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def LOAD(self):
            return self.getToken(evaql_parser.LOAD, 0)

        def FILE(self):
            return self.getToken(evaql_parser.FILE, 0)

        def fileName(self):
            return self.getTypedRuleContext(evaql_parser.FileNameContext,0)


        def INTO(self):
            return self.getToken(evaql_parser.INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def WITH(self):
            return self.getToken(evaql_parser.WITH, 0)

        def fileOptions(self):
            return self.getTypedRuleContext(evaql_parser.FileOptionsContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadStatement" ):
                return visitor.visitLoadStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadStatement(self):

        localctx = evaql_parser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(evaql_parser.LOAD)
            self.state = 450
            self.match(evaql_parser.FILE)
            self.state = 451
            self.fileName()
            self.state = 452
            self.match(evaql_parser.INTO)
            self.state = 453
            self.tableName()
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 454
                self.match(evaql_parser.LR_BRACKET)
                self.state = 455
                localctx.columns = self.uidList()
                self.state = 456
                self.match(evaql_parser.RR_BRACKET)


            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WITH:
                self.state = 460
                self.match(evaql_parser.WITH)
                self.state = 461
                self.fileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fileFormat = None # Token

        def FORMAT(self):
            return self.getToken(evaql_parser.FORMAT, 0)

        def CSV(self):
            return self.getToken(evaql_parser.CSV, 0)

        def VIDEO(self):
            return self.getToken(evaql_parser.VIDEO, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_fileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileOptions" ):
                listener.enterFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileOptions" ):
                listener.exitFileOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileOptions" ):
                return visitor.visitFileOptions(self)
            else:
                return visitor.visitChildren(self)




    def fileOptions(self):

        localctx = evaql_parser.FileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(evaql_parser.FORMAT)
            self.state = 465
            localctx.fileFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==evaql_parser.CSV or _la==evaql_parser.VIDEO):
                localctx.fileFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UploadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def UPLOAD(self):
            return self.getToken(evaql_parser.UPLOAD, 0)

        def PATH(self):
            return self.getToken(evaql_parser.PATH, 0)

        def fileName(self):
            return self.getTypedRuleContext(evaql_parser.FileNameContext,0)


        def BLOB(self):
            return self.getToken(evaql_parser.BLOB, 0)

        def videoBlob(self):
            return self.getTypedRuleContext(evaql_parser.VideoBlobContext,0)


        def INTO(self):
            return self.getToken(evaql_parser.INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def WITH(self):
            return self.getToken(evaql_parser.WITH, 0)

        def fileOptions(self):
            return self.getTypedRuleContext(evaql_parser.FileOptionsContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_uploadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUploadStatement" ):
                listener.enterUploadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUploadStatement" ):
                listener.exitUploadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUploadStatement" ):
                return visitor.visitUploadStatement(self)
            else:
                return visitor.visitChildren(self)




    def uploadStatement(self):

        localctx = evaql_parser.UploadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_uploadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(evaql_parser.UPLOAD)
            self.state = 468
            self.match(evaql_parser.PATH)
            self.state = 469
            self.fileName()
            self.state = 470
            self.match(evaql_parser.BLOB)
            self.state = 471
            self.videoBlob()
            self.state = 472
            self.match(evaql_parser.INTO)
            self.state = 473
            self.tableName()
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 474
                self.match(evaql_parser.LR_BRACKET)
                self.state = 475
                localctx.columns = self.uidList()
                self.state = 476
                self.match(evaql_parser.RR_BRACKET)


            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WITH:
                self.state = 480
                self.match(evaql_parser.WITH)
                self.state = 481
                self.fileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_fileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileName" ):
                listener.enterFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileName" ):
                listener.exitFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileName" ):
                return visitor.visitFileName(self)
            else:
                return visitor.visitChildren(self)




    def fileName(self):

        localctx = evaql_parser.FileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VideoBlobContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_videoBlob

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVideoBlob" ):
                listener.enterVideoBlob(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVideoBlob" ):
                listener.exitVideoBlob(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVideoBlob" ):
                return visitor.visitVideoBlob(self)
            else:
                return visitor.visitChildren(self)




    def videoBlob(self):

        localctx = evaql_parser.VideoBlobContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_videoBlob)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.LR_BRACKET)
            else:
                return self.getToken(evaql_parser.LR_BRACKET, i)

        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionsWithDefaultsContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.RR_BRACKET)
            else:
                return self.getToken(evaql_parser.RR_BRACKET, i)

        def VALUES(self):
            return self.getToken(evaql_parser.VALUES, 0)

        def VALUE(self):
            return self.getToken(evaql_parser.VALUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatementValue" ):
                return visitor.visitInsertStatementValue(self)
            else:
                return visitor.visitChildren(self)




    def insertStatementValue(self):

        localctx = evaql_parser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                self.selectStatement(0)
                pass
            elif token in [evaql_parser.VALUES, evaql_parser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 489
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.VALUES or _la==evaql_parser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 490
                self.match(evaql_parser.LR_BRACKET)
                self.state = 491
                self.expressionsWithDefaults()
                self.state = 492
                self.match(evaql_parser.RR_BRACKET)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 493
                    self.match(evaql_parser.COMMA)
                    self.state = 494
                    self.match(evaql_parser.LR_BRACKET)
                    self.state = 495
                    self.expressionsWithDefaults()
                    self.state = 496
                    self.match(evaql_parser.RR_BRACKET)
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(evaql_parser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdatedElement" ):
                return visitor.visitUpdatedElement(self)
            else:
                return visitor.visitChildren(self)




    def updatedElement(self):

        localctx = evaql_parser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.fullColumnName()
            self.state = 506
            self.match(evaql_parser.EQUAL_SYMBOL)
            self.state = 509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.state = 507
                self.expression(0)
                pass
            elif token in [evaql_parser.DEFAULT]:
                self.state = 508
                self.match(evaql_parser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(evaql_parser.DELETE, 0)

        def FROM(self):
            return self.getToken(evaql_parser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(evaql_parser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDeleteStatement" ):
                return visitor.visitSingleDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleDeleteStatement(self):

        localctx = evaql_parser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(evaql_parser.DELETE)
            self.state = 512
            self.match(evaql_parser.FROM)
            self.state = 513
            self.tableName()
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WHERE:
                self.state = 514
                self.match(evaql_parser.WHERE)
                self.state = 515
                self.expression(0)


            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ORDER:
                self.state = 518
                self.orderByClause()


            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LIMIT:
                self.state = 521
                self.match(evaql_parser.LIMIT)
                self.state = 522
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(evaql_parser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def SET(self):
            return self.getToken(evaql_parser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UpdatedElementContext,i)


        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(evaql_parser.LimitClauseContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleUpdateStatement" ):
                return visitor.visitSingleUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleUpdateStatement(self):

        localctx = evaql_parser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(evaql_parser.UPDATE)
            self.state = 526
            self.tableName()
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS:
                    self.state = 527
                    self.match(evaql_parser.AS)


                self.state = 530
                self.uid()


            self.state = 533
            self.match(evaql_parser.SET)
            self.state = 534
            self.updatedElement()
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 535
                self.match(evaql_parser.COMMA)
                self.state = 536
                self.updatedElement()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WHERE:
                self.state = 542
                self.match(evaql_parser.WHERE)
                self.state = 543
                self.expression(0)


            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ORDER:
                self.state = 546
                self.orderByClause()


            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LIMIT:
                self.state = 549
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(evaql_parser.ORDER, 0)

        def BY(self):
            return self.getToken(evaql_parser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.OrderByExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = evaql_parser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(evaql_parser.ORDER)
            self.state = 553
            self.match(evaql_parser.BY)
            self.state = 554
            self.orderByExpression()
            self.state = 559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 555
                    self.match(evaql_parser.COMMA)
                    self.state = 556
                    self.orderByExpression() 
                self.state = 561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByExpression" ):
                return visitor.visitOrderByExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderByExpression(self):

        localctx = evaql_parser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.expression(0)
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 563
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSources" ):
                return visitor.visitTableSources(self)
            else:
                return visitor.visitChildren(self)




    def tableSources(self):

        localctx = evaql_parser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tableSources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.tableSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItemWithSample(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemWithSampleContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.JoinPartContext)
            else:
                return self.getTypedRuleContext(evaql_parser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourceBase" ):
                return visitor.visitTableSourceBase(self)
            else:
                return visitor.visitChildren(self)



    def tableSource(self):

        localctx = evaql_parser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tableSource)
        try:
            localctx = evaql_parser.TableSourceBaseContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.tableSourceItemWithSample()
            self.state = 572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 569
                    self.joinPart() 
                self.state = 574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemWithSampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSourceItem(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemContext,0)


        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def sampleClause(self):
            return self.getTypedRuleContext(evaql_parser.SampleClauseContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_tableSourceItemWithSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceItemWithSample" ):
                listener.enterTableSourceItemWithSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceItemWithSample" ):
                listener.exitTableSourceItemWithSample(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourceItemWithSample" ):
                return visitor.visitTableSourceItemWithSample(self)
            else:
                return visitor.visitChildren(self)




    def tableSourceItemWithSample(self):

        localctx = evaql_parser.TableSourceItemWithSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tableSourceItemWithSample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.tableSourceItem()
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS:
                    self.state = 576
                    self.match(evaql_parser.AS)


                self.state = 579
                self.uid()


            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 582
                self.sampleClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subqueryTableSourceItem(self):
            return self.getTypedRuleContext(evaql_parser.SubqueryTableSourceItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryTableItem" ):
                return visitor.visitSubqueryTableItem(self)
            else:
                return visitor.visitChildren(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomTableItem" ):
                return visitor.visitAtomTableItem(self)
            else:
                return visitor.visitChildren(self)



    def tableSourceItem(self):

        localctx = evaql_parser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_tableSourceItem)
        try:
            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID]:
                localctx = evaql_parser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 585
                self.tableName()
                pass
            elif token in [evaql_parser.SELECT, evaql_parser.LR_BRACKET]:
                localctx = evaql_parser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.subqueryTableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableValuedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)


        def UNNEST(self):
            return self.getToken(evaql_parser.UNNEST, 0)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_tableValuedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)




    def tableValuedFunction(self):

        localctx = evaql_parser.TableValuedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_tableValuedFunction)
        try:
            self.state = 595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 589
                self.functionCall()
                pass
            elif token in [evaql_parser.UNNEST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 590
                self.match(evaql_parser.UNNEST)
                self.state = 591
                self.match(evaql_parser.LR_BRACKET)
                self.state = 592
                self.functionCall()
                self.state = 593
                self.match(evaql_parser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryTableSourceItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_subqueryTableSourceItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableSourceItem" ):
                listener.enterSubqueryTableSourceItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableSourceItem" ):
                listener.exitSubqueryTableSourceItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryTableSourceItem" ):
                return visitor.visitSubqueryTableSourceItem(self)
            else:
                return visitor.visitChildren(self)




    def subqueryTableSourceItem(self):

        localctx = evaql_parser.SubqueryTableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_subqueryTableSourceItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.SELECT]:
                self.state = 597
                self.selectStatement(0)
                pass
            elif token in [evaql_parser.LR_BRACKET]:
                self.state = 598
                self.match(evaql_parser.LR_BRACKET)
                self.state = 599
                self.selectStatement(0)
                self.state = 600
                self.match(evaql_parser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(evaql_parser.SAMPLE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_sampleClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleClause" ):
                listener.enterSampleClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleClause" ):
                listener.exitSampleClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = evaql_parser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(evaql_parser.SAMPLE)
            self.state = 605
            self.decimalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(evaql_parser.JOIN, 0)
        def tableSourceItemWithSample(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemWithSampleContext,0)

        def ON(self):
            return self.getToken(evaql_parser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def USING(self):
            return self.getToken(evaql_parser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerJoin" ):
                return visitor.visitInnerJoin(self)
            else:
                return visitor.visitChildren(self)


    class LateralJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(evaql_parser.JOIN, 0)
        def LATERAL(self):
            return self.getToken(evaql_parser.LATERAL, 0)
        def tableValuedFunction(self):
            return self.getTypedRuleContext(evaql_parser.TableValuedFunctionContext,0)

        def aliasClause(self):
            return self.getTypedRuleContext(evaql_parser.AliasClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralJoin" ):
                listener.enterLateralJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralJoin" ):
                listener.exitLateralJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralJoin" ):
                return visitor.visitLateralJoin(self)
            else:
                return visitor.visitChildren(self)



    def joinPart(self):

        localctx = evaql_parser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_joinPart)
        try:
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.match(evaql_parser.JOIN)
                self.state = 608
                self.tableSourceItemWithSample()
                self.state = 616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 609
                    self.match(evaql_parser.ON)
                    self.state = 610
                    self.expression(0)

                elif la_ == 2:
                    self.state = 611
                    self.match(evaql_parser.USING)
                    self.state = 612
                    self.match(evaql_parser.LR_BRACKET)
                    self.state = 613
                    self.uidList()
                    self.state = 614
                    self.match(evaql_parser.RR_BRACKET)


                pass

            elif la_ == 2:
                localctx = evaql_parser.LateralJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.match(evaql_parser.JOIN)
                self.state = 619
                self.match(evaql_parser.LATERAL)
                self.state = 620
                self.tableValuedFunction()
                self.state = 622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 621
                    self.aliasClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_aliasClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasClause" ):
                listener.enterAliasClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasClause" ):
                listener.exitAliasClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasClause" ):
                return visitor.visitAliasClause(self)
            else:
                return visitor.visitChildren(self)




    def aliasClause(self):

        localctx = evaql_parser.AliasClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_aliasClause)
        self._la = 0 # Token type
        try:
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS:
                    self.state = 626
                    self.match(evaql_parser.AS)


                self.state = 629
                self.uid()
                self.state = 630
                self.match(evaql_parser.LR_BRACKET)
                self.state = 631
                self.uidList()
                self.state = 632
                self.match(evaql_parser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS:
                    self.state = 634
                    self.match(evaql_parser.AS)


                self.state = 637
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(evaql_parser.QuerySpecificationContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(evaql_parser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpression" ):
                return visitor.visitQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def queryExpression(self):

        localctx = evaql_parser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_queryExpression)
        try:
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.match(evaql_parser.LR_BRACKET)
                self.state = 641
                self.querySpecification()
                self.state = 642
                self.match(evaql_parser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 644
                self.match(evaql_parser.LR_BRACKET)
                self.state = 645
                self.queryExpression()
                self.state = 646
                self.match(evaql_parser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(evaql_parser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(evaql_parser.SelectElementsContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(evaql_parser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(evaql_parser.LimitClauseContext,0)


        def errorBoundsExpression(self):
            return self.getTypedRuleContext(evaql_parser.ErrorBoundsExpressionContext,0)


        def confidenceLevelExpression(self):
            return self.getTypedRuleContext(evaql_parser.ConfidenceLevelExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = evaql_parser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(evaql_parser.SELECT)
            self.state = 651
            self.selectElements()
            self.state = 652
            self.fromClause()
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 653
                self.orderByClause()


            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 656
                self.limitClause()


            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 659
                self.errorBoundsExpression()


            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 662
                self.confidenceLevelExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SelectElementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectElements" ):
                return visitor.visitSelectElements(self)
            else:
                return visitor.visitChildren(self)




    def selectElements(self):

        localctx = evaql_parser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.STAR]:
                self.state = 665
                localctx.star = self.match(evaql_parser.STAR)
                pass
            elif token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.state = 666
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 669
                self.match(evaql_parser.COMMA)
                self.state = 670
                self.selectElement()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(evaql_parser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(evaql_parser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpressionElement" ):
                return visitor.visitSelectExpressionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectFunctionElement" ):
                return visitor.visitSelectFunctionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)
        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStarElement" ):
                return visitor.visitSelectStarElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectColumnElement" ):
                return visitor.visitSelectColumnElement(self)
            else:
                return visitor.visitChildren(self)



    def selectElement(self):

        localctx = evaql_parser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 676
                self.fullId()
                self.state = 677
                self.match(evaql_parser.DOT)
                self.state = 678
                self.match(evaql_parser.STAR)
                pass

            elif la_ == 2:
                localctx = evaql_parser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.fullColumnName()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 681
                        self.match(evaql_parser.AS)


                    self.state = 684
                    self.uid()


                pass

            elif la_ == 3:
                localctx = evaql_parser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 687
                self.functionCall()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 688
                        self.match(evaql_parser.AS)


                    self.state = 691
                    self.uid()


                pass

            elif la_ == 4:
                localctx = evaql_parser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 696
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 694
                    self.match(evaql_parser.LOCAL_ID)
                    self.state = 695
                    self.match(evaql_parser.VAR_ASSIGN)


                self.state = 698
                self.expression(0)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 699
                        self.match(evaql_parser.AS)


                    self.state = 702
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext
            self.havingExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(evaql_parser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(evaql_parser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def GROUP(self):
            return self.getToken(evaql_parser.GROUP, 0)

        def BY(self):
            return self.getToken(evaql_parser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(evaql_parser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(evaql_parser.HAVING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = evaql_parser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(evaql_parser.FROM)
            self.state = 708
            self.tableSources()
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 709
                self.match(evaql_parser.WHERE)
                self.state = 710
                localctx.whereExpr = self.expression(0)


            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 713
                self.match(evaql_parser.GROUP)
                self.state = 714
                self.match(evaql_parser.BY)
                self.state = 715
                self.groupByItem()
                self.state = 720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 716
                        self.match(evaql_parser.COMMA)
                        self.state = 717
                        self.groupByItem() 
                    self.state = 722
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)



            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 725
                self.match(evaql_parser.HAVING)
                self.state = 726
                localctx.havingExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByItem" ):
                return visitor.visitGroupByItem(self)
            else:
                return visitor.visitChildren(self)




    def groupByItem(self):

        localctx = evaql_parser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.expression(0)
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 730
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # DecimalLiteralContext
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(evaql_parser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(evaql_parser.OFFSET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(evaql_parser.COMMA, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = evaql_parser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(evaql_parser.LIMIT)
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 734
                    localctx.offset = self.decimalLiteral()
                    self.state = 735
                    self.match(evaql_parser.COMMA)


                self.state = 739
                localctx.limit = self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 740
                localctx.limit = self.decimalLiteral()
                self.state = 741
                self.match(evaql_parser.OFFSET)
                self.state = 742
                localctx.offset = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorBoundsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_BOUNDS(self):
            return self.getToken(evaql_parser.ERROR_BOUNDS, 0)

        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_errorBoundsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorBoundsExpression" ):
                listener.enterErrorBoundsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorBoundsExpression" ):
                listener.exitErrorBoundsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorBoundsExpression" ):
                return visitor.visitErrorBoundsExpression(self)
            else:
                return visitor.visitChildren(self)




    def errorBoundsExpression(self):

        localctx = evaql_parser.ErrorBoundsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_errorBoundsExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(evaql_parser.ERROR_BOUNDS)
            self.state = 747
            self.match(evaql_parser.REAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfidenceLevelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIDENCE_LEVEL(self):
            return self.getToken(evaql_parser.CONFIDENCE_LEVEL, 0)

        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_confidenceLevelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfidenceLevelExpression" ):
                listener.enterConfidenceLevelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfidenceLevelExpression" ):
                listener.exitConfidenceLevelExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfidenceLevelExpression" ):
                return visitor.visitConfidenceLevelExpression(self)
            else:
                return visitor.visitChildren(self)




    def confidenceLevelExpression(self):

        localctx = evaql_parser.ConfidenceLevelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_confidenceLevelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(evaql_parser.CONFIDENCE_LEVEL)
            self.state = 750
            self.match(evaql_parser.REAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(evaql_parser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShutdownStatement" ):
                return visitor.visitShutdownStatement(self)
            else:
                return visitor.visitChildren(self)




    def shutdownStatement(self):

        localctx = evaql_parser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(evaql_parser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIBE(self):
            return self.getToken(evaql_parser.DESCRIBE, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDescribeStatement" ):
                return visitor.visitSimpleDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleDescribeStatement(self):

        localctx = evaql_parser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_simpleDescribeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(evaql_parser.DESCRIBE)
            self.state = 755
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(evaql_parser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHelpStatement" ):
                return visitor.visitHelpStatement(self)
            else:
                return visitor.visitChildren(self)




    def helpStatement(self):

        localctx = evaql_parser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(evaql_parser.HELP)
            self.state = 758
            self.match(evaql_parser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(evaql_parser.SHOW, 0)

        def UDFS(self):
            return self.getToken(evaql_parser.UDFS, 0)

        def TABLES(self):
            return self.getToken(evaql_parser.TABLES, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_showStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatement" ):
                listener.enterShowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatement" ):
                listener.exitShowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatement" ):
                return visitor.visitShowStatement(self)
            else:
                return visitor.visitChildren(self)




    def showStatement(self):

        localctx = evaql_parser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(evaql_parser.SHOW)
            self.state = 761
            _la = self._input.LA(1)
            if not(_la==evaql_parser.TABLES or _la==evaql_parser.UDFS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UidContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(evaql_parser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullId" ):
                return visitor.visitFullId(self)
            else:
                return visitor.visitChildren(self)




    def fullId(self):

        localctx = evaql_parser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.uid()
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 764
                self.match(evaql_parser.DOT_ID)

            elif la_ == 2:
                self.state = 765
                self.match(evaql_parser.DOT)
                self.state = 766
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)




    def tableName(self):

        localctx = evaql_parser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OldtableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_oldtableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOldtableName" ):
                listener.enterOldtableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOldtableName" ):
                listener.exitOldtableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOldtableName" ):
                return visitor.visitOldtableName(self)
            else:
                return visitor.visitChildren(self)




    def oldtableName(self):

        localctx = evaql_parser.OldtableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oldtableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_newtableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtableName" ):
                listener.enterNewtableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtableName" ):
                listener.exitNewtableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewtableName" ):
                return visitor.visitNewtableName(self)
            else:
                return visitor.visitChildren(self)




    def newtableName(self):

        localctx = evaql_parser.NewtableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_newtableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DottedIdContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DottedIdContext,i)


        def getRuleIndex(self):
            return evaql_parser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnName" ):
                return visitor.visitFullColumnName(self)
            else:
                return visitor.visitChildren(self)




    def fullColumnName(self):

        localctx = evaql_parser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.uid()
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 776
                self.dottedId()
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 777
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnName" ):
                return visitor.visitIndexColumnName(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnName(self):

        localctx = evaql_parser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.uid()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 783
                self.match(evaql_parser.LR_BRACKET)
                self.state = 784
                self.decimalLiteral()
                self.state = 785
                self.match(evaql_parser.RR_BRACKET)


            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ASC or _la==evaql_parser.DESC:
                self.state = 789
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(evaql_parser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(evaql_parser.ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserName" ):
                return visitor.visitUserName(self)
            else:
                return visitor.visitChildren(self)




    def userName(self):

        localctx = evaql_parser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_userName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            _la = self._input.LA(1)
            if not(_la==evaql_parser.ID or _la==evaql_parser.STRING_USER_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.MINUS)
            else:
                return self.getToken(evaql_parser.MINUS, i)

        def COLON_SYMB(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COLON_SYMB)
            else:
                return self.getToken(evaql_parser.COLON_SYMB, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUuidSet" ):
                return visitor.visitUuidSet(self)
            else:
                return visitor.visitChildren(self)




    def uuidSet(self):

        localctx = evaql_parser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.decimalLiteral()
            self.state = 795
            self.match(evaql_parser.MINUS)
            self.state = 796
            self.decimalLiteral()
            self.state = 797
            self.match(evaql_parser.MINUS)
            self.state = 798
            self.decimalLiteral()
            self.state = 799
            self.match(evaql_parser.MINUS)
            self.state = 800
            self.decimalLiteral()
            self.state = 801
            self.match(evaql_parser.MINUS)
            self.state = 802
            self.decimalLiteral()
            self.state = 808 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 803
                self.match(evaql_parser.COLON_SYMB)
                self.state = 804
                self.decimalLiteral()
                self.state = 805
                self.match(evaql_parser.MINUS)
                self.state = 806
                self.decimalLiteral()
                self.state = 810 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==evaql_parser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(evaql_parser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(evaql_parser.REVERSE_QUOTE_ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUid" ):
                return visitor.visitUid(self)
            else:
                return visitor.visitChildren(self)




    def uid(self):

        localctx = evaql_parser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_uid)
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.simpleId()
                pass
            elif token in [evaql_parser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.match(evaql_parser.REVERSE_QUOTE_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(evaql_parser.ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleId" ):
                return visitor.visitSimpleId(self)
            else:
                return visitor.visitChildren(self)




    def simpleId(self):

        localctx = evaql_parser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_simpleId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(evaql_parser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(evaql_parser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDottedId" ):
                return visitor.visitDottedId(self)
            else:
                return visitor.visitChildren(self)




    def dottedId(self):

        localctx = evaql_parser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dottedId)
        try:
            self.state = 821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.match(evaql_parser.DOT_ID)
                pass
            elif token in [evaql_parser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.match(evaql_parser.DOT)
                self.state = 820
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(evaql_parser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(evaql_parser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(evaql_parser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(evaql_parser.TWO_DECIMAL, 0)

        def ANYDIM(self):
            return self.getToken(evaql_parser.ANYDIM, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteral(self):

        localctx = evaql_parser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            _la = self._input.LA(1)
            if not(_la==evaql_parser.ANYDIM or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (evaql_parser.ZERO_DECIMAL - 159)) | (1 << (evaql_parser.ONE_DECIMAL - 159)) | (1 << (evaql_parser.TWO_DECIMAL - 159)) | (1 << (evaql_parser.DECIMAL_LITERAL - 159)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = evaql_parser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(evaql_parser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(evaql_parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(evaql_parser.FALSE, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = evaql_parser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            _la = self._input.LA(1)
            if not(_la==evaql_parser.FALSE or _la==evaql_parser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(evaql_parser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullNotnull" ):
                return visitor.visitNullNotnull(self)
            else:
                return visitor.visitChildren(self)




    def nullNotnull(self):

        localctx = evaql_parser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.NOT:
                self.state = 829
                self.match(evaql_parser.NOT)


            self.state = 832
            _la = self._input.LA(1)
            if not(_la==evaql_parser.NULL_LITERAL or _la==evaql_parser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_SQ_BRACKET(self):
            return self.getToken(evaql_parser.LR_SQ_BRACKET, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ConstantContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ConstantContext,i)


        def RR_SQ_BRACKET(self):
            return self.getToken(evaql_parser.RR_SQ_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = evaql_parser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 834
                self.match(evaql_parser.LR_SQ_BRACKET)
                self.state = 835
                self.constant()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 836
                    self.match(evaql_parser.COMMA)
                    self.state = 837
                    self.constant()
                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 843
                self.match(evaql_parser.RR_SQ_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.match(evaql_parser.LR_SQ_BRACKET)
                self.state = 846
                self.match(evaql_parser.RR_SQ_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(evaql_parser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(evaql_parser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def arrayLiteral(self):
            return self.getTypedRuleContext(evaql_parser.ArrayLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = evaql_parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 849
                self.stringLiteral()
                pass
            elif token in [evaql_parser.ANYDIM, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 850
                self.decimalLiteral()
                pass
            elif token in [evaql_parser.MINUS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 851
                self.match(evaql_parser.MINUS)
                self.state = 852
                self.decimalLiteral()
                pass
            elif token in [evaql_parser.FALSE, evaql_parser.TRUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 853
                self.booleanLiteral()
                pass
            elif token in [evaql_parser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 854
                self.match(evaql_parser.REAL_LITERAL)
                pass
            elif token in [evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.NULL_SPEC_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.NOT:
                    self.state = 855
                    self.match(evaql_parser.NOT)


                self.state = 858
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.NULL_LITERAL or _la==evaql_parser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [evaql_parser.LR_SQ_BRACKET]:
                self.enterOuterAlt(localctx, 7)
                self.state = 859
                self.arrayLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT8(self):
            return self.getToken(evaql_parser.INT8, 0)

        def UINT8(self):
            return self.getToken(evaql_parser.UINT8, 0)

        def INT16(self):
            return self.getToken(evaql_parser.INT16, 0)

        def INT32(self):
            return self.getToken(evaql_parser.INT32, 0)

        def INT64(self):
            return self.getToken(evaql_parser.INT64, 0)

        def UNICODE(self):
            return self.getToken(evaql_parser.UNICODE, 0)

        def BOOL(self):
            return self.getToken(evaql_parser.BOOL, 0)

        def FLOAT32(self):
            return self.getToken(evaql_parser.FLOAT32, 0)

        def FLOAT64(self):
            return self.getToken(evaql_parser.FLOAT64, 0)

        def DECIMAL(self):
            return self.getToken(evaql_parser.DECIMAL, 0)

        def STR(self):
            return self.getToken(evaql_parser.STR, 0)

        def DATETIME(self):
            return self.getToken(evaql_parser.DATETIME, 0)

        def ANYTYPE(self):
            return self.getToken(evaql_parser.ANYTYPE, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = evaql_parser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_arrayType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (evaql_parser.INT8 - 93)) | (1 << (evaql_parser.UINT8 - 93)) | (1 << (evaql_parser.INT16 - 93)) | (1 << (evaql_parser.INT32 - 93)) | (1 << (evaql_parser.INT64 - 93)) | (1 << (evaql_parser.UNICODE - 93)) | (1 << (evaql_parser.BOOL - 93)) | (1 << (evaql_parser.FLOAT32 - 93)) | (1 << (evaql_parser.FLOAT64 - 93)) | (1 << (evaql_parser.DECIMAL - 93)) | (1 << (evaql_parser.STR - 93)) | (1 << (evaql_parser.DATETIME - 93)) | (1 << (evaql_parser.ANYTYPE - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntegerDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER(self):
            return self.getToken(evaql_parser.INTEGER, 0)
        def UNSIGNED(self):
            return self.getToken(evaql_parser.UNSIGNED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerDataType" ):
                listener.enterIntegerDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerDataType" ):
                listener.exitIntegerDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerDataType" ):
                return visitor.visitIntegerDataType(self)
            else:
                return visitor.visitChildren(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(evaql_parser.TEXT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(evaql_parser.LengthOneDimensionContext,0)

        def FLOAT(self):
            return self.getToken(evaql_parser.FLOAT, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(evaql_parser.LengthTwoDimensionContext,0)

        def UNSIGNED(self):
            return self.getToken(evaql_parser.UNSIGNED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimensionDataType" ):
                return visitor.visitDimensionDataType(self)
            else:
                return visitor.visitChildren(self)


    class AnyDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANYTYPE(self):
            return self.getToken(evaql_parser.ANYTYPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyDataType" ):
                listener.enterAnyDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyDataType" ):
                listener.exitAnyDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyDataType" ):
                return visitor.visitAnyDataType(self)
            else:
                return visitor.visitChildren(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN(self):
            return self.getToken(evaql_parser.BOOLEAN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDataType" ):
                return visitor.visitSimpleDataType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NDARRAY(self):
            return self.getToken(evaql_parser.NDARRAY, 0)
        def arrayType(self):
            return self.getTypedRuleContext(evaql_parser.ArrayTypeContext,0)

        def lengthDimensionList(self):
            return self.getTypedRuleContext(evaql_parser.LengthDimensionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDataType" ):
                listener.enterArrayDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDataType" ):
                listener.exitArrayDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDataType" ):
                return visitor.visitArrayDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = evaql_parser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.BOOLEAN]:
                localctx = evaql_parser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(evaql_parser.BOOLEAN)
                pass
            elif token in [evaql_parser.TEXT]:
                localctx = evaql_parser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.match(evaql_parser.TEXT)
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 866
                    self.lengthOneDimension()


                pass
            elif token in [evaql_parser.INTEGER]:
                localctx = evaql_parser.IntegerDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 869
                self.match(evaql_parser.INTEGER)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.UNSIGNED:
                    self.state = 870
                    self.match(evaql_parser.UNSIGNED)


                pass
            elif token in [evaql_parser.FLOAT]:
                localctx = evaql_parser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 873
                self.match(evaql_parser.FLOAT)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 874
                    self.lengthTwoDimension()


                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.UNSIGNED:
                    self.state = 877
                    self.match(evaql_parser.UNSIGNED)


                pass
            elif token in [evaql_parser.NDARRAY]:
                localctx = evaql_parser.ArrayDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 880
                self.match(evaql_parser.NDARRAY)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (evaql_parser.INT8 - 93)) | (1 << (evaql_parser.UINT8 - 93)) | (1 << (evaql_parser.INT16 - 93)) | (1 << (evaql_parser.INT32 - 93)) | (1 << (evaql_parser.INT64 - 93)) | (1 << (evaql_parser.UNICODE - 93)) | (1 << (evaql_parser.BOOL - 93)) | (1 << (evaql_parser.FLOAT32 - 93)) | (1 << (evaql_parser.FLOAT64 - 93)) | (1 << (evaql_parser.DECIMAL - 93)) | (1 << (evaql_parser.STR - 93)) | (1 << (evaql_parser.DATETIME - 93)) | (1 << (evaql_parser.ANYTYPE - 93)))) != 0):
                    self.state = 881
                    self.arrayType()


                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 884
                    self.lengthDimensionList()


                pass
            elif token in [evaql_parser.ANYTYPE]:
                localctx = evaql_parser.AnyDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 887
                self.match(evaql_parser.ANYTYPE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthOneDimension" ):
                return visitor.visitLengthOneDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthOneDimension(self):

        localctx = evaql_parser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(evaql_parser.LR_BRACKET)
            self.state = 891
            self.decimalLiteral()
            self.state = 892
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(evaql_parser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthTwoDimension" ):
                return visitor.visitLengthTwoDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthTwoDimension(self):

        localctx = evaql_parser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(evaql_parser.LR_BRACKET)
            self.state = 895
            self.decimalLiteral()
            self.state = 896
            self.match(evaql_parser.COMMA)
            self.state = 897
            self.decimalLiteral()
            self.state = 898
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthDimensionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthDimensionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthDimensionList" ):
                listener.enterLengthDimensionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthDimensionList" ):
                listener.exitLengthDimensionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthDimensionList" ):
                return visitor.visitLengthDimensionList(self)
            else:
                return visitor.visitChildren(self)




    def lengthDimensionList(self):

        localctx = evaql_parser.LengthDimensionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_lengthDimensionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(evaql_parser.LR_BRACKET)
            self.state = 906
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 901
                    self.decimalLiteral()
                    self.state = 902
                    self.match(evaql_parser.COMMA) 
                self.state = 908
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

            self.state = 909
            self.decimalLiteral()
            self.state = 910
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UidContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUidList" ):
                return visitor.visitUidList(self)
            else:
                return visitor.visitChildren(self)




    def uidList(self):

        localctx = evaql_parser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_uidList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.uid()
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 913
                self.match(evaql_parser.COMMA)
                self.state = 914
                self.uid()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.TableNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.TableNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTables" ):
                return visitor.visitTables(self)
            else:
                return visitor.visitChildren(self)




    def tables(self):

        localctx = evaql_parser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.tableName()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 921
                self.match(evaql_parser.COMMA)
                self.state = 922
                self.tableName()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.IndexColumnNameContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnNames" ):
                return visitor.visitIndexColumnNames(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnNames(self):

        localctx = evaql_parser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(evaql_parser.LR_BRACKET)
            self.state = 929
            self.indexColumnName()
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 930
                self.match(evaql_parser.COMMA)
                self.state = 931
                self.indexColumnName()
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 937
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = evaql_parser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.expression(0)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 940
                self.match(evaql_parser.COMMA)
                self.state = 941
                self.expression(0)
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionOrDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionsWithDefaults" ):
                return visitor.visitExpressionsWithDefaults(self)
            else:
                return visitor.visitChildren(self)




    def expressionsWithDefaults(self):

        localctx = evaql_parser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.expressionOrDefault()
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 948
                self.match(evaql_parser.COMMA)
                self.state = 949
                self.expressionOrDefault()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = evaql_parser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_defaultValue)
        try:
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.match(evaql_parser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionOrDefault" ):
                return visitor.visitExpressionOrDefault(self)
            else:
                return visitor.visitChildren(self)




    def expressionOrDefault(self):

        localctx = evaql_parser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_expressionOrDefault)
        try:
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 959
                self.expression(0)
                pass
            elif token in [evaql_parser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.match(evaql_parser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(evaql_parser.IF, 0)

        def EXISTS(self):
            return self.getToken(evaql_parser.EXISTS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExists" ):
                return visitor.visitIfExists(self)
            else:
                return visitor.visitChildren(self)




    def ifExists(self):

        localctx = evaql_parser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(evaql_parser.IF)
            self.state = 964
            self.match(evaql_parser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(evaql_parser.IF, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(evaql_parser.EXISTS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNotExists" ):
                return visitor.visitIfNotExists(self)
            else:
                return visitor.visitChildren(self)




    def ifNotExists(self):

        localctx = evaql_parser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(evaql_parser.IF)
            self.state = 967
            self.match(evaql_parser.NOT)
            self.state = 968
            self.match(evaql_parser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def udfFunction(self):
            return self.getTypedRuleContext(evaql_parser.UdfFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfFunctionCall" ):
                return visitor.visitUdfFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(evaql_parser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateFunctionCall" ):
                return visitor.visitAggregateFunctionCall(self)
            else:
                return visitor.visitChildren(self)



    def functionCall(self):

        localctx = evaql_parser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_functionCall)
        try:
            self.state = 972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID]:
                localctx = evaql_parser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.udfFunction()
                pass
            elif token in [evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM]:
                localctx = evaql_parser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.aggregateWindowedFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(evaql_parser.SimpleIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(evaql_parser.FunctionArgsContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def dottedId(self):
            return self.getTypedRuleContext(evaql_parser.DottedIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunction" ):
                listener.enterUdfFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunction" ):
                listener.exitUdfFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfFunction" ):
                return visitor.visitUdfFunction(self)
            else:
                return visitor.visitChildren(self)




    def udfFunction(self):

        localctx = evaql_parser.UdfFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_udfFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.simpleId()
            self.state = 975
            self.match(evaql_parser.LR_BRACKET)
            self.state = 976
            self.functionArgs()
            self.state = 977
            self.match(evaql_parser.RR_BRACKET)
            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 978
                self.dottedId()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(evaql_parser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(evaql_parser.AVG, 0)

        def MAX(self):
            return self.getToken(evaql_parser.MAX, 0)

        def MIN(self):
            return self.getToken(evaql_parser.MIN, 0)

        def SUM(self):
            return self.getToken(evaql_parser.SUM, 0)

        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(evaql_parser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(evaql_parser.COUNT, 0)

        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateWindowedFunction" ):
                return visitor.visitAggregateWindowedFunction(self)
            else:
                return visitor.visitChildren(self)




    def aggregateWindowedFunction(self):

        localctx = evaql_parser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.AVG, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                _la = self._input.LA(1)
                if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (evaql_parser.AVG - 106)) | (1 << (evaql_parser.MAX - 106)) | (1 << (evaql_parser.MIN - 106)) | (1 << (evaql_parser.SUM - 106)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 982
                self.match(evaql_parser.LR_BRACKET)
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.ALL or _la==evaql_parser.DISTINCT:
                    self.state = 983
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==evaql_parser.ALL or _la==evaql_parser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 986
                self.functionArg()
                self.state = 987
                self.match(evaql_parser.RR_BRACKET)
                pass
            elif token in [evaql_parser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 989
                self.match(evaql_parser.COUNT)
                self.state = 990
                self.match(evaql_parser.LR_BRACKET)
                self.state = 996
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [evaql_parser.STAR]:
                    self.state = 991
                    localctx.starArg = self.match(evaql_parser.STAR)
                    pass
                elif token in [evaql_parser.ALL, evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                    self.state = 993
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.ALL:
                        self.state = 992
                        localctx.aggregator = self.match(evaql_parser.ALL)


                    self.state = 995
                    self.functionArg()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 998
                self.match(evaql_parser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ConstantContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(evaql_parser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgs" ):
                return visitor.visitFunctionArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionArgs(self):

        localctx = evaql_parser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1001
                self.constant()
                pass

            elif la_ == 2:
                self.state = 1002
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 1003
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 1004
                self.expression(0)
                pass


            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 1007
                self.match(evaql_parser.COMMA)
                self.state = 1012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1008
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 1009
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 1010
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 1011
                    self.expression(0)
                    pass


                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArg" ):
                return visitor.visitFunctionArg(self)
            else:
                return visitor.visitChildren(self)




    def functionArg(self):

        localctx = evaql_parser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_functionArg)
        try:
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1020
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1021
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1022
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IS(self):
            return self.getToken(evaql_parser.IS, 0)
        def TRUE(self):
            return self.getToken(evaql_parser.TRUE, 0)
        def FALSE(self):
            return self.getToken(evaql_parser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(evaql_parser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpression" ):
                return visitor.visitIsExpression(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(evaql_parser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalExpression" ):
                return visitor.visitLogicalExpression(self)
            else:
                return visitor.visitChildren(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExpression" ):
                return visitor.visitPredicateExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1026
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.NOT or _la==evaql_parser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1027
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = evaql_parser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1028
                self.predicate(0)
                self.state = 1029
                self.match(evaql_parser.IS)
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.NOT:
                    self.state = 1030
                    self.match(evaql_parser.NOT)


                self.state = 1033
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & ((1 << (evaql_parser.FALSE - 26)) | (1 << (evaql_parser.TRUE - 26)) | (1 << (evaql_parser.UNKNOWN - 26)))) != 0)):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = evaql_parser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1035
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1044
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = evaql_parser.LogicalExpressionContext(self, evaql_parser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 1038
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1039
                    self.logicalOperator()
                    self.state = 1040
                    self.expression(4) 
                self.state = 1046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(evaql_parser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(evaql_parser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionAtomPredicate" ):
                return visitor.visitExpressionAtomPredicate(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(evaql_parser.ComparisonOperatorContext,0)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)
        def ANY(self):
            return self.getToken(evaql_parser.ANY, 0)
        def SOME(self):
            return self.getToken(evaql_parser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparisonPredicate" ):
                listener.enterSubqueryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparisonPredicate" ):
                listener.exitSubqueryComparisonPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryComparisonPredicate" ):
                return visitor.visitSubqueryComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BinaryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(evaql_parser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.PredicateContext)
            else:
                return self.getTypedRuleContext(evaql_parser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparisonPredicate" ):
                listener.enterBinaryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparisonPredicate" ):
                listener.exitBinaryComparisonPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryComparisonPredicate" ):
                return visitor.visitBinaryComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IN(self):
            return self.getToken(evaql_parser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInPredicate" ):
                return visitor.visitInPredicate(self)
            else:
                return visitor.visitChildren(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IS(self):
            return self.getToken(evaql_parser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(evaql_parser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsNullPredicate" ):
                return visitor.visitIsNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.PredicateContext)
            else:
                return self.getTypedRuleContext(evaql_parser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(evaql_parser.LIKE, 0)
        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)
        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikePredicate" ):
                return visitor.visitLikePredicate(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 200
        self.enterRecursionRule(localctx, 200, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = evaql_parser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LOCAL_ID:
                self.state = 1048
                self.match(evaql_parser.LOCAL_ID)
                self.state = 1049
                self.match(evaql_parser.VAR_ASSIGN)


            self.state = 1052
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1091
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1089
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                    if la_ == 1:
                        localctx = evaql_parser.BinaryComparisonPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1054
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1055
                        self.comparisonOperator()
                        self.state = 1056
                        localctx.right = self.predicate(5)
                        pass

                    elif la_ == 2:
                        localctx = evaql_parser.InPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1058
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1060
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.NOT:
                            self.state = 1059
                            self.match(evaql_parser.NOT)


                        self.state = 1062
                        self.match(evaql_parser.IN)
                        self.state = 1063
                        self.match(evaql_parser.LR_BRACKET)
                        self.state = 1066
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [evaql_parser.SELECT]:
                            self.state = 1064
                            self.selectStatement(0)
                            pass
                        elif token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                            self.state = 1065
                            self.expressions()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1068
                        self.match(evaql_parser.RR_BRACKET)
                        pass

                    elif la_ == 3:
                        localctx = evaql_parser.IsNullPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1070
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1071
                        self.match(evaql_parser.IS)
                        self.state = 1072
                        self.nullNotnull()
                        pass

                    elif la_ == 4:
                        localctx = evaql_parser.SubqueryComparisonPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1073
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1074
                        self.comparisonOperator()
                        self.state = 1075
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << evaql_parser.ALL) | (1 << evaql_parser.ANY) | (1 << evaql_parser.SOME))) != 0)):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1076
                        self.match(evaql_parser.LR_BRACKET)
                        self.state = 1077
                        self.selectStatement(0)
                        self.state = 1078
                        self.match(evaql_parser.RR_BRACKET)
                        pass

                    elif la_ == 5:
                        localctx = evaql_parser.LikePredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1080
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1082
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.NOT:
                            self.state = 1081
                            self.match(evaql_parser.NOT)


                        self.state = 1084
                        self.match(evaql_parser.LIKE)
                        self.state = 1085
                        self.predicate(0)
                        self.state = 1087
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                        if la_ == 1:
                            self.state = 1086
                            self.match(evaql_parser.STRING_LITERAL)


                        pass

             
                self.state = 1093
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(evaql_parser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpressionAtom" ):
                return visitor.visitUnaryExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpessionAtom" ):
                listener.enterSubqueryExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpessionAtom" ):
                listener.exitSubqueryExpessionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpessionAtom" ):
                return visitor.visitSubqueryExpessionAtom(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpressionAtom" ):
                return visitor.visitConstantExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpressionAtom" ):
                return visitor.visitFunctionCallExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnNameExpressionAtom" ):
                return visitor.visitFullColumnNameExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(evaql_parser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitExpressionAtom" ):
                return visitor.visitBitExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedExpressionAtom" ):
                return visitor.visitNestedExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(evaql_parser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathExpressionAtom" ):
                return visitor.visitMathExpressionAtom(self)
            else:
                return visitor.visitChildren(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 202
        self.enterRecursionRule(localctx, 202, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1095
                self.constant()
                pass

            elif la_ == 2:
                localctx = evaql_parser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1096
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = evaql_parser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1097
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = evaql_parser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1098
                self.unaryOperator()
                self.state = 1099
                self.expressionAtom(5)
                pass

            elif la_ == 5:
                localctx = evaql_parser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1101
                self.match(evaql_parser.LR_BRACKET)
                self.state = 1102
                self.expression(0)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 1103
                    self.match(evaql_parser.COMMA)
                    self.state = 1104
                    self.expression(0)
                    self.state = 1109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1110
                self.match(evaql_parser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = evaql_parser.SubqueryExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1112
                self.match(evaql_parser.LR_BRACKET)
                self.state = 1113
                self.selectStatement(0)
                self.state = 1114
                self.match(evaql_parser.RR_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1126
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        localctx = evaql_parser.BitExpressionAtomContext(self, evaql_parser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1118
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1119
                        self.bitOperator()
                        self.state = 1120
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 2:
                        localctx = evaql_parser.MathExpressionAtomContext(self, evaql_parser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1122
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1123
                        self.mathOperator()
                        self.state = 1124
                        localctx.right = self.expressionAtom(2)
                        pass

             
                self.state = 1130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(evaql_parser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(evaql_parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = evaql_parser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            _la = self._input.LA(1)
            if not(_la==evaql_parser.NOT or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (evaql_parser.PLUS - 138)) | (1 << (evaql_parser.MINUS - 138)) | (1 << (evaql_parser.EXCLAMATION_SYMBOL - 138)) | (1 << (evaql_parser.BIT_NOT_OP - 138)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(evaql_parser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(evaql_parser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(evaql_parser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def AT_SIGN(self):
            return self.getToken(evaql_parser.AT_SIGN, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = evaql_parser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_comparisonOperator)
        try:
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1133
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1134
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1135
                self.match(evaql_parser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1136
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1137
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1138
                self.match(evaql_parser.GREATER_SYMBOL)
                self.state = 1139
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1140
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1141
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1142
                self.match(evaql_parser.EXCLAMATION_SYMBOL)
                self.state = 1143
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1144
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1145
                self.match(evaql_parser.EQUAL_SYMBOL)
                self.state = 1146
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1147
                self.match(evaql_parser.AT_SIGN)
                self.state = 1148
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1149
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1150
                self.match(evaql_parser.AT_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(evaql_parser.AND, 0)

        def BIT_AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.BIT_AND_OP)
            else:
                return self.getToken(evaql_parser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(evaql_parser.XOR, 0)

        def OR(self):
            return self.getToken(evaql_parser.OR, 0)

        def BIT_OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.BIT_OR_OP)
            else:
                return self.getToken(evaql_parser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOperator" ):
                return visitor.visitLogicalOperator(self)
            else:
                return visitor.visitChildren(self)




    def logicalOperator(self):

        localctx = evaql_parser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_logicalOperator)
        try:
            self.state = 1160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.match(evaql_parser.AND)
                pass
            elif token in [evaql_parser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.match(evaql_parser.BIT_AND_OP)
                self.state = 1155
                self.match(evaql_parser.BIT_AND_OP)
                pass
            elif token in [evaql_parser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1156
                self.match(evaql_parser.XOR)
                pass
            elif token in [evaql_parser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1157
                self.match(evaql_parser.OR)
                pass
            elif token in [evaql_parser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1158
                self.match(evaql_parser.BIT_OR_OP)
                self.state = 1159
                self.match(evaql_parser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.LESS_SYMBOL)
            else:
                return self.getToken(evaql_parser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.GREATER_SYMBOL)
            else:
                return self.getToken(evaql_parser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(evaql_parser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(evaql_parser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(evaql_parser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOperator" ):
                return visitor.visitBitOperator(self)
            else:
                return visitor.visitChildren(self)




    def bitOperator(self):

        localctx = evaql_parser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_bitOperator)
        try:
            self.state = 1169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1162
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1163
                self.match(evaql_parser.LESS_SYMBOL)
                pass
            elif token in [evaql_parser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1164
                self.match(evaql_parser.GREATER_SYMBOL)
                self.state = 1165
                self.match(evaql_parser.GREATER_SYMBOL)
                pass
            elif token in [evaql_parser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1166
                self.match(evaql_parser.BIT_AND_OP)
                pass
            elif token in [evaql_parser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1167
                self.match(evaql_parser.BIT_XOR_OP)
                pass
            elif token in [evaql_parser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1168
                self.match(evaql_parser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(evaql_parser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(evaql_parser.MODULE, 0)

        def DIV(self):
            return self.getToken(evaql_parser.DIV, 0)

        def MOD(self):
            return self.getToken(evaql_parser.MOD, 0)

        def PLUS(self):
            return self.getToken(evaql_parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def MINUSMINUS(self):
            return self.getToken(evaql_parser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathOperator" ):
                return visitor.visitMathOperator(self)
            else:
                return visitor.visitChildren(self)




    def mathOperator(self):

        localctx = evaql_parser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            _la = self._input.LA(1)
            if not(((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (evaql_parser.STAR - 135)) | (1 << (evaql_parser.DIVIDE - 135)) | (1 << (evaql_parser.MODULE - 135)) | (1 << (evaql_parser.PLUS - 135)) | (1 << (evaql_parser.MINUSMINUS - 135)) | (1 << (evaql_parser.MINUS - 135)) | (1 << (evaql_parser.DIV - 135)) | (1 << (evaql_parser.MOD - 135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[28] = self.selectStatement_sempred
        self._predicates[99] = self.expression_sempred
        self._predicates[100] = self.predicate_sempred
        self._predicates[101] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def selectStatement_sempred(self, localctx:SelectStatementContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         




