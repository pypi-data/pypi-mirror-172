import re

expressions = \
    {
        'True':
            {
                r"\b(owo|uwu)\b",
                r"\b[oĞ¾0uğŸ‡´ğŸ‡º]+[wğŸ‡¼]+[oĞ¾0uğŸ‡´ğŸ‡º]+\b",
                r"\b[oĞ¾0>uğŸ‡´ğŸ‡º^]+[\s.,*_-`\\]*[w3ğŸ‡¼]+[\s,.*_-`\\]*[oĞ¾0^<uğŸ‡´ğŸ‡º]\b"
            },
        'False':
            {
                r"(owo|uwu)",
                r"[oĞ¾0uğŸ‡´ğŸ‡º]+[wğŸ‡¼]+[oĞ¾0uğŸ‡´ğŸ‡º]",
                r"[oĞ¾0>uğŸ‡´ğŸ‡º^]+[\s.,*_-`\\]*[w3ğŸ‡¼]+[\s,.*_-`\\]*[oĞ¾0^<uğŸ‡´ğŸ‡º]"
            }
    }


def evaluate(message: str, word_boundaries: bool = False) -> bool:
    """Returns True if the message contains an OwO-like expression.

    :param word_boundaries: enable/disable boundary checks
    :param message: message to be evaluated
    :return: True if the message contains an 'owo'-like expression
    """

    for expression in expressions[str(word_boundaries)]:
        if re.search(expression, message, re.IGNORECASE):
            return True

    return False
