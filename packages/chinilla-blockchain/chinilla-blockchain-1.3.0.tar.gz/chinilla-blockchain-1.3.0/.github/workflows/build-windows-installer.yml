name: ðŸ“¦ðŸš€ Build Installer - Windows 10

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
      - 'release/**'
      - 'long_lived/**'
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: Windows 10 Installer
    runs-on: [windows-2019]
    timeout-minutes: 50
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Set git urls to https instead of ssh
      run: |
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/
    - name: Get npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: Cache npm
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - uses: actions/setup-python@v3
      name: Install Python ${{ matrix.python-version }}
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Node 16.x
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SIGNING_SECRET
        unset HAS_DO_SECRET
        if [ -n "$SIGNING_SECRET" ]; then HAS_SIGNING_SECRET='true' ; fi
        echo "::set-output name=HAS_SIGNING_SECRET::${HAS_SIGNING_SECRET}"
        if [ -n "$AWS_SECRET" ]; then HAS_DO_SECRET='true' ; fi
        echo ::set-output name=HAS_DO_SECRET::${HAS_DO_SECRET}
      env:
        SIGNING_SECRET: "${{ secrets.WIN_CODE_SIGN_CERT }}"
        AWS_SECRET: "${{ secrets.INSTALLER_UPLOAD_KEY }}"

    - name: Decode code signing cert into an encrypted file
      if: steps.check_secrets.outputs.HAS_SIGNING_SECRET
      uses: kitek/decode-base64-into-file-action@1.0
      with:
        encoded-value: ${{ secrets.WIN_CODE_SIGN_CERT }}
        destination-file: .\win_code_sign_cert.p12

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      run: |
        python -m venv ..\venv
        . ..\venv\Scripts\Activate.ps1
        pip3 install setuptools_scm
        $env:CHINILLA_INSTALLER_VERSION = python .\build_scripts\installer-version.py -win
        echo "$env:CHINILLA_INSTALLER_VERSION"
        echo "::set-output name=CHINILLA_INSTALLER_VERSION::$env:CHINILLA_INSTALLER_VERSION"
        deactivate
      # Get the most recent release from chia-plotter-madmax
    - uses: actions/github-script@v6
      id: 'latest-madmax'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'Chia-Network',
            repo: 'chia-plotter-madmax',
          });
          return release.data.tag_name;
    - name: Get latest madmax plotter
      run: |
        mkdir "$env:GITHUB_WORKSPACE\madmax"
        Invoke-WebRequest https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}.exe -OutFile "$env:GITHUB_WORKSPACE\madmax\chia_plot.exe"
        Invoke-WebRequest https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}.exe -OutFile "$env:GITHUB_WORKSPACE\madmax\chia_plot_k34.exe"
      # Get the most recent release from bladebit
    - uses: actions/github-script@v6
      id: 'latest-bladebit'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'Chia-Network',
            repo: 'bladebit',
          });
          return release.data.tag_name;
    - name: Get latest bladebit plotter
      run: |
        mkdir "$env:GITHUB_WORKSPACE\bladebit"
        Invoke-WebRequest https://github.com/Chia-Network/bladebit/releases/download/${{ steps.latest-bladebit.outputs.result }}/bladebit-${{ steps.latest-bladebit.outputs.result }}-windows-x86-64.zip -OutFile "$env:GITHUB_WORKSPACE\bladebit\bladebit.zip"
        Expand-Archive -Path "$env:GITHUB_WORKSPACE\bladebit\bladebit.zip" -DestinationPath "$env:GITHUB_WORKSPACE\bladebit\"
        rm "$env:GITHUB_WORKSPACE\bladebit\bladebit.zip"
    - name: Run install script
      env:
        INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        .\Install.ps1 -d

    - name: Prepare GUI cache
      id: gui-ref
      run: |
        $gui_ref = git submodule status chinilla-blockchain-gui
        $gui_ref = $gui_ref -replace "^ | chinilla-blockchain-gui.*$",""
        echo $gui_ref
        echo "::set-output name=GUI_REF::$gui_ref"
        echo "Remove-Item -Recurse -Force .\chinilla-blockchain-gui"
        Remove-Item -Recurse -Force .\chinilla-blockchain-gui

    - name: Cache GUI
      uses: actions/cache@v3
      id: cache-gui
      with:
        path: .\chinilla-blockchain-gui
        key: ${{ runner.os }}-chinilla-blockchain-gui-${{ steps.gui-ref.outputs.GUI_REF }}

    - if: steps.cache-gui.outputs.cache-hit != 'true'
      name: Build GUI
      continue-on-error: false
      run: |
        cd .\build_scripts
        .\build_windows-1-gui.ps1

    - name: Build Windows installer
      env:
        CHINILLA_INSTALLER_VERSION: ${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}
        WIN_CODE_SIGN_PASS: ${{ secrets.WIN_CODE_SIGN_PASS }}
        HAS_SECRET: ${{ steps.check_secrets.outputs.HAS_SIGNING_SECRET }}
      run: |
        $env:path="C:\Program` Files` (x86)\Microsoft` Visual` Studio\2019\Enterprise\SDK\ScopeCppSDK\vc15\VC\bin\;$env:path"
        $env:path="C:\Program` Files` (x86)\Windows` Kits\10\App` Certification` Kit;$env:path"
        .\venv\Scripts\Activate.ps1
        cd .\build_scripts
        .\build_windows-2-installer.ps1
        Copy-Item "${{ github.workspace }}\chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.exe" -Destination "${{ github.workspace }}\chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-beta-latest.exe"
    - name: Upload Windows exe's to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows-Exe
        path: ${{ github.workspace }}\chinilla-blockchain-gui\Chinilla-win32-x64\

    - name: Upload Installer to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: chinilla-installers-windows-exe-intel
        path: ${{ github.workspace }}\chinilla-blockchain-gui\release-builds\

    - name: Upload to DO Spaces
      if: steps.check_secrets.outputs.HAS_DO_SECRET
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: \chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.exe
          out_dir: dev
          cdn_domain: download.chinilla.com

    - name: Create Checksums
      env:
        CHINILLA_INSTALLER_VERSION: ${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}
      run: |
         certutil.exe -hashfile ${{ github.workspace }}\chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.exe SHA256 > ${{ github.workspace }}\chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.exe.sha256
         ls ${{ github.workspace }}\chinilla-blockchain-gui\release-builds\windows-installer\
    - name: Create Beta Checksum
      if: github.ref == 'refs/heads/main'
      env:
        CHINILLA_INSTALLER_VERSION: ${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}
      run: |
         certutil.exe -hashfile ${{ github.workspace }}\chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-beta-latest.exe SHA256 > ${{ github.workspace }}\chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-beta-latest.exe.sha256
         ls ${{ github.workspace }}\chinilla-blockchain-gui\release-builds\windows-installer\
    - name: Upload Beta Installer
      if: steps.check_secrets.outputs.HAS_DO_SECRET && github.ref == 'refs/heads/main'
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: \chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-beta-latest.exe
          out_dir: beta
          cdn_domain: download.chinilla.com

    - name: Upload Beta Installer Sha256
      if: steps.check_secrets.outputs.HAS_DO_SECRET && github.ref == 'refs/heads/main'
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: \chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-beta-latest.exe.sha256
          out_dir: beta
          cdn_domain: download.chinilla.com

    - name: Upload Release Installer
      if: steps.check_secrets.outputs.HAS_DO_SECRET && startsWith(github.ref, 'refs/tags/')
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: \chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.exe
          out_dir: install
          cdn_domain: download.chinilla.com

    - name: Upload Release Installer SHA256
      if: steps.check_secrets.outputs.HAS_DO_SECRET && startsWith(github.ref, 'refs/tags/')
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: \chinilla-blockchain-gui\release-builds\windows-installer\ChinillaSetup-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.exe.sha256
          out_dir: install
          cdn_domain: download.chinilla.com

    - name: Get tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag-name
      run: |
        echo "::set-output name=TAG_NAME::$(echo ${{ github.ref }} | cut -d'/' -f 3)"
        echo "::set-output name=REPO_NAME::$(echo ${{ github.repository }} | cut -d'/' -f 2)"

    - name: Remove Windows exe and installer to exclude from cache
      run: |
        Remove-Item .\chinilla-blockchain-gui\packages\gui\Chinilla-win32-x64 -Recurse -Force
        Remove-Item .\chinilla-blockchain-gui\packages\gui\release-builds -Recurse -Force
        Remove-Item .\chinilla-blockchain-gui\packages\gui\daemon -Recurse -Force
        If (Test-Path .\chinilla-blockchain-gui\packages\gui\win_code_sign_cert.p12) {
          Remove-Item .\chinilla-blockchain-gui\packages\gui\win_code_sign_cert.p12 -Force
        }
        Remove-Item .\chinilla-blockchain-gui\Chinilla-win32-x64 -Recurse -Force
        Remove-Item .\chinilla-blockchain-gui\release-builds -Recurse -Force
