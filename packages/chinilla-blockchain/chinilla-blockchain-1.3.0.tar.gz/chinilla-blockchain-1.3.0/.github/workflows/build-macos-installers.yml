name: ðŸ“¦ðŸš€ Build Installers - MacOS

on:
  push:
    branches:
      - 'long_lived/**'
      - main
      - 'release/**'
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: MacOS ${{ matrix.os.name }} Installer
    runs-on: ${{ matrix.os.runs-on }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]
        os:
          - runs-on: macos-11
            name: intel
            file-suffix: ""
            mac-package-name: "Chinilla-darwin-x64"
            glue-name: "build-macos"
          # - runs-on: [MacOS, ARM64]
            # name: m1
            # file-suffix: "-arm64"
            # mac-package-name: "Chinilla-darwin-arm64"
            # glue-name: "build-mac-m1"

    steps:
      - uses: Chinilla/actions/clean-workspace@main

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: Chinilla/actions/git-ssh-to-https@main

      - name: Cleanup any leftovers that exist from previous runs
        run: bash build_scripts/clean-runner.sh || true

      - name: Test for secrets access
        id: check_secrets
        shell: bash
        run: |
          unset HAS_APPLE_SECRET
          unset HAS_AWS_SECRET

          if [ -n "$APPLE_SECRET" ]; then HAS_APPLE_SECRET='true' ; fi
          echo ::set-output name=HAS_APPLE_SECRET::${HAS_APPLE_SECRET}

          if [ -n "$AWS_SECRET" ]; then HAS_AWS_SECRET='true' ; fi
          echo ::set-output name=HAS_AWS_SECRET::${HAS_AWS_SECRET}
        env:
          APPLE_SECRET: "${{ secrets.APPLE_DEV_ID_APP }}"
          AWS_SECRET: "${{ secrets.INSTALLER_UPLOAD_KEY }}"

      - name: Create installer version number
        id: version_number
        run: |
          python3 -m venv ../venv
          . ../venv/bin/activate
          pip install setuptools_scm
          echo "::set-output name=CHINILLA_INSTALLER_VERSION::$(python3 ./build_scripts/installer-version.py)"
          deactivate

      - name: Setup Python environment
        uses: Chinilla/actions/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}
          force-pyenv: 'true'

      # This will be recreated in the next step
      # Done now and at the end of the workflow in case the last workflow fails, and this is still around
      - name: Delete keychain if it already exists
        run:
          security delete-keychain signing_temp.keychain || true

      - name: Import Apple app signing certificate
        if: steps.check_secrets.outputs.HAS_APPLE_SECRET
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEV_ID_APP }}
          p12-password: ${{ secrets.APPLE_DEV_ID_APP_PASS }}

      # Get the most recent release from chia-plotter-madmax
      - uses: actions/github-script@v6
        id: 'latest-madmax'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: 'Chia-Network',
              repo: 'chia-plotter-madmax',
            });
            return release.data.tag_name;

      - name: Get latest madmax plotter
        run: |
          mkdir "$GITHUB_WORKSPACE/madmax"
          wget -O "$GITHUB_WORKSPACE/madmax/chia_plot" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}-macos-${{ matrix.os.name }}
          wget -O "$GITHUB_WORKSPACE/madmax/chia_plot_k34" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}-macos-${{ matrix.os.name }}
          chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot"
          chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot_k34"

      - uses: ./.github/actions/install
        with:
          python-version: ${{ matrix.python-version }}
          development: true

      - uses: chinilla/actions/activate-venv@main

      - name: Setup Node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Prepare GUI cache
        id: gui-ref
        run: |
          gui_ref=$(git submodule status chinilla-blockchain-gui | sed -e 's/^ //g' -e 's/ chinilla-blockchain-gui.*$//g')
          echo "${gui_ref}"
          echo "::set-output name=GUI_REF::${gui_ref}"
          echo "rm -rf ./chinilla-blockchain-gui"
          rm -rf ./chinilla-blockchain-gui

      - name: Cache GUI
        uses: actions/cache@v3
        id: cache-gui
        with:
          path: ./chinilla-blockchain-gui
          key: ${{ runner.os }}-${{ matrix.os.name }}-chinilla-blockchain-gui-${{ steps.gui-ref.outputs.GUI_REF }}

      - if: steps.cache-gui.outputs.cache-hit != 'true'
        name: Build GUI
        continue-on-error: false
        run: |
          cd ./build_scripts
          sh build_macos-1-gui.sh

      - name: Build MacOS DMG
        env:
          CHINILLA_INSTALLER_VERSION: ${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}
          NOTARIZE: ${{ steps.check_secrets.outputs.HAS_APPLE_SECRET }}
          APPLE_NOTARIZE_USERNAME: "${{ secrets.APPLE_NOTARIZE_USERNAME }}"
          APPLE_NOTARIZE_PASSWORD: "${{ secrets.APPLE_NOTARIZE_PASSWORD }}"
          MAC_PACKAGE_NAME: "${{ matrix.os.mac-package-name }}"
          MAC_FILE_SUFFIX: "${{ matrix.os.file-suffix }}"
        run: |
          cd ./build_scripts
          sh build_macos-2-installer.sh
          cp final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg final_installer/Chinilla-beta-latest.dmg

      - name: Upload MacOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: chinilla-installers-macos-dmg-${{ matrix.os.name }}
          path: ${{ github.workspace }}/build_scripts/final_installer/

      - name: Install AWS CLI
        if: steps.check_secrets.outputs.HAS_AWS_SECRET
        run: |
          brew install awscli

      - name: Create Checksums
        run: |
          ls
          shasum -a 256 ${{ github.workspace }}/build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg > ${{ github.workspace }}/build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg.sha256
      
      - name: Upload to DO Spaces
        if: steps.check_secrets.outputs.HAS_DO_SECRET
        uses: BetaHuhn/do-spaces-action@v2
        with:
            access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
            secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
            space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
            space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
            source: /build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg
            out_dir: dev
            cdn_domain: download.chinilla.com

      - name: Create torrent
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          py3createtorrent -f -t udp://tracker.opentrackr.org:1337/announce ${{ github.workspace }}/build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg -o ${{ github.workspace }}/build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg.torrent --webseed https://chinilla-downloads/install/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg
          ls ${{ github.workspace }}/build_scripts/final_installer/

      - name: Upload Beta Installer
        if: steps.check_secrets.outputs.HAS_DO_SECRET && github.ref == 'refs/heads/main'
        uses: BetaHuhn/do-spaces-action@v2
        with:
            access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
            secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
            space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
            space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
            source: /build_scripts/final_installer/Chinilla-beta-latest.dmg
            out_dir: beta
            cdn_domain: download.chinilla.com

      - name: Upload Beta Installer Sha256
        if: steps.check_secrets.outputs.HAS_DO_SECRET && github.ref == 'refs/heads/main'
        uses: BetaHuhn/do-spaces-action@v2
        with:
            access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
            secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
            space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
            space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
            source: /build_scripts/final_installer/Chinilla-beta-latest.dmg.sha256
            out_dir: beta
            cdn_domain: download.chinilla.com

      - name: Upload Release Installer
        if: steps.check_secrets.outputs.HAS_DO_SECRET && startsWith(github.ref, 'refs/tags/')
        uses: BetaHuhn/do-spaces-action@v2
        with:
            access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
            secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
            space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
            space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
            source: /build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg
            out_dir: install
            cdn_domain: download.chinilla.com

      - name: Upload Release Installer SHA256
        if: steps.check_secrets.outputs.HAS_DO_SECRET && startsWith(github.ref, 'refs/tags/')
        uses: BetaHuhn/do-spaces-action@v2
        with:
            access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
            secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
            space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
            space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
            source: /build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg.sha256
            out_dir: install
            cdn_domain: download.chinilla.com

      - name: Upload Release Installer Torrent
        if: steps.check_secrets.outputs.HAS_DO_SECRET && startsWith(github.ref, 'refs/tags/')
        uses: BetaHuhn/do-spaces-action@v2
        with:
            access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
            secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
            space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
            space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
            source: /build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}${{ matrix.os.file-suffix }}.dmg.torrent
            out_dir: torrents

      - name: Get tag name
        if: startsWith(github.ref, 'refs/tags/')
        id: tag-name
        run: |
          echo "::set-output name=TAG_NAME::$(echo ${{ github.ref }} | cut -d'/' -f 3)"
          echo "::set-output name=REPO_NAME::$(echo ${{ github.repository }} | cut -d'/' -f 2)"

      # We want to delete this no matter what happened in the previous steps (failures, success, etc)
      - name: Delete signing keychain
        if: always()
        run:
          security delete-keychain signing_temp.keychain || true

      - name: Remove working files to exclude from cache
        run: |
          rm -rf ./chinilla-blockchain-gui/packages/gui/daemon
