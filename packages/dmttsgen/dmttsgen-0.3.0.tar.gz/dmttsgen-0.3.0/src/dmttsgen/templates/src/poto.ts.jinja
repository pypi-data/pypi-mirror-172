// This an autogenerated file
// Please do not edit

// {{ description }}
// Generated with {{ type }}

// importing general modules
import { Blueprint } from '@lbje/dmt-ts';
import { Entity } from '@lbje/dmt-ts';
import { BaseList } from '@lbje/dmt-ts';
import { {{ package_class }}  } from './{{ package_class }}';

export class {{ type }} extends Entity {

    private static type: Blueprint = {{ type }}.createBlueprint();
    {% for field in fields %}
    private _{{ field.name }}: {{ field.type }} = {{ field.init }};
    {%- endfor %}

    public constructor(init?: Partial<{{ type }}>) {
        super(init);
        Object.assign(this, init);
    }

    {% for field in fields %}
    // ----------------------------------------------------------------------
    get {{ field.name }}(): {{ field.type }} {
        return this._{{ field.name }};
    }
    {%- if not field.isArray %}
    // ----------------------------------------------------------------------
    set {{ field.name }}(value: {{ field.type }}) {
      {# const oldValue = this._{{ field.name }}; #}
      this._{{ field.name }} = value;
      {# this.fireValueChanged('{{ field.name }}', oldValue, value); #}
    }
    {%- endif%}
    {%- endfor %}

    private static createBlueprint(): Blueprint {
        const type = new Blueprint({{ package_class }}.instance, '{{ type }}');
        {%- for field in fields %}
        {%- if field.isArray %}
        type.add{{ field.createMethod }}('{{ field.name }}', '{{ field.description }}', -1);
        {%- else %}
        type.add{{ field.createMethod }}('{{ field.name }}', '{{ field.description }}');
        {%- endif %}
        {%- endfor %}
        return type;
    }

    getBlueprint(): Blueprint {
        return {{ type }}.type;
    }

    /* eslint-disable  @typescript-eslint/no-explicit-any */
    get(property: string): any {
        switch (property) {
        {%- for field in fields %}
        case '{{ field.name }}': {
            return this.{{ field.name }};
        }
        {%- endfor %}
        default:
            return super.get(property)
        }
    }

    /* eslint-disable  @typescript-eslint/no-explicit-any */
    set(property: string, value: any): void {
        switch (property) {
        {%- for field in fields %}
        {%- if not field.isArray %}
        case '{{ field.name }}': {
            this.{{ field.name }} = value;
            break;
        }
        {%- endif%}
        {%- endfor %}
        default:
            super.set(property,value)
        }
    }

}
