"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`).  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from redrover_api.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from redrover_api.exceptions import ApiAttributeError


def lazy_import():
    from redrover_api.model.assembly import Assembly
    from redrover_api.model.constructor_info import ConstructorInfo
    from redrover_api.model.custom_attribute_data import CustomAttributeData
    from redrover_api.model.method_base import MethodBase
    from redrover_api.model.module import Module
    from redrover_api.model.runtime_type_handle import RuntimeTypeHandle
    from redrover_api.model.struct_layout_attribute import StructLayoutAttribute
    globals()['Assembly'] = Assembly
    globals()['ConstructorInfo'] = ConstructorInfo
    globals()['CustomAttributeData'] = CustomAttributeData
    globals()['MethodBase'] = MethodBase
    globals()['Module'] = Module
    globals()['RuntimeTypeHandle'] = RuntimeTypeHandle
    globals()['StructLayoutAttribute'] = StructLayoutAttribute


class Type(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('member_type',): {
            'CONSTRUCTOR': "Constructor",
            'EVENT': "Event",
            'FIELD': "Field",
            'METHOD': "Method",
            'PROPERTY': "Property",
            'TYPEINFO': "TypeInfo",
            'CUSTOM': "Custom",
            'NESTEDTYPE': "NestedType",
            'ALL': "All",
        },
        ('generic_parameter_attributes',): {
            'NONE': "None",
            'COVARIANT': "Covariant",
            'CONTRAVARIANT': "Contravariant",
            'VARIANCEMASK': "VarianceMask",
            'REFERENCETYPECONSTRAINT': "ReferenceTypeConstraint",
            'NOTNULLABLEVALUETYPECONSTRAINT': "NotNullableValueTypeConstraint",
            'DEFAULTCONSTRUCTORCONSTRAINT': "DefaultConstructorConstraint",
            'SPECIALCONSTRAINTMASK': "SpecialConstraintMask",
        },
        ('attributes',): {
            'NOTPUBLIC': "NotPublic",
            'PUBLIC': "Public",
            'NESTEDPUBLIC': "NestedPublic",
            'NESTEDPRIVATE': "NestedPrivate",
            'NESTEDFAMILY': "NestedFamily",
            'NESTEDASSEMBLY': "NestedAssembly",
            'NESTEDFAMANDASSEM': "NestedFamANDAssem",
            'VISIBILITYMASK': "VisibilityMask",
            'SEQUENTIALLAYOUT': "SequentialLayout",
            'EXPLICITLAYOUT': "ExplicitLayout",
            'LAYOUTMASK': "LayoutMask",
            'CLASSSEMANTICSMASK': "ClassSemanticsMask",
            'ABSTRACT': "Abstract",
            'SEALED': "Sealed",
            'SPECIALNAME': "SpecialName",
            'RTSPECIALNAME': "RTSpecialName",
            'IMPORT': "Import",
            'SERIALIZABLE': "Serializable",
            'WINDOWSRUNTIME': "WindowsRuntime",
            'UNICODECLASS': "UnicodeClass",
            'AUTOCLASS': "AutoClass",
            'STRINGFORMATMASK': "StringFormatMask",
            'HASSECURITY': "HasSecurity",
            'RESERVEDMASK': "ReservedMask",
            'BEFOREFIELDINIT': "BeforeFieldInit",
            'CUSTOMFORMATMASK': "CustomFormatMask",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'name': (str, none_type,),  # noqa: E501
            'custom_attributes': ([CustomAttributeData], none_type,),  # noqa: E501
            'is_collectible': (bool,),  # noqa: E501
            'metadata_token': (int,),  # noqa: E501
            'is_interface': (bool,),  # noqa: E501
            'member_type': (str,),  # noqa: E501
            'namespace': (str, none_type,),  # noqa: E501
            'assembly_qualified_name': (str, none_type,),  # noqa: E501
            'full_name': (str, none_type,),  # noqa: E501
            'assembly': (Assembly,),  # noqa: E501
            'module': (Module,),  # noqa: E501
            'is_nested': (bool,),  # noqa: E501
            'declaring_type': (Type,),  # noqa: E501
            'declaring_method': (MethodBase,),  # noqa: E501
            'reflected_type': (Type,),  # noqa: E501
            'underlying_system_type': (Type,),  # noqa: E501
            'is_type_definition': (bool,),  # noqa: E501
            'is_array': (bool,),  # noqa: E501
            'is_by_ref': (bool,),  # noqa: E501
            'is_pointer': (bool,),  # noqa: E501
            'is_constructed_generic_type': (bool,),  # noqa: E501
            'is_generic_parameter': (bool,),  # noqa: E501
            'is_generic_type_parameter': (bool,),  # noqa: E501
            'is_generic_method_parameter': (bool,),  # noqa: E501
            'is_generic_type': (bool,),  # noqa: E501
            'is_generic_type_definition': (bool,),  # noqa: E501
            'is_sz_array': (bool,),  # noqa: E501
            'is_variable_bound_array': (bool,),  # noqa: E501
            'is_by_ref_like': (bool,),  # noqa: E501
            'has_element_type': (bool,),  # noqa: E501
            'generic_type_arguments': ([Type], none_type,),  # noqa: E501
            'generic_parameter_position': (int,),  # noqa: E501
            'generic_parameter_attributes': (str,),  # noqa: E501
            'attributes': (str,),  # noqa: E501
            'is_abstract': (bool,),  # noqa: E501
            'is_import': (bool,),  # noqa: E501
            'is_sealed': (bool,),  # noqa: E501
            'is_special_name': (bool,),  # noqa: E501
            'is_class': (bool,),  # noqa: E501
            'is_nested_assembly': (bool,),  # noqa: E501
            'is_nested_fam_and_assem': (bool,),  # noqa: E501
            'is_nested_family': (bool,),  # noqa: E501
            'is_nested_fam_or_assem': (bool,),  # noqa: E501
            'is_nested_private': (bool,),  # noqa: E501
            'is_nested_public': (bool,),  # noqa: E501
            'is_not_public': (bool,),  # noqa: E501
            'is_public': (bool,),  # noqa: E501
            'is_auto_layout': (bool,),  # noqa: E501
            'is_explicit_layout': (bool,),  # noqa: E501
            'is_layout_sequential': (bool,),  # noqa: E501
            'is_ansi_class': (bool,),  # noqa: E501
            'is_auto_class': (bool,),  # noqa: E501
            'is_unicode_class': (bool,),  # noqa: E501
            'is_com_object': (bool,),  # noqa: E501
            'is_contextful': (bool,),  # noqa: E501
            'is_enum': (bool,),  # noqa: E501
            'is_marshal_by_ref': (bool,),  # noqa: E501
            'is_primitive': (bool,),  # noqa: E501
            'is_value_type': (bool,),  # noqa: E501
            'is_signature_type': (bool,),  # noqa: E501
            'is_security_critical': (bool,),  # noqa: E501
            'is_security_safe_critical': (bool,),  # noqa: E501
            'is_security_transparent': (bool,),  # noqa: E501
            'struct_layout_attribute': (StructLayoutAttribute,),  # noqa: E501
            'type_initializer': (ConstructorInfo,),  # noqa: E501
            'type_handle': (RuntimeTypeHandle,),  # noqa: E501
            'guid': (str,),  # noqa: E501
            'base_type': (Type,),  # noqa: E501
            'is_serializable': (bool,),  # noqa: E501
            'contains_generic_parameters': (bool,),  # noqa: E501
            'is_visible': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'name': 'name',  # noqa: E501
        'custom_attributes': 'customAttributes',  # noqa: E501
        'is_collectible': 'isCollectible',  # noqa: E501
        'metadata_token': 'metadataToken',  # noqa: E501
        'is_interface': 'isInterface',  # noqa: E501
        'member_type': 'memberType',  # noqa: E501
        'namespace': 'namespace',  # noqa: E501
        'assembly_qualified_name': 'assemblyQualifiedName',  # noqa: E501
        'full_name': 'fullName',  # noqa: E501
        'assembly': 'assembly',  # noqa: E501
        'module': 'module',  # noqa: E501
        'is_nested': 'isNested',  # noqa: E501
        'declaring_type': 'declaringType',  # noqa: E501
        'declaring_method': 'declaringMethod',  # noqa: E501
        'reflected_type': 'reflectedType',  # noqa: E501
        'underlying_system_type': 'underlyingSystemType',  # noqa: E501
        'is_type_definition': 'isTypeDefinition',  # noqa: E501
        'is_array': 'isArray',  # noqa: E501
        'is_by_ref': 'isByRef',  # noqa: E501
        'is_pointer': 'isPointer',  # noqa: E501
        'is_constructed_generic_type': 'isConstructedGenericType',  # noqa: E501
        'is_generic_parameter': 'isGenericParameter',  # noqa: E501
        'is_generic_type_parameter': 'isGenericTypeParameter',  # noqa: E501
        'is_generic_method_parameter': 'isGenericMethodParameter',  # noqa: E501
        'is_generic_type': 'isGenericType',  # noqa: E501
        'is_generic_type_definition': 'isGenericTypeDefinition',  # noqa: E501
        'is_sz_array': 'isSZArray',  # noqa: E501
        'is_variable_bound_array': 'isVariableBoundArray',  # noqa: E501
        'is_by_ref_like': 'isByRefLike',  # noqa: E501
        'has_element_type': 'hasElementType',  # noqa: E501
        'generic_type_arguments': 'genericTypeArguments',  # noqa: E501
        'generic_parameter_position': 'genericParameterPosition',  # noqa: E501
        'generic_parameter_attributes': 'genericParameterAttributes',  # noqa: E501
        'attributes': 'attributes',  # noqa: E501
        'is_abstract': 'isAbstract',  # noqa: E501
        'is_import': 'isImport',  # noqa: E501
        'is_sealed': 'isSealed',  # noqa: E501
        'is_special_name': 'isSpecialName',  # noqa: E501
        'is_class': 'isClass',  # noqa: E501
        'is_nested_assembly': 'isNestedAssembly',  # noqa: E501
        'is_nested_fam_and_assem': 'isNestedFamANDAssem',  # noqa: E501
        'is_nested_family': 'isNestedFamily',  # noqa: E501
        'is_nested_fam_or_assem': 'isNestedFamORAssem',  # noqa: E501
        'is_nested_private': 'isNestedPrivate',  # noqa: E501
        'is_nested_public': 'isNestedPublic',  # noqa: E501
        'is_not_public': 'isNotPublic',  # noqa: E501
        'is_public': 'isPublic',  # noqa: E501
        'is_auto_layout': 'isAutoLayout',  # noqa: E501
        'is_explicit_layout': 'isExplicitLayout',  # noqa: E501
        'is_layout_sequential': 'isLayoutSequential',  # noqa: E501
        'is_ansi_class': 'isAnsiClass',  # noqa: E501
        'is_auto_class': 'isAutoClass',  # noqa: E501
        'is_unicode_class': 'isUnicodeClass',  # noqa: E501
        'is_com_object': 'isCOMObject',  # noqa: E501
        'is_contextful': 'isContextful',  # noqa: E501
        'is_enum': 'isEnum',  # noqa: E501
        'is_marshal_by_ref': 'isMarshalByRef',  # noqa: E501
        'is_primitive': 'isPrimitive',  # noqa: E501
        'is_value_type': 'isValueType',  # noqa: E501
        'is_signature_type': 'isSignatureType',  # noqa: E501
        'is_security_critical': 'isSecurityCritical',  # noqa: E501
        'is_security_safe_critical': 'isSecuritySafeCritical',  # noqa: E501
        'is_security_transparent': 'isSecurityTransparent',  # noqa: E501
        'struct_layout_attribute': 'structLayoutAttribute',  # noqa: E501
        'type_initializer': 'typeInitializer',  # noqa: E501
        'type_handle': 'typeHandle',  # noqa: E501
        'guid': 'guid',  # noqa: E501
        'base_type': 'baseType',  # noqa: E501
        'is_serializable': 'isSerializable',  # noqa: E501
        'contains_generic_parameters': 'containsGenericParameters',  # noqa: E501
        'is_visible': 'isVisible',  # noqa: E501
    }

    read_only_vars = {
        'name',  # noqa: E501
        'custom_attributes',  # noqa: E501
        'is_collectible',  # noqa: E501
        'metadata_token',  # noqa: E501
        'is_interface',  # noqa: E501
        'member_type',  # noqa: E501
        'namespace',  # noqa: E501
        'assembly_qualified_name',  # noqa: E501
        'full_name',  # noqa: E501
        'is_nested',  # noqa: E501
        'is_type_definition',  # noqa: E501
        'is_array',  # noqa: E501
        'is_by_ref',  # noqa: E501
        'is_pointer',  # noqa: E501
        'is_constructed_generic_type',  # noqa: E501
        'is_generic_parameter',  # noqa: E501
        'is_generic_type_parameter',  # noqa: E501
        'is_generic_method_parameter',  # noqa: E501
        'is_generic_type',  # noqa: E501
        'is_generic_type_definition',  # noqa: E501
        'is_sz_array',  # noqa: E501
        'is_variable_bound_array',  # noqa: E501
        'is_by_ref_like',  # noqa: E501
        'has_element_type',  # noqa: E501
        'generic_type_arguments',  # noqa: E501
        'generic_parameter_position',  # noqa: E501
        'generic_parameter_attributes',  # noqa: E501
        'attributes',  # noqa: E501
        'is_abstract',  # noqa: E501
        'is_import',  # noqa: E501
        'is_sealed',  # noqa: E501
        'is_special_name',  # noqa: E501
        'is_class',  # noqa: E501
        'is_nested_assembly',  # noqa: E501
        'is_nested_fam_and_assem',  # noqa: E501
        'is_nested_family',  # noqa: E501
        'is_nested_fam_or_assem',  # noqa: E501
        'is_nested_private',  # noqa: E501
        'is_nested_public',  # noqa: E501
        'is_not_public',  # noqa: E501
        'is_public',  # noqa: E501
        'is_auto_layout',  # noqa: E501
        'is_explicit_layout',  # noqa: E501
        'is_layout_sequential',  # noqa: E501
        'is_ansi_class',  # noqa: E501
        'is_auto_class',  # noqa: E501
        'is_unicode_class',  # noqa: E501
        'is_com_object',  # noqa: E501
        'is_contextful',  # noqa: E501
        'is_enum',  # noqa: E501
        'is_marshal_by_ref',  # noqa: E501
        'is_primitive',  # noqa: E501
        'is_value_type',  # noqa: E501
        'is_signature_type',  # noqa: E501
        'is_security_critical',  # noqa: E501
        'is_security_safe_critical',  # noqa: E501
        'is_security_transparent',  # noqa: E501
        'guid',  # noqa: E501
        'is_serializable',  # noqa: E501
        'contains_generic_parameters',  # noqa: E501
        'is_visible',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Type - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str, none_type): [optional]  # noqa: E501
            custom_attributes ([CustomAttributeData], none_type): [optional]  # noqa: E501
            is_collectible (bool): [optional]  # noqa: E501
            metadata_token (int): [optional]  # noqa: E501
            is_interface (bool): [optional]  # noqa: E501
            member_type (str): [optional]  # noqa: E501
            namespace (str, none_type): [optional]  # noqa: E501
            assembly_qualified_name (str, none_type): [optional]  # noqa: E501
            full_name (str, none_type): [optional]  # noqa: E501
            assembly (Assembly): [optional]  # noqa: E501
            module (Module): [optional]  # noqa: E501
            is_nested (bool): [optional]  # noqa: E501
            declaring_type (Type): [optional]  # noqa: E501
            declaring_method (MethodBase): [optional]  # noqa: E501
            reflected_type (Type): [optional]  # noqa: E501
            underlying_system_type (Type): [optional]  # noqa: E501
            is_type_definition (bool): [optional]  # noqa: E501
            is_array (bool): [optional]  # noqa: E501
            is_by_ref (bool): [optional]  # noqa: E501
            is_pointer (bool): [optional]  # noqa: E501
            is_constructed_generic_type (bool): [optional]  # noqa: E501
            is_generic_parameter (bool): [optional]  # noqa: E501
            is_generic_type_parameter (bool): [optional]  # noqa: E501
            is_generic_method_parameter (bool): [optional]  # noqa: E501
            is_generic_type (bool): [optional]  # noqa: E501
            is_generic_type_definition (bool): [optional]  # noqa: E501
            is_sz_array (bool): [optional]  # noqa: E501
            is_variable_bound_array (bool): [optional]  # noqa: E501
            is_by_ref_like (bool): [optional]  # noqa: E501
            has_element_type (bool): [optional]  # noqa: E501
            generic_type_arguments ([Type], none_type): [optional]  # noqa: E501
            generic_parameter_position (int): [optional]  # noqa: E501
            generic_parameter_attributes (str): [optional]  # noqa: E501
            attributes (str): [optional]  # noqa: E501
            is_abstract (bool): [optional]  # noqa: E501
            is_import (bool): [optional]  # noqa: E501
            is_sealed (bool): [optional]  # noqa: E501
            is_special_name (bool): [optional]  # noqa: E501
            is_class (bool): [optional]  # noqa: E501
            is_nested_assembly (bool): [optional]  # noqa: E501
            is_nested_fam_and_assem (bool): [optional]  # noqa: E501
            is_nested_family (bool): [optional]  # noqa: E501
            is_nested_fam_or_assem (bool): [optional]  # noqa: E501
            is_nested_private (bool): [optional]  # noqa: E501
            is_nested_public (bool): [optional]  # noqa: E501
            is_not_public (bool): [optional]  # noqa: E501
            is_public (bool): [optional]  # noqa: E501
            is_auto_layout (bool): [optional]  # noqa: E501
            is_explicit_layout (bool): [optional]  # noqa: E501
            is_layout_sequential (bool): [optional]  # noqa: E501
            is_ansi_class (bool): [optional]  # noqa: E501
            is_auto_class (bool): [optional]  # noqa: E501
            is_unicode_class (bool): [optional]  # noqa: E501
            is_com_object (bool): [optional]  # noqa: E501
            is_contextful (bool): [optional]  # noqa: E501
            is_enum (bool): [optional]  # noqa: E501
            is_marshal_by_ref (bool): [optional]  # noqa: E501
            is_primitive (bool): [optional]  # noqa: E501
            is_value_type (bool): [optional]  # noqa: E501
            is_signature_type (bool): [optional]  # noqa: E501
            is_security_critical (bool): [optional]  # noqa: E501
            is_security_safe_critical (bool): [optional]  # noqa: E501
            is_security_transparent (bool): [optional]  # noqa: E501
            struct_layout_attribute (StructLayoutAttribute): [optional]  # noqa: E501
            type_initializer (ConstructorInfo): [optional]  # noqa: E501
            type_handle (RuntimeTypeHandle): [optional]  # noqa: E501
            guid (str): [optional]  # noqa: E501
            base_type (Type): [optional]  # noqa: E501
            is_serializable (bool): [optional]  # noqa: E501
            contains_generic_parameters (bool): [optional]  # noqa: E501
            is_visible (bool): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Type - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str, none_type): [optional]  # noqa: E501
            custom_attributes ([CustomAttributeData], none_type): [optional]  # noqa: E501
            is_collectible (bool): [optional]  # noqa: E501
            metadata_token (int): [optional]  # noqa: E501
            is_interface (bool): [optional]  # noqa: E501
            member_type (str): [optional]  # noqa: E501
            namespace (str, none_type): [optional]  # noqa: E501
            assembly_qualified_name (str, none_type): [optional]  # noqa: E501
            full_name (str, none_type): [optional]  # noqa: E501
            assembly (Assembly): [optional]  # noqa: E501
            module (Module): [optional]  # noqa: E501
            is_nested (bool): [optional]  # noqa: E501
            declaring_type (Type): [optional]  # noqa: E501
            declaring_method (MethodBase): [optional]  # noqa: E501
            reflected_type (Type): [optional]  # noqa: E501
            underlying_system_type (Type): [optional]  # noqa: E501
            is_type_definition (bool): [optional]  # noqa: E501
            is_array (bool): [optional]  # noqa: E501
            is_by_ref (bool): [optional]  # noqa: E501
            is_pointer (bool): [optional]  # noqa: E501
            is_constructed_generic_type (bool): [optional]  # noqa: E501
            is_generic_parameter (bool): [optional]  # noqa: E501
            is_generic_type_parameter (bool): [optional]  # noqa: E501
            is_generic_method_parameter (bool): [optional]  # noqa: E501
            is_generic_type (bool): [optional]  # noqa: E501
            is_generic_type_definition (bool): [optional]  # noqa: E501
            is_sz_array (bool): [optional]  # noqa: E501
            is_variable_bound_array (bool): [optional]  # noqa: E501
            is_by_ref_like (bool): [optional]  # noqa: E501
            has_element_type (bool): [optional]  # noqa: E501
            generic_type_arguments ([Type], none_type): [optional]  # noqa: E501
            generic_parameter_position (int): [optional]  # noqa: E501
            generic_parameter_attributes (str): [optional]  # noqa: E501
            attributes (str): [optional]  # noqa: E501
            is_abstract (bool): [optional]  # noqa: E501
            is_import (bool): [optional]  # noqa: E501
            is_sealed (bool): [optional]  # noqa: E501
            is_special_name (bool): [optional]  # noqa: E501
            is_class (bool): [optional]  # noqa: E501
            is_nested_assembly (bool): [optional]  # noqa: E501
            is_nested_fam_and_assem (bool): [optional]  # noqa: E501
            is_nested_family (bool): [optional]  # noqa: E501
            is_nested_fam_or_assem (bool): [optional]  # noqa: E501
            is_nested_private (bool): [optional]  # noqa: E501
            is_nested_public (bool): [optional]  # noqa: E501
            is_not_public (bool): [optional]  # noqa: E501
            is_public (bool): [optional]  # noqa: E501
            is_auto_layout (bool): [optional]  # noqa: E501
            is_explicit_layout (bool): [optional]  # noqa: E501
            is_layout_sequential (bool): [optional]  # noqa: E501
            is_ansi_class (bool): [optional]  # noqa: E501
            is_auto_class (bool): [optional]  # noqa: E501
            is_unicode_class (bool): [optional]  # noqa: E501
            is_com_object (bool): [optional]  # noqa: E501
            is_contextful (bool): [optional]  # noqa: E501
            is_enum (bool): [optional]  # noqa: E501
            is_marshal_by_ref (bool): [optional]  # noqa: E501
            is_primitive (bool): [optional]  # noqa: E501
            is_value_type (bool): [optional]  # noqa: E501
            is_signature_type (bool): [optional]  # noqa: E501
            is_security_critical (bool): [optional]  # noqa: E501
            is_security_safe_critical (bool): [optional]  # noqa: E501
            is_security_transparent (bool): [optional]  # noqa: E501
            struct_layout_attribute (StructLayoutAttribute): [optional]  # noqa: E501
            type_initializer (ConstructorInfo): [optional]  # noqa: E501
            type_handle (RuntimeTypeHandle): [optional]  # noqa: E501
            guid (str): [optional]  # noqa: E501
            base_type (Type): [optional]  # noqa: E501
            is_serializable (bool): [optional]  # noqa: E501
            contains_generic_parameters (bool): [optional]  # noqa: E501
            is_visible (bool): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
