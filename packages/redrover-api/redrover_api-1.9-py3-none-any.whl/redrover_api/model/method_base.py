"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`).  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from redrover_api.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from redrover_api.exceptions import ApiAttributeError


def lazy_import():
    from redrover_api.model.custom_attribute_data import CustomAttributeData
    from redrover_api.model.module import Module
    from redrover_api.model.runtime_method_handle import RuntimeMethodHandle
    from redrover_api.model.type import Type
    globals()['CustomAttributeData'] = CustomAttributeData
    globals()['Module'] = Module
    globals()['RuntimeMethodHandle'] = RuntimeMethodHandle
    globals()['Type'] = Type


class MethodBase(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('member_type',): {
            'CONSTRUCTOR': "Constructor",
            'EVENT': "Event",
            'FIELD': "Field",
            'METHOD': "Method",
            'PROPERTY': "Property",
            'TYPEINFO': "TypeInfo",
            'CUSTOM': "Custom",
            'NESTEDTYPE': "NestedType",
            'ALL': "All",
        },
        ('attributes',): {
            'REUSESLOT': "ReuseSlot",
            'PRIVATE': "Private",
            'FAMANDASSEM': "FamANDAssem",
            'ASSEMBLY': "Assembly",
            'FAMILY': "Family",
            'FAMORASSEM': "FamORAssem",
            'PUBLIC': "Public",
            'MEMBERACCESSMASK': "MemberAccessMask",
            'UNMANAGEDEXPORT': "UnmanagedExport",
            'STATIC': "Static",
            'FINAL': "Final",
            'VIRTUAL': "Virtual",
            'HIDEBYSIG': "HideBySig",
            'VTABLELAYOUTMASK': "VtableLayoutMask",
            'CHECKACCESSONOVERRIDE': "CheckAccessOnOverride",
            'ABSTRACT': "Abstract",
            'SPECIALNAME': "SpecialName",
            'RTSPECIALNAME': "RTSpecialName",
            'PINVOKEIMPL': "PinvokeImpl",
            'HASSECURITY': "HasSecurity",
            'REQUIRESECOBJECT': "RequireSecObject",
            'RESERVEDMASK': "ReservedMask",
        },
        ('method_implementation_flags',): {
            'MANAGED': "Managed",
            'NATIVE': "Native",
            'OPTIL': "OPTIL",
            'CODETYPEMASK': "CodeTypeMask",
            'UNMANAGED': "Unmanaged",
            'NOINLINING': "NoInlining",
            'FORWARDREF': "ForwardRef",
            'SYNCHRONIZED': "Synchronized",
            'NOOPTIMIZATION': "NoOptimization",
            'PRESERVESIG': "PreserveSig",
            'AGGRESSIVEINLINING': "AggressiveInlining",
            'AGGRESSIVEOPTIMIZATION': "AggressiveOptimization",
            'INTERNALCALL': "InternalCall",
            'MAXMETHODIMPLVAL': "MaxMethodImplVal",
        },
        ('calling_convention',): {
            'STANDARD': "Standard",
            'VARARGS': "VarArgs",
            'ANY': "Any",
            'HASTHIS': "HasThis",
            'EXPLICITTHIS': "ExplicitThis",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'member_type': (str,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'declaring_type': (Type,),  # noqa: E501
            'reflected_type': (Type,),  # noqa: E501
            'module': (Module,),  # noqa: E501
            'custom_attributes': ([CustomAttributeData], none_type,),  # noqa: E501
            'is_collectible': (bool,),  # noqa: E501
            'metadata_token': (int,),  # noqa: E501
            'attributes': (str,),  # noqa: E501
            'method_implementation_flags': (str,),  # noqa: E501
            'calling_convention': (str,),  # noqa: E501
            'is_abstract': (bool,),  # noqa: E501
            'is_constructor': (bool,),  # noqa: E501
            'is_final': (bool,),  # noqa: E501
            'is_hide_by_sig': (bool,),  # noqa: E501
            'is_special_name': (bool,),  # noqa: E501
            'is_static': (bool,),  # noqa: E501
            'is_virtual': (bool,),  # noqa: E501
            'is_assembly': (bool,),  # noqa: E501
            'is_family': (bool,),  # noqa: E501
            'is_family_and_assembly': (bool,),  # noqa: E501
            'is_family_or_assembly': (bool,),  # noqa: E501
            'is_private': (bool,),  # noqa: E501
            'is_public': (bool,),  # noqa: E501
            'is_constructed_generic_method': (bool,),  # noqa: E501
            'is_generic_method': (bool,),  # noqa: E501
            'is_generic_method_definition': (bool,),  # noqa: E501
            'contains_generic_parameters': (bool,),  # noqa: E501
            'method_handle': (RuntimeMethodHandle,),  # noqa: E501
            'is_security_critical': (bool,),  # noqa: E501
            'is_security_safe_critical': (bool,),  # noqa: E501
            'is_security_transparent': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'member_type': 'memberType',  # noqa: E501
        'name': 'name',  # noqa: E501
        'declaring_type': 'declaringType',  # noqa: E501
        'reflected_type': 'reflectedType',  # noqa: E501
        'module': 'module',  # noqa: E501
        'custom_attributes': 'customAttributes',  # noqa: E501
        'is_collectible': 'isCollectible',  # noqa: E501
        'metadata_token': 'metadataToken',  # noqa: E501
        'attributes': 'attributes',  # noqa: E501
        'method_implementation_flags': 'methodImplementationFlags',  # noqa: E501
        'calling_convention': 'callingConvention',  # noqa: E501
        'is_abstract': 'isAbstract',  # noqa: E501
        'is_constructor': 'isConstructor',  # noqa: E501
        'is_final': 'isFinal',  # noqa: E501
        'is_hide_by_sig': 'isHideBySig',  # noqa: E501
        'is_special_name': 'isSpecialName',  # noqa: E501
        'is_static': 'isStatic',  # noqa: E501
        'is_virtual': 'isVirtual',  # noqa: E501
        'is_assembly': 'isAssembly',  # noqa: E501
        'is_family': 'isFamily',  # noqa: E501
        'is_family_and_assembly': 'isFamilyAndAssembly',  # noqa: E501
        'is_family_or_assembly': 'isFamilyOrAssembly',  # noqa: E501
        'is_private': 'isPrivate',  # noqa: E501
        'is_public': 'isPublic',  # noqa: E501
        'is_constructed_generic_method': 'isConstructedGenericMethod',  # noqa: E501
        'is_generic_method': 'isGenericMethod',  # noqa: E501
        'is_generic_method_definition': 'isGenericMethodDefinition',  # noqa: E501
        'contains_generic_parameters': 'containsGenericParameters',  # noqa: E501
        'method_handle': 'methodHandle',  # noqa: E501
        'is_security_critical': 'isSecurityCritical',  # noqa: E501
        'is_security_safe_critical': 'isSecuritySafeCritical',  # noqa: E501
        'is_security_transparent': 'isSecurityTransparent',  # noqa: E501
    }

    read_only_vars = {
        'member_type',  # noqa: E501
        'name',  # noqa: E501
        'custom_attributes',  # noqa: E501
        'is_collectible',  # noqa: E501
        'metadata_token',  # noqa: E501
        'attributes',  # noqa: E501
        'method_implementation_flags',  # noqa: E501
        'calling_convention',  # noqa: E501
        'is_abstract',  # noqa: E501
        'is_constructor',  # noqa: E501
        'is_final',  # noqa: E501
        'is_hide_by_sig',  # noqa: E501
        'is_special_name',  # noqa: E501
        'is_static',  # noqa: E501
        'is_virtual',  # noqa: E501
        'is_assembly',  # noqa: E501
        'is_family',  # noqa: E501
        'is_family_and_assembly',  # noqa: E501
        'is_family_or_assembly',  # noqa: E501
        'is_private',  # noqa: E501
        'is_public',  # noqa: E501
        'is_constructed_generic_method',  # noqa: E501
        'is_generic_method',  # noqa: E501
        'is_generic_method_definition',  # noqa: E501
        'contains_generic_parameters',  # noqa: E501
        'is_security_critical',  # noqa: E501
        'is_security_safe_critical',  # noqa: E501
        'is_security_transparent',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """MethodBase - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            member_type (str): [optional]  # noqa: E501
            name (str, none_type): [optional]  # noqa: E501
            declaring_type (Type): [optional]  # noqa: E501
            reflected_type (Type): [optional]  # noqa: E501
            module (Module): [optional]  # noqa: E501
            custom_attributes ([CustomAttributeData], none_type): [optional]  # noqa: E501
            is_collectible (bool): [optional]  # noqa: E501
            metadata_token (int): [optional]  # noqa: E501
            attributes (str): [optional]  # noqa: E501
            method_implementation_flags (str): [optional]  # noqa: E501
            calling_convention (str): [optional]  # noqa: E501
            is_abstract (bool): [optional]  # noqa: E501
            is_constructor (bool): [optional]  # noqa: E501
            is_final (bool): [optional]  # noqa: E501
            is_hide_by_sig (bool): [optional]  # noqa: E501
            is_special_name (bool): [optional]  # noqa: E501
            is_static (bool): [optional]  # noqa: E501
            is_virtual (bool): [optional]  # noqa: E501
            is_assembly (bool): [optional]  # noqa: E501
            is_family (bool): [optional]  # noqa: E501
            is_family_and_assembly (bool): [optional]  # noqa: E501
            is_family_or_assembly (bool): [optional]  # noqa: E501
            is_private (bool): [optional]  # noqa: E501
            is_public (bool): [optional]  # noqa: E501
            is_constructed_generic_method (bool): [optional]  # noqa: E501
            is_generic_method (bool): [optional]  # noqa: E501
            is_generic_method_definition (bool): [optional]  # noqa: E501
            contains_generic_parameters (bool): [optional]  # noqa: E501
            method_handle (RuntimeMethodHandle): [optional]  # noqa: E501
            is_security_critical (bool): [optional]  # noqa: E501
            is_security_safe_critical (bool): [optional]  # noqa: E501
            is_security_transparent (bool): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """MethodBase - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            member_type (str): [optional]  # noqa: E501
            name (str, none_type): [optional]  # noqa: E501
            declaring_type (Type): [optional]  # noqa: E501
            reflected_type (Type): [optional]  # noqa: E501
            module (Module): [optional]  # noqa: E501
            custom_attributes ([CustomAttributeData], none_type): [optional]  # noqa: E501
            is_collectible (bool): [optional]  # noqa: E501
            metadata_token (int): [optional]  # noqa: E501
            attributes (str): [optional]  # noqa: E501
            method_implementation_flags (str): [optional]  # noqa: E501
            calling_convention (str): [optional]  # noqa: E501
            is_abstract (bool): [optional]  # noqa: E501
            is_constructor (bool): [optional]  # noqa: E501
            is_final (bool): [optional]  # noqa: E501
            is_hide_by_sig (bool): [optional]  # noqa: E501
            is_special_name (bool): [optional]  # noqa: E501
            is_static (bool): [optional]  # noqa: E501
            is_virtual (bool): [optional]  # noqa: E501
            is_assembly (bool): [optional]  # noqa: E501
            is_family (bool): [optional]  # noqa: E501
            is_family_and_assembly (bool): [optional]  # noqa: E501
            is_family_or_assembly (bool): [optional]  # noqa: E501
            is_private (bool): [optional]  # noqa: E501
            is_public (bool): [optional]  # noqa: E501
            is_constructed_generic_method (bool): [optional]  # noqa: E501
            is_generic_method (bool): [optional]  # noqa: E501
            is_generic_method_definition (bool): [optional]  # noqa: E501
            contains_generic_parameters (bool): [optional]  # noqa: E501
            method_handle (RuntimeMethodHandle): [optional]  # noqa: E501
            is_security_critical (bool): [optional]  # noqa: E501
            is_security_safe_critical (bool): [optional]  # noqa: E501
            is_security_transparent (bool): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
