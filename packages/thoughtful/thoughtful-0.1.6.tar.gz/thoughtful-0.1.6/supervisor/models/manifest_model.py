# generated by datamodel-codegen:
#   filename:  manifest.json
#   timestamp: 2021-11-06T17:50:49+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, constr


class Author(BaseModel):

    class Config:
        extra = Extra.forbid

    email: Optional[str] = Field(
        None,
        description='An optional email for contacting this person or entity',
        title='email',
    )
    name: str = Field(...,
                      description='The name of this person or entity',
                      title='name')
    url: Optional[AnyUrl] = Field(
        None,
        description='An optional url for this person or entity',
        title='url')


class WhenFalse(BaseModel):

    class Config:
        extra = Extra.forbid

    description: Optional[constr(max_length=500)] = Field(
        None, description='Full description of the step', title='description')
    next_step_id: str = Field(
        ...,
        description=
        'The step ID of the next step if this step evaluates to false',
        title='next_step_id',
    )
    step_id: Optional[str] = Field(
        None,
        description=
        'A unique identifier for a step. A string of numbers, using dot notation\nto signify the hierarchy of the workflow.',
        title='step_id',
    )
    title: Optional[constr(max_length=255)] = Field(
        None, description='Title description of the step', title='title')


class WhenTrue(BaseModel):

    class Config:
        extra = Extra.forbid

    description: Optional[constr(max_length=500)] = Field(
        None, description='Full description of the step', title='description')
    next_step_id: str = Field(
        ...,
        description=
        'The step ID of the next step if this step evaluates to true',
        title='next_step_id',
    )
    step_id: Optional[str] = Field(
        None,
        description=
        'A unique identifier for a step. A string of numbers, using dot notation\nto signify the hierarchy of the workflow.',
        title='step_id',
    )
    title: Optional[constr(max_length=255)] = Field(
        None, description='Title description of the step', title='title')


class TruthyStep(BaseModel):

    class Config:
        extra = Extra.forbid

    description: constr(max_length=500) = Field(
        ..., description='Full description of the step', title='description')
    step_id: str = Field(
        ...,
        description=
        'A unique identifier for a step. A string of numbers, using dot notation\nto signify the hierarchy of the workflow.',
        title='step_id',
    )
    title: Optional[constr(max_length=255)] = Field(
        None, description='Title description of the step', title='title')
    when_false: WhenFalse = Field(
        ...,
        description=
        'A description of what happens if this step evaluates to false.\nThe only required field is `next_step_id` which should contain\nthe id of the step to go to if this step evaluates to false.\n\nHowever, this can optionally contain any of the same fields as a step.\n\nEven additional children steps can be added (but should only be used\nif there are a small number of steps which only pertain to a false value)',
        title='when_false',
    )
    when_true: WhenTrue = Field(
        ...,
        description=
        'A description of what happens if this step evaluates to true.\nThe only required field is `next_step_id` which should contain\nthe id of the step to go to if this step evaluates to true.\n\nHowever, this can optionally contain any of the same fields as a step.\n\nEven additional children steps can be added (but should only be used\nif there are a small number of steps which only pertain to a true value)',
        title='when_true',
    )


class Step(BaseModel):

    class Config:
        extra = Extra.forbid

    description: constr(max_length=500) = Field(
        ..., description='Full description of the step', title='description')
    step_id: str = Field(
        ...,
        description=
        'A unique identifier for a step. A string of numbers, using dot notation\nto signify the hierarchy of the workflow.',
        title='step_id',
    )
    steps: Optional[List[Union[Step, TruthyStep]]] = Field(
        None, description='Steps can have infinite nested steps', title='steps')
    title: Optional[constr(max_length=255)] = Field(
        None, description='Title description of the step', title='title')


class Model(BaseModel):

    class Config:
        extra = Extra.forbid

    author: Optional[Author] = Field(
        None,
        description='An explanation about the purpose of the digital worker',
        title='author',
    )
    contributors: Optional[List[Author]] = Field(
        None,
        description='A list of people who contributed to this digital worker',
        title='contributors',
    )
    description: str = Field(
        ...,
        description='An explanation about the purpose of the digital worker',
        title='description',
    )
    maintainers: Optional[List[Author]] = Field(
        None,
        description='A list of people who maintains this digital worker',
        title='maintainers',
    )
    name: constr(regex=r'[A-Za-z0-9\s]', min_length=1, max_length=214) = Field(
        ...,
        description=
        'The name must be less than or equal to 214 characters.\nThe name may be a human-readable version of the uid.',
        title='name',
    )
    source: Optional[str] = Field(
        None,
        description='The source url of this digital worker (vcs)',
        title='source')
    uid: constr(regex=r'[A-Za-z0-9_]') = Field(
        ...,
        description=
        'Uniquely defines the digital worker. Must be a unique string, all uppercase\nand can contain and combination of letters, numbers, and underscores.',
        title='uid',
    )
    workflow: List[Union[Step, TruthyStep]] = Field(
        ...,
        description=
        'The workflow steps of this digital worker.\n\nGenerally, the first set of steps are considered "Macro Steps". These steps\nare high-level groupings of implementation steps ("Login", "Extract data\nfrom excel", "fill in form"), each macro-step has a set of implementation /\nmicro-step that correlate to a specific action in the workflow. Every step\ncan contain an infinite number of children steps, infinitely deep. The key\nis to log as many steps as possible in the workflow, in order to optimize\nthe visibility and readability of the work report.',
        examples=[
            {
                'description':
                    'Macro steps should contain a grouping of related top-level steps',
                'step_id':
                    '1',
                'steps': [{
                    'description': 'A top-level step, grouped by a macro step',
                    'step_id': '1.1',
                    'steps': [{
                        'description':
                            'While each level of a step can contain multiple ',
                        'step_id':
                            '1.1.1',
                        'title':
                            'Implementation Step',
                    }],
                    'title': 'Top-Level Step',
                }],
                'title':
                    'A macro step, which should contain a grouping of related top-level steps',
            },
            {
                'description':
                    'Steps are executed in linear order, from macro to the deepest micro step, and then on to the next macro step. However, some steps can be conditionally executed to evaluate a truthy statement returned by the implementation source.',
                'step_id':
                    '2',
                'steps': [{
                    'description':
                        "A truthy step is a lot like a normal step. The only difference is that truthy steps do not have a set of child steps, they only require both a `true` and `false` field. True/False fields are in and of themselves `step` objects. However, these step objects don't have ANY required fields of a normal step. They do, however, have one extra field called `next_step_id` which is required, and must contain a string of a step id that exists elsewhere in the workflow. Be careful not to get caught in a never ending loop.",
                    'step_id':
                        '2.1',
                    'title':
                        'Is this step result in a true or false value?',
                    'when_false': {
                        'next_step_id': '1.1'
                    },
                    'when_true': {
                        'description':
                            'A true/false field can have all of the same fields a step has, but the only required field is the next_step_id',
                        'next_step_id':
                            '2.2',
                    },
                }],
                'title':
                    'Implementation Truthy Step',
            },
        ],
        title='workflow',
    )
