# generated by datamodel-codegen:
#   filename:  report.json.json
#   timestamp: 2021-11-06T17:50:49+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, constr


class Author(BaseModel):

    class Config:
        extra = Extra.forbid

    email: Optional[str] = Field(
        None,
        description='An optional email for contacting this person or entity',
        title='email',
    )
    name: str = Field(...,
                      description='The name of this person or entity',
                      title='name')
    url: Optional[AnyUrl] = Field(
        None,
        description='An optional url for this person or entity',
        title='url')


class Arg(BaseModel):

    class Config:
        extra = Extra.forbid

    key: str = Field(..., title='key')
    value: Any = Field(..., title='value')


class StateItem(BaseModel):

    class Config:
        extra = Extra.forbid

    key: str = Field(..., title='key')
    value: Any = Field(..., title='value')


class Step(BaseModel):

    class Config:
        extra = Extra.forbid

    args: Optional[List[Arg]] = Field(
        None,
        description='Arguments provided to this step',
        max_items=1,
        min_items=1,
        title='args',
    )
    description: constr(max_length=500) = Field(
        ..., description='Full description of the step', title='description')
    duration: float = Field(
        ...,
        description='Milliseconds for the duration of the step execution',
        title='duration',
    )
    returned: Optional[Any] = Field(
        None,
        description='If a step returns a value, it will be included here',
        title='returned',
    )
    state: Optional[List[StateItem]] = Field(
        None,
        description='State used by this step',
        max_items=1,
        min_items=1,
        title='state',
    )
    step_id: str = Field(
        ...,
        description=
        'A unique identifier for a step. A string of numbers, using dot notation\nto signify the hierarchy of the workflow.',
        title='step_id',
    )
    timestamp: datetime = Field(
        ...,
        description='Timestamp for when this step was started',
        title='timestamp')
    title: Optional[constr(max_length=255)] = Field(
        None, description='Title description of the step', title='title')


class Arg1(BaseModel):

    class Config:
        extra = Extra.forbid

    key: str = Field(..., title='key')
    value: Any = Field(..., title='value')


class StateItem1(BaseModel):

    class Config:
        extra = Extra.forbid

    key: str = Field(..., title='key')
    value: Any = Field(..., title='value')


class TruthyStep(BaseModel):

    class Config:
        extra = Extra.forbid

    args: Optional[List[Arg1]] = Field(
        None,
        description='Arguments provided to this step',
        max_items=1,
        min_items=1,
        title='args',
    )
    description: constr(max_length=500) = Field(
        ..., description='Full description of the step', title='description')
    duration: float = Field(
        ...,
        description='Milliseconds for the duration of the step execution',
        title='duration',
    )
    returned: bool = Field(...,
                           description='The result of the truthy step',
                           title='returned')
    state: Optional[List[StateItem1]] = Field(
        None,
        description='State used by this step',
        max_items=1,
        min_items=1,
        title='state',
    )
    step_id: str = Field(
        ...,
        description=
        'A unique identifier for a step. A string of numbers, using dot notation\nto signify the hierarchy of the workflow.',
        title='step_id',
    )
    timestamp: datetime = Field(
        ...,
        description='Timestamp for when this step was started',
        title='timestamp')
    title: Optional[constr(max_length=255)] = Field(
        None, description='Title description of the step', title='title')


class DigitalWorkerSchema(BaseModel):

    class Config:
        extra = Extra.forbid

    author: Optional[Author] = Field(
        None,
        description='An explanation about the purpose of the digital worker',
        title='author',
    )
    contributors: Optional[List[Author]] = Field(
        None,
        description='A list of people who contributed to this digital worker',
        title='contributors',
    )
    description: str = Field(
        ...,
        description='An explanation about the purpose of the digital worker',
        title='description',
    )
    maintainers: Optional[List[Author]] = Field(
        None,
        description='A list of people who maintains this digital worker',
        title='maintainers',
    )
    name: constr(regex=r'[A-Za-z0-9\s]', min_length=1, max_length=214) = Field(
        ...,
        description=
        'The name must be less than or equal to 214 characters.\nThe name may be a human-readable version of the uid.',
        title='name',
    )
    source: Optional[str] = Field(
        None,
        description='The source url of this digital worker (vcs)',
        title='source')
    uid: constr(regex=r'[A-Za-z0-9_]') = Field(
        ...,
        description=
        'Uniquely defines the digital worker. Must be a unique string, all uppercase\nand can contain and combination of letters, numbers, and underscores.',
        title='uid',
    )


class Model(BaseModel):

    class Config:
        extra = Extra.forbid

    duration: float = Field(
        ...,
        description=
        'Duration (in milliseconds) for how long the digital worker was running',
        title='duration',
    )
    timestamp: datetime = Field(
        ...,
        description='Timestamp for when this digital worker was run',
        title='timestamp',
    )
    version: str = Field(
        ...,
        description=
        'A version used of this digital worker, to perform this work.\nOften, this is a vcs commit hash (git SHA).',
        title='version',
    )
    worker: DigitalWorkerSchema = Field(
        ..., description='The digital worker definition', title='worker')
    workflow: List[Union[Step, TruthyStep]] = Field(
        ...,
        description='The workflow steps of this digital worker',
        examples=[
            {
                'description':
                    'Unlike a manifest workflow, which can be hierarchical, the runtime report is always a linear histographic of the execution timeline',
                'duration':
                    10800,
                'step_id':
                    '1',
                'timestamp':
                    '2018-11-13T20:20:39+00:00',
                'title':
                    'Step 1 Macro',
            },
            {
                'description':
                    'A top-level step, grouped by a macro step. However, within a runtime report, the only indication of the hierarchy is the Step ID structure',
                'duration':
                    10800,
                'step_id':
                    '1.1',
                'timestamp':
                    '2018-11-13T20:20:39+00:00',
                'title':
                    'Implementation Step 1.1',
            },
            {
                'description':
                    'While each level of a step can contain multiple ',
                'duration':
                    10800,
                'returned':
                    True,
                'step_id':
                    '1.2',
                'timestamp':
                    '2018-11-13T20:20:39+00:00',
                'title':
                    'Implementation Step 1.2',
            },
        ],
        title='workflow',
    )
