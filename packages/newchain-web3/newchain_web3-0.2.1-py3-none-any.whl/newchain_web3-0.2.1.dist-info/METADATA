Metadata-Version: 2.1
Name: newchain-web3
Version: 0.2.1
Summary: NewChain-Web3.py
Home-page: https://github.com/newtonproject/newchain-lib-web3-py
Author: Xia Wu
Author-email: xiawu@zeuux.org
License: MIT
Keywords: newchain
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.7.2
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp (<4,>=3.7.4.post0)
Requires-Dist: eth-abi (<4.0.0,>=3.0.0)
Requires-Dist: newchain-account (>=0.3.0)
Requires-Dist: eth-hash[pycryptodome] (<1.0.0,>=0.2.0)
Requires-Dist: eth-typing (<4.0.0,>=3.0.0)
Requires-Dist: eth-utils (<3.0.0,>=2.0.0)
Requires-Dist: hexbytes (<1.0.0,>=0.1.0)
Requires-Dist: ipfshttpclient (==0.8.0a2)
Requires-Dist: jsonschema (<5,>=4.0.0)
Requires-Dist: lru-dict (<2.0.0,>=1.1.6)
Requires-Dist: protobuf (<4,>=3.10.0)
Requires-Dist: requests (<3.0.0,>=2.16.0)
Requires-Dist: websockets (<11,>=10.0.0)
Requires-Dist: pywin32 (>=223) ; platform_system == "Windows"
Requires-Dist: typing-extensions (<5,>=3.7.4.1) ; python_version < "3.8"
Provides-Extra: dev
Requires-Dist: eth-tester[py-evm] (==v0.7.0-beta.1) ; extra == 'dev'
Requires-Dist: py-geth (<4,>=3.9.1) ; extra == 'dev'
Requires-Dist: black (<23.0,>=22.1.0) ; extra == 'dev'
Requires-Dist: flake8 (==3.8.3) ; extra == 'dev'
Requires-Dist: isort (<4.3.5,>=4.2.15) ; extra == 'dev'
Requires-Dist: mypy (==0.910) ; extra == 'dev'
Requires-Dist: types-setuptools (<58,>=57.4.4) ; extra == 'dev'
Requires-Dist: types-requests (<3,>=2.26.1) ; extra == 'dev'
Requires-Dist: types-protobuf (==3.19.13) ; extra == 'dev'
Requires-Dist: mock ; extra == 'dev'
Requires-Dist: sphinx-better-theme (>=0.1.4) ; extra == 'dev'
Requires-Dist: click (>=5.1) ; extra == 'dev'
Requires-Dist: configparser (==3.5.0) ; extra == 'dev'
Requires-Dist: contextlib2 (>=0.5.4) ; extra == 'dev'
Requires-Dist: py-solc (>=0.4.0) ; extra == 'dev'
Requires-Dist: pytest (<7,>=6.2.5) ; extra == 'dev'
Requires-Dist: sphinx (<5,>=4.2.0) ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme (>=0.1.9) ; extra == 'dev'
Requires-Dist: toposort (>=1.4) ; extra == 'dev'
Requires-Dist: towncrier (==18.5.0) ; extra == 'dev'
Requires-Dist: urllib3 ; extra == 'dev'
Requires-Dist: wheel ; extra == 'dev'
Requires-Dist: bumpversion ; extra == 'dev'
Requires-Dist: flaky (<4,>=3.7.0) ; extra == 'dev'
Requires-Dist: hypothesis (<6,>=3.31.2) ; extra == 'dev'
Requires-Dist: pytest-asyncio (<0.19,>=0.18.1) ; extra == 'dev'
Requires-Dist: pytest-mock (<2,>=1.10) ; extra == 'dev'
Requires-Dist: pytest-pythonpath (>=0.3) ; extra == 'dev'
Requires-Dist: pytest-watch (<5,>=4.2) ; extra == 'dev'
Requires-Dist: pytest-xdist (<2,>=1.29) ; extra == 'dev'
Requires-Dist: setuptools (>=38.6.0) ; extra == 'dev'
Requires-Dist: tox (>=1.8.0) ; extra == 'dev'
Requires-Dist: tqdm (<5,>4.32) ; extra == 'dev'
Requires-Dist: twine (<2,>=1.13) ; extra == 'dev'
Requires-Dist: pluggy (==0.13.1) ; extra == 'dev'
Requires-Dist: when-changed (<0.4,>=0.3.0) ; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mock ; extra == 'docs'
Requires-Dist: sphinx-better-theme (>=0.1.4) ; extra == 'docs'
Requires-Dist: click (>=5.1) ; extra == 'docs'
Requires-Dist: configparser (==3.5.0) ; extra == 'docs'
Requires-Dist: contextlib2 (>=0.5.4) ; extra == 'docs'
Requires-Dist: py-geth (<4,>=3.9.1) ; extra == 'docs'
Requires-Dist: py-solc (>=0.4.0) ; extra == 'docs'
Requires-Dist: pytest (<7,>=6.2.5) ; extra == 'docs'
Requires-Dist: sphinx (<5,>=4.2.0) ; extra == 'docs'
Requires-Dist: sphinx-rtd-theme (>=0.1.9) ; extra == 'docs'
Requires-Dist: toposort (>=1.4) ; extra == 'docs'
Requires-Dist: towncrier (==18.5.0) ; extra == 'docs'
Requires-Dist: urllib3 ; extra == 'docs'
Requires-Dist: wheel ; extra == 'docs'
Provides-Extra: linter
Requires-Dist: black (<23.0,>=22.1.0) ; extra == 'linter'
Requires-Dist: flake8 (==3.8.3) ; extra == 'linter'
Requires-Dist: isort (<4.3.5,>=4.2.15) ; extra == 'linter'
Requires-Dist: mypy (==0.910) ; extra == 'linter'
Requires-Dist: types-setuptools (<58,>=57.4.4) ; extra == 'linter'
Requires-Dist: types-requests (<3,>=2.26.1) ; extra == 'linter'
Requires-Dist: types-protobuf (==3.19.13) ; extra == 'linter'
Provides-Extra: tester
Requires-Dist: eth-tester[py-evm] (==v0.7.0-beta.1) ; extra == 'tester'
Requires-Dist: py-geth (<4,>=3.9.1) ; extra == 'tester'

# Web3.py

A Python implementation of NewChain Web3 which is forked from https://github.com/ethereum/web3.py.

* Python 3.7.2+ support

## Developer Setup

```sh
git clone git@github.com:xiawu/newchain-web3.py.git
cd newchain-web3.py
```

Please see OS-specific instructions for:

- [Linux](docs/README-linux.md#Developer-Setup)
- [Mac](docs/README-osx.md#Developer-Setup)
- [Windows](docs/README-windows.md#Developer-Setup)
- [FreeBSD](docs/README-freebsd.md#Developer-Setup)

Then run these install commands:

```sh
virtualenv venv
. venv/bin/activate
pip install -e .[dev]
```

For different environments, you can set up multiple `virtualenv`. For example, if you want to create a `venvdocs`, then you do the following:

```sh
virtualenv venvdocs
. venvdocs/bin/activate
pip install -e .[docs]
pip install -e .
```

## Using Docker

If you would like to develop and test inside a Docker environment, use the *sandbox* container provided in the **docker-compose.yml** file.

To start up the test environment, run:

```
docker-compose up -d
```

This will build a Docker container set up with an environment to run the Python test code.  

**Note: This container does not have `go-ethereum` installed, so you cannot run the go-ethereum test suite.**

To run the Python tests from your local machine:

```
docker-compose exec sandbox bash -c 'pytest -n 4 -f -k "not goethereum"'
```

You can run arbitrary commands inside the Docker container by using the `bash -c` prefix.

```
docker-compose exec sandbox bash -c ''
```

Or, if you would like to just open a session to the container, run:

```
docker-compose exec sandbox bash
```

### Testing Setup

During development, you might like to have tests run on every file save.

Show flake8 errors on file change:

```sh
# Test flake8
when-changed -v -s -r -1 web3/ tests/ ens/ -c "clear; flake8 web3 tests ens && echo 'flake8 success' || echo 'error'"
```

You can use `pytest-watch`, running one for every Python environment:

```sh
pip install pytest-watch

cd venv
ptw --onfail "notify-send -t 5000 'Test failure ⚠⚠⚠⚠⚠' 'python 3 test on web3.py failed'" ../tests ../newchain_web3
```

Or, you can run multi-process tests in one command, but without color:

```sh
# in the project root:
pytest --numprocesses=4 --looponfail --maxfail=1
# the same thing, succinctly:
pytest -n 4 -f --maxfail=1
```

#### How to Execute the Tests?

1. [Setup your development environment](https://github.com/ethereum/web3.py/#developer-setup).

2. Execute `tox` for the tests

There are multiple [components](https://github.com/ethereum/web3.py/blob/master/.travis.yml#L53) of the tests. You can run test to against specific component. For example:

```sh
# Run Tests for the Core component (for Python 3.5):
tox -e py35-core

# Run Tests for the Core component (for Python 3.6):
tox -e py36-core
```

If for some reason it is not working, add `--recreate` params.

`tox` is good for testing against the full set of build targets. But if you want to run the tests individually, `py.test` is better for development workflow. For example, to run only the tests in one file:

```sh
py.test tests/core/gas-strategies/test_time_based_gas_price_strategy.py
```

### Release setup

For Debian-like systems:
```
apt install pandoc
```

To release a new version:

```sh
make release bump=$$VERSION_PART_TO_BUMP$$
```

#### How to bumpversion

The version format for this repo is `{major}.{minor}.{patch}` for stable, and
`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).

To issue the next version in line, specify which part to bump,
like `make release bump=minor` or `make release bump=devnum`.

If you are in a beta version, `make release bump=stage` will switch to a stable.

To issue an unstable version when the current version is stable, specify the
new version explicitly, like `make release bump="--new-version 4.0.0-alpha.1 devnum"`
