"""Report vulnerability Mixin.

Definition of the main method to process an entry from the KB - Knowledge Base,
and emit a vulnerability message.
"""
from typing import Optional
import enum

from ostorlab.agent.mixins.protocols import emit
from ostorlab.agent.kb import kb


class RiskRating(enum.Enum):
    """Risk ratings enumeration."""
    HIGH = enum.auto()
    MEDIUM = enum.auto()
    LOW = enum.auto()
    POTENTIALLY = enum.auto()
    HARDENING = enum.auto()
    SECURE = enum.auto()
    IMPORTANT = enum.auto()
    INFO = enum.auto()

class AgentReportVulnMixin(emit.EmitProtocol):
    """Report Vulnerability class implementing logic of fetching entries from the knowledge base,
    and emitting vulnerability messages."""

    def report_vulnerability(self,
                             entry: kb.Entry,
                             technical_detail: str,
                             risk_rating: RiskRating,
                             dna: Optional[str] = None) -> None:
        """Fetch the details of an entry from the knowledge base, and emit a vulnerability message.
        Args:
            entry: knowledge base entry.
            technical_detail: markdown of the scan results.
            risk_rating: the risk rating assigned to the result of the scan.
            dna: unique identifier for duplicate vulnerabilities.
        Returns:
            None
        """
        title = entry.title
        short_description = entry.short_description
        description = entry.description
        recommendation = entry.recommendation
        security_issue = entry.security_issue
        privacy_issue = entry.privacy_issue
        has_public_exploit = entry.has_public_exploit
        targeted_by_malware = entry.targeted_by_malware
        targeted_by_ransomware = entry.targeted_by_ransomware
        targeted_by_nation_state = entry.targeted_by_nation_state
        cvss_v3_vector = entry.cvss_v3_vector

        references = []
        for key, value in entry.references.items():
            reference = {}
            reference['title'] = key
            reference['url'] = value
            references.append(reference)

        data = {
            'title': title,
            'technical_detail': technical_detail,
            'risk_rating': risk_rating.name,
            'short_description': short_description,
            'description': description,
            'recommendation': recommendation,
            'references': references,
            'security_issue': security_issue,
            'privacy_issue': privacy_issue,
            'has_public_exploit': has_public_exploit,
            'targeted_by_malware': targeted_by_malware,
            'targeted_by_ransomware': targeted_by_ransomware,
            'targeted_by_nation_state': targeted_by_nation_state,
            'cvss_v3_vector': cvss_v3_vector,
            'dna': dna
        }

        # if dna is not specified, it should not be provided to the portal otherwise it will cause a problem.
        if dna is None:
            data.pop('dna')

        selector = 'v3.report.vulnerability'
        self.emit(selector, data)
