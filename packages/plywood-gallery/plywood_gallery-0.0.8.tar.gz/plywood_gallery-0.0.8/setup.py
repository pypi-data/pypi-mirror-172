# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['plywood_gallery']

package_data = \
{'': ['*'],
 'plywood_gallery': ['jinja2_template/*',
                     'quickstart_template/*',
                     'quickstart_template/gallery_assets/*']}

install_requires = \
['Flask>=2.0.2',
 'Jinja2>=3.1.1',
 'Pillow>=9.0.0,<10.0.0',
 'PyYAML>=6.0',
 'ipykernel>=6.7.0',
 'ipython>=7.31.0',
 'watchdog>=2.1.6']

setup_kwargs = {
    'name': 'plywood-gallery',
    'version': '0.0.8',
    'description': 'Jupyter cell magic that turns images from cell output into a  gallery',
    'long_description': '# Plywood Gallery ðŸªµ\n\nThis repo will turn your Jupyter cell output images into a gallery, that enables you to quickly access your code by clicking on the gallery entries. Thereby, one can distinguish three cell types: "Header", "Normal" and "Dependent". \nYou can find an minimal example gallery here:   \nhttps://kolibril13.github.io/plywood-gallery-minimal-example/   \n*Add Screen recording Here*  \n**NOTE: Still work in progress, there might be breaking changes**\n\n# Installation\n\n* Install with  \n    ```\n    pip install plywood-gallery\n    ```\n\n* Open a python console and type:\n    ```py\n    >>> from plywood_gallery import quickstart, generate_html\n    >>> quickstart()\n    >>> # now, set project details in gallery_config.yaml e.g. project name, description, etc. \n    >>> generate_html(yaml_file="gallery_config.yaml", html_file="index.html")\n    ```\nAll needed files are now generated.  \n* Open `index.html`.  This can be done eighter by `from plywood_gallery import open_webpage; open_webpage()` or in VS Code select \'Live Preview: Show Preview\' in VS Code to start the page with a server.  \n* Add your code to `gallery.ipynb`.   \n\n* Start crafting!\n* Note: Everytime you change settings in `gallery_config.yaml` the function `generate_html` has to be called. This can be done with the also created helper notebook called `build_html`.\n\n# Intended workflow\n\nAdd the **`%%capture_png`** magic in Jupyter cells and the output images will automatically and in real-time be added to your gallery.   \nThere will be two phases of building the gallery, the *preparation phase* and the *deployment phase.*\n\n## 1. Preparation phase\n\nDuring the preparation phase, you can tinker around your cells and debug them and run them again and again.\n\nEvery single cell run will create a new entry in the plywood gallery, so running cell A and cell B  in the order AABABB will also display the cells in the order AABABB and no previous cells will be overwritten. \nThis behavior can also be used to have a visual version control system of your notebook execution history. \nThis is nothing else than a visual notebook execution history, and therefore can be used as a version control system about how your plots and graphics evolve over the preparation process.  \nThere is no "replace plywood gallery entry" yet, but might be implemented in the future, which would render AABABB to AB.\n\n## 2. Deployment phase\n\nWhen you want to publish your gallery notebook e.g. on GitHub pages, then first clean all cells from the preparation phase with the ChapterConfig  \n```py\nfrom plywood_tools import ChapterConfig\nChapterConfig.clean_all() # cleans all cells from all chapters\n#ChapterConfig.clean("Array 2D")  # cleans all cells from a specified chapter\n```\n\nAnd all previous cells will be deleted.\nNext, restart the kernel and click "Run All".\n\n**Why is the kernel restart necessary?**  \nIn the deployment phase, it is very important that cells are executed from top to button with a freshly started kernel to avoid unwanted artifacts from the preparation phase.\n\n# User guide\n\n**Chapters**  \n\nAll gallery entries need to be in chapters, chapter names are defined like this:\n```py\nfrom plywood_gallery import ChapterConfig\nChapterConfig.set_chapter_name("Array 2D")\n```\nAs soon as there is a new name assigned, this new chapter will be added in the gallery below.\nChapters can be sorted by \n```py\nfrom plywood_gallery import ChapterConfig\nChapterConfig.sort(["2D Array", "3D Arrays"]) # Not yet Implemented\n```\n\n**Cellmagic**  \nOne can run the `%%capture_png` with three arguments:\n```\n--path: (required)\n    the path where the image will be saved to\n--celltype: (optional)\n    Cell can be of type \'Normal\', \'Header\', and \'Dependent\'\n--style: (optional)\n    Add extra css style for the gallery enteries\n```\n**--path**:  \nA basic cell can look like this:\n```py\n%%capture_png --path MyExample.png\nimport matplotlib.pyplot as plt\nplt.plot([1,2],[10,20])\n```\nThis will generate the file `gallery_assets/2D_Arrays_001_MyExample.png`. Note that plywood makes sure that file names are unique and can be easily sorted in the file explorer.\nRunning this cell again would generate `gallery_assets/2D_Arrays_002_MyExample.png`.   \n**--style**:  \nChange the gallery entries size, border width or whatever is possible in CSS!  \n**--celltype**:    \nThis is a very powerful feature that has to be used carefully.  \nHere is their purpose:  \n\n* **Header:**  \nDefine imports and make definitions of functions\n\n* **Normal:**  \nShow usage of imports and functions that you\'ve made in the header cell. WARNING: All normal cells should ALWAYS be independent of each other. Try to not change variables in these cells, and if you have to, make sure to not use them in other normal cells again. If you need to use them again, make sure to rest their value before adding another "Normal cell". This is crucial because a user should always be able to run the cell in the combination "Header+Normal"\n* **Dependent**:  \nThe purpose of this cell is to show slight changes of function calls or post-processing of what happened in a "Normal cell". It should only have very few lines of code and only change as few parameters as possible. That makes it possible, to see the slight visual adjustments in plots, and then easily associate the code changes with the visual changes. "Dependent" Cells can be run in the combination "Header+Normal+Dependent", but also "Header+Normal+Dependent+Dependent".\n\n\n\n**Side Note: Why is this useful?**   \nCurrent sphinx documentation of SciPy, Matplotlib, scikit-image, etc. have really nice examples, but they might be complex and convoluted (E.g. [this Matplotlib ImageGrid example](https://matplotlib.org/3.5.1/gallery/axes_grid1/demo_axes_grid.html) with 117 lines of code).\nThis new gallery approach has the potential to declutter graphical examples drastically, by splitting them into small chunks that are easy to grasp (Same Matplotlib ImageGrid as  [plywood example here](https://kolibril13.github.io/further_ideas_plywood_gallery/web1_ImageGrid.html)). The user will only see the lines s/he needs and does not have to bother about the rest. And in case that the user wants to go more in-depth, there is still the Header cell. Of course, writing a plywood-style gallery adds an extra layer of complexity, but the benefit can be tremendous: Users don\'t have to fight their way to a code jungle anymore, but they get nicely served what they were looking for.\nFurthermore, one does not have to make a sphinx build to see how the example looks in the gallery, it gets added in real-time.\n\n\n# Tips and Tricks\n\n* Best you run the notebook in a Jupyter notebook instance and open the website separate (e.g. with a split-screen or second monitor) to keep track of the live updates.\n\n* Multiple notebooks can be used for the same gallery\n\n* When you want one line of your Jupyter cell to be executed, but not to be added to the gallery, simply add the comment `#NOT` at the end of this code line.\n\n# VS Code Extension\nComing soon:\nDisplay your plywood galleries in the VS Code side panel with the extension [Plywood-Gallery-For-VSCode](https://github.com/kolibril13/plywood-gallery/). As soon as one gallery entry is clicked, the code is automatically copied to the last current cursor position in a VS Code opened python script or VS Code Jupyter notebook cell.\n*Add Screen recording Here*\n\n\n# How it works\nJupyter writes the image to the path and adds information about image_path, style, cell type, and corresponding code into a JSON file.   \nThis JSON file is read by JavaScript and the elements are placed on an HTML page.\n\n# Notebook formatting\nFormatting with black can be done this way:\n`black --python-cell-magics capture_png  docs/gallery.ipynb`\n\n# Updating\nGet the latest version of the plywood gallery with   \n`pip install plywood_gallery`\n# Attribution\n\nThanks to @christopher-besch for discussing the project architecture with me.  \nThanks to @krassowski for the help to caputre the png output images.  \nThanks to @Rickaym for some inspirations about the JSON files and VS Code related things.  \nThanks to @behackl for providing the Github Actions auto-release script.',
    'author': 'kolibril13',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://kolibril13.github.io/plywood-gallery/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<3.11',
}


setup(**setup_kwargs)
