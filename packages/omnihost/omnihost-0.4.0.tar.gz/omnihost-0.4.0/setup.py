# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['omnihost']

package_data = \
{'': ['*']}

entry_points = \
{'console_scripts': ['omnihost = omnihost.__main__:main']}

setup_kwargs = {
    'name': 'omnihost',
    'version': '0.4.0',
    'description': 'Easily convert native Gemini (gemtext markup) files into html and gophermaps for trihosting',
    'long_description': '# Omnihost\n\nA static site generator for those who would like to host native gemini content in parallel on the web as well as gopherspace.\n\n## Description\n\nEasily convert a directory full of gemtext markup into HTML and (eventually) gophermaps.\n\nThis tool is a work it progress. It should not be considered stable before the v1.0.0 release. Breaking changes may occur at any time.\n\nThere are still large swaths of functionality that have not been implemented, including but not limited to:\n - the ability to convert gemtext markup to gopher\n - any sort of automated tests\n\nSee the Roadmap section for a complete list\n\n### Supported platforms\n\nThe current release has been manually tested on a linux machine. You should (probably) be alright if you have:\n * a new enough version of python or the ability to install one with `pyenv`\n * pip\n * [pyenv](https://github.com/pyenv/pyenv)\n * [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)\n\nOmnihost is also available as a docker image.\n\n### Dependencies\n\npython v3.10.5 or newer\n\nOR\n\ndocker\n\n### Installing\n\nOmnihost can be installed from the python package index via pip ([pypi](https://pypi.org/project/omnihost))\n\n```\n $ pip install omnihost\n```\n\nIf you would prefer using the docker image instead of installing via pip, see the Running with Docker section below.\n\n### Running\n\nRun omnihost\n```\n $ omnihost -i <gemtext/source/dir> -w <html/output/dir> -o <gemtext/output/dir> -g <gopher/output/dir> -s <stylesheet/path>\n```\n\nBecause the typical workflow involves running the software with the same arguments every time, there are alternative methods to provide these parameters: environment variables and a config file. If an argument is listed as required below, that means that it is required to be set, not that it must be passed in through the command line.\n\nArguments:\n * `-i` gemtext source directory path. This argument is required.\n * `-w` html output directory path. This argument is optional. If an html output path is provided, gemtext files will be converted to html and placed in this directory. This directory must be empty.\n * `-o` gemini output directory path. This argument is optional. If a gemini output path is provided, gemtext files will be copied from the source directory to this directory.\n * `-g` gopher output directory path. This argument is optional. At present nothing is done with this argument. Eventually, if a gopher output path is provided, gemtext files will be converted to gophermaps and placed in this directory. This directory must be empty.\n * `-s` stylesheet path. This argument is optional. If a stylesheet path is provided, the stylesheet will be copied to \\<html/output/dir>/css/\\<stylesheet> and linked to the html pages as css/\\<stylesheet>\n \n\nParameter sources have the following order of precedence: command line arguments, environment variables, config file values. This means that you can use the command line arguments to override your default values set in the config file or environment. You can override any number of values. If you have your default values configured already and just want to generate a copy of your site with a different stylesheet, you could run\n\n```\n $ omnihost -s <stylesheet/path>\n```\n\n#### Setting Default Parameters in a Config File\n\nOn macOS and linux, the config file should be stored at `~/.config/omnihost/config`\n\nOn windows, the config file should be stored at `%APPDATA%\\Local\\Omnihost\\config.txt`\n\nAn example config file is provided as `example_config`. Copy this file to the correct path for your operating system and update the values within to your preferred default arguments.\n\n#### Setting Default Parameters in Environment Variables\n \nThe ability to configure default parameters is provided mostly to make containerization easier. Environment variable names are the same as the config file parameters and can be found in `example_config`\n\n### Running with Docker\n\nPull the image\n\n```\n $ docker pull omnihost\n```\n\nRun the image substitute the values in <> with your local paths.\n```\ndocker run \\\n    -v <absolute/local/path/to/source/dir>:/home/appuser/gemini_source \\\n    -v <absolute/local/path/to/css/dir>:/home/appuser/stylesheet_source \\\n    -v <absolute/local/path/to/html/output/dir>:/home/appuser/html_output \\\n    -v <absolute/local/path/to/gemini/output/dir>:/home/appuser/gemini_output \\\n    -v <absolute/local/path/to/gopher/output/dir>:/home/appuser/gopher_output \\\n    -e OMNIHOST_SOURCE_DIR="/home/appuser/gemini_source" \\\n    -e OMNIHOST_CSS_TEMPLATE_PATH="/home/appuser/stylesheet_source/styles.css" \\\n    -e OMNIHOST_HTML_OUTPUT_DIR="/home/appuser/html_output" \\\n    -e OMNIHOST_GEMINI_OUTPUT_DIR="/home/appuser/gemini_output" \\\n    -e OMNIHOST_GOPHER_OUTPUT_DIR="/home/appuser/gopher_output" \\\n    omnihost:latest\n```\n\nThis command mounts your local input and output paths to the container, and sets the environment variables appropriately.\n\nThis is an awful lot to type every time. The above command is provided in bash script form as `run_dockerfile_example.sh`. Download this file, rename it to `run_omnihost.sh`, and update the values in <> with your local paths. Now you just have to run:\n```\n./run_omnihost.sh\n```\n \n## Roadmap\n \nThis is roughly ordered by priority except for conversion of gemtext to gophermaps. That\'s listed first because it\'s the biggest piece of missing functionality, but I\'m planning to shore up the html conversion before adding that in\n \n * Add ability to convert gemtext to gophermaps\n * Add automated tests\n * Add support for nested directory structures for both input and output instead of requiring all input files to be in the top level of the input directory\n * Add ability to insert header/footer on output gemtext files to support things like links back to the home page and copyright or license notices\n * Improve formatting of html output to make it nicely human-readable\n * Consider adding a preprocessing step using something like mdbook to allow for for meta control of generated pages. Would allow for things like:\n   + stylesheets specified per page\n   + titles that aren\'t dependent on the file name\n   + metadata to support things like auto-generation of subject indexes for wikis\n * Add command line argument to write provided args to a config file instead of requiring the user to set that up by hand\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE.txt file for details\n',
    'author': 'Brett Gleason',
    'author_email': 'brettmgleason@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/b-src/omnihost',
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
