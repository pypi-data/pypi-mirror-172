
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ASSIGN CNOT CX CZ DEFGATE ELSE EQ FOR GE H ID IF IN KET_ZERO LE M NE NUMBER QBIT RX RY RZ S SD T TD X X2M X2P Y Y2M Y2P Zprogram : varDef procedureBody\n               | gateDef varDef procedureBodygateDef : gateDefclause\n               | gateDefclause gateDefgDefID : ID gateDefclause : DEFGATE gDefID '=' '[' matrixContents ']' ';'  matrixContents : CNUMBER\n                       | CNUMBER ',' matrixContents\n                       | CNUMBER ';' matrixContents CNUMBER : NumberExpr\n                | '-' NumberExpr NumberExpr : NUMBER\n                   | NUMBER '+' NUMBER\n                   | NUMBER '-' NUMBER varDef : defclause\n              | varDef defclause defclause : QBIT seen_Qbit id_list ';' seen_Qbit : id_list : ID\n               | id_list ',' ID\n               | ID '[' NUMBER ']'\n               | id_list ',' ID '[' NUMBER ']'  procedureBody : programBlock  programStatement : qbitUnitaryStatement\n                     | measureStatement\n                     | foreachStatement\n                     | ifStatement  programBlock : programStatement\n                     | programBlock programStatement  rangeExpr : optionalIntExpr ':' optionalIntExpr\n                  | optionalIntExpr ':' optionalIntExpr ':' optionalIntExpr  optionalIntExpr : intExpr\n                       | emptyStatementsectionExpr : intExpr\n                | sectionExpr ',' intExpr qubitExpr : ID \n                 | ID '[' sectionExpr ']'\n                 | ID '[' rangeExpr ']' qubitListExpr : qubitExpr\n                     | qubitListExpr ',' qubitExpr  intExprAtom : ID \n                    | NUMBER \n                    | ID '[' intExpr ']'\n                    | '(' intExpr ')'   intExprTier1 : intExprAtom \n                     | intExprTier1 '*' intExprAtom \n                     | intExprTier1 '/' intExprAtom\n                     | intExprTier1 '%' intExprAtom  intExprTier2 : intExprTier1 \n                     | intExprTier2 '+' intExprTier1 \n                     | intExprTier2 '-' intExprTier1  intExpr : intExprTier2 foreachStatement : FOR ID IN rangeExpr '{' programBlock '}'  asso : EQ\n            | GE\n            | LE\n            | NE\n            | '<'\n            | '>'\n     ifStatement : IF '(' intExpr asso intExpr ')' '{' programBlock '}' \n                | IF '(' intExpr asso intExpr ')' '{' programBlock '}' ELSE '{' programBlock '}'  qbitUnitaryStatement : uGate '<' qubitListExpr '>' ';' \n        | uGate '(' qubitListExpr  ')' ';'  uGate : H\n              | X\n              | Y\n              | Z\n              | S\n              | T\n              | SD\n              | TD\n              | X2P\n              | X2M\n              | Y2P\n              | Y2M\n              | RX '(' intExpr ')'\n              | RY '(' intExpr ')'\n              | RZ '(' intExpr ')'\n              | CZ\n              | CNOT\n              | ID  measureStatement : M '<' qubitExpr '>' ';'\n        | M '(' qubitExpr ')' ';' emptyStatement : "
    
_lr_action_items = {'QBIT':([0,2,3,4,5,9,38,39,74,146,],[6,6,6,-15,-3,-16,6,-4,-17,-6,]),'DEFGATE':([0,5,146,],[7,7,-6,]),'$end':([1,8,10,11,12,13,14,15,43,53,112,117,118,119,152,158,162,],[0,-1,-23,-28,-24,-25,-26,-27,-29,-2,-62,-63,-82,-83,-53,-60,-61,]),'M':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[17,-15,-16,17,-28,-24,-25,-26,-27,17,-29,-17,-62,-63,-82,-83,17,17,-53,17,17,-60,17,17,-61,]),'FOR':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[18,-15,-16,18,-28,-24,-25,-26,-27,18,-29,-17,-62,-63,-82,-83,18,18,-53,18,18,-60,18,18,-61,]),'IF':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[20,-15,-16,20,-28,-24,-25,-26,-27,20,-29,-17,-62,-63,-82,-83,20,20,-53,20,20,-60,20,20,-61,]),'H':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[21,-15,-16,21,-28,-24,-25,-26,-27,21,-29,-17,-62,-63,-82,-83,21,21,-53,21,21,-60,21,21,-61,]),'X':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[22,-15,-16,22,-28,-24,-25,-26,-27,22,-29,-17,-62,-63,-82,-83,22,22,-53,22,22,-60,22,22,-61,]),'Y':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[23,-15,-16,23,-28,-24,-25,-26,-27,23,-29,-17,-62,-63,-82,-83,23,23,-53,23,23,-60,23,23,-61,]),'Z':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[24,-15,-16,24,-28,-24,-25,-26,-27,24,-29,-17,-62,-63,-82,-83,24,24,-53,24,24,-60,24,24,-61,]),'S':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[25,-15,-16,25,-28,-24,-25,-26,-27,25,-29,-17,-62,-63,-82,-83,25,25,-53,25,25,-60,25,25,-61,]),'T':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[26,-15,-16,26,-28,-24,-25,-26,-27,26,-29,-17,-62,-63,-82,-83,26,26,-53,26,26,-60,26,26,-61,]),'SD':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[27,-15,-16,27,-28,-24,-25,-26,-27,27,-29,-17,-62,-63,-82,-83,27,27,-53,27,27,-60,27,27,-61,]),'TD':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[28,-15,-16,28,-28,-24,-25,-26,-27,28,-29,-17,-62,-63,-82,-83,28,28,-53,28,28,-60,28,28,-61,]),'X2P':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[29,-15,-16,29,-28,-24,-25,-26,-27,29,-29,-17,-62,-63,-82,-83,29,29,-53,29,29,-60,29,29,-61,]),'X2M':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[30,-15,-16,30,-28,-24,-25,-26,-27,30,-29,-17,-62,-63,-82,-83,30,30,-53,30,30,-60,30,30,-61,]),'Y2P':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[31,-15,-16,31,-28,-24,-25,-26,-27,31,-29,-17,-62,-63,-82,-83,31,31,-53,31,31,-60,31,31,-61,]),'Y2M':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[32,-15,-16,32,-28,-24,-25,-26,-27,32,-29,-17,-62,-63,-82,-83,32,32,-53,32,32,-60,32,32,-61,]),'RX':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[33,-15,-16,33,-28,-24,-25,-26,-27,33,-29,-17,-62,-63,-82,-83,33,33,-53,33,33,-60,33,33,-61,]),'RY':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[34,-15,-16,34,-28,-24,-25,-26,-27,34,-29,-17,-62,-63,-82,-83,34,34,-53,34,34,-60,34,34,-61,]),'RZ':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[35,-15,-16,35,-28,-24,-25,-26,-27,35,-29,-17,-62,-63,-82,-83,35,35,-53,35,35,-60,35,35,-61,]),'CZ':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[36,-15,-16,36,-28,-24,-25,-26,-27,36,-29,-17,-62,-63,-82,-83,36,36,-53,36,36,-60,36,36,-61,]),'CNOT':([2,4,9,10,11,12,13,14,15,38,43,74,112,117,118,119,120,141,152,154,157,158,160,161,162,],[37,-15,-16,37,-28,-24,-25,-26,-27,37,-29,-17,-62,-63,-82,-83,37,37,-53,37,37,-60,37,37,-61,]),'ID':([2,4,6,7,9,10,11,12,13,14,15,18,38,40,43,44,45,46,47,49,50,51,52,63,64,74,75,79,80,89,90,91,92,93,94,95,96,97,98,99,100,101,112,117,118,119,120,121,139,141,152,153,154,157,158,160,161,162,],[19,-15,-18,42,-16,19,-28,-24,-25,-26,-27,48,19,55,-29,59,59,59,59,69,69,69,69,69,69,-17,105,59,69,69,-54,-55,-56,-57,-58,-59,69,69,69,69,69,69,-62,-63,-82,-83,19,69,69,19,-53,69,19,19,-60,19,19,-61,]),'}':([11,12,13,14,15,43,112,117,118,119,141,152,157,158,161,162,],[-28,-24,-25,-26,-27,-29,-62,-63,-82,-83,152,-53,158,-60,162,-61,]),'<':([16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,65,66,67,68,69,70,102,103,104,122,124,125,126,127,128,144,],[44,46,-81,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-79,-80,94,-52,-49,-45,-41,-42,-76,-77,-78,-44,-50,-51,-46,-47,-48,-43,]),'(':([16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,49,50,51,52,63,64,80,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,121,139,153,],[45,47,-81,49,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,50,51,52,-79,-80,64,64,64,64,64,64,64,64,-54,-55,-56,-57,-58,-59,64,64,64,64,64,64,-76,-77,-78,64,64,64,]),'=':([41,42,],[56,-5,]),'IN':([48,],[63,]),'NUMBER':([49,50,51,52,63,64,76,77,80,89,90,91,92,93,94,95,96,97,98,99,100,101,110,121,130,133,134,136,137,139,153,],[70,70,70,70,70,70,106,111,70,70,-54,-55,-56,-57,-58,-59,70,70,70,70,70,70,111,70,145,111,111,149,150,70,70,]),';':([54,55,78,81,82,83,105,108,109,111,131,132,135,149,150,155,],[74,-19,112,117,118,119,-20,134,-10,-12,-21,146,-11,-13,-14,-22,]),',':([54,55,57,58,59,60,66,67,68,69,70,105,108,109,111,113,114,116,122,124,125,126,127,128,131,135,138,140,144,149,150,151,155,],[75,-19,79,-39,-36,79,-52,-49,-45,-41,-42,-20,133,-10,-12,-40,139,-34,-44,-50,-51,-46,-47,-48,-21,-11,-37,-38,-43,-13,-14,-35,-22,]),'[':([55,56,59,69,105,],[76,77,80,101,130,]),'>':([57,58,59,61,65,66,67,68,69,70,113,122,124,125,126,127,128,138,140,144,],[78,-39,-36,82,95,-52,-49,-45,-41,-42,-40,-44,-50,-51,-46,-47,-48,-37,-38,-43,]),')':([58,59,60,62,66,67,68,69,70,71,72,73,88,113,122,123,124,125,126,127,128,138,140,144,],[-39,-36,81,83,-52,-49,-45,-41,-42,102,103,104,122,-40,-44,143,-50,-51,-46,-47,-48,-37,-38,-43,]),':':([63,66,67,68,69,70,80,85,86,87,116,121,122,124,125,126,127,128,142,144,],[-84,-52,-49,-45,-41,-42,-84,121,-32,-33,-32,-84,-44,-50,-51,-46,-47,-48,153,-43,]),'EQ':([65,66,67,68,69,70,122,124,125,126,127,128,144,],[90,-52,-49,-45,-41,-42,-44,-50,-51,-46,-47,-48,-43,]),'GE':([65,66,67,68,69,70,122,124,125,126,127,128,144,],[91,-52,-49,-45,-41,-42,-44,-50,-51,-46,-47,-48,-43,]),'LE':([65,66,67,68,69,70,122,124,125,126,127,128,144,],[92,-52,-49,-45,-41,-42,-44,-50,-51,-46,-47,-48,-43,]),'NE':([65,66,67,68,69,70,122,124,125,126,127,128,144,],[93,-52,-49,-45,-41,-42,-44,-50,-51,-46,-47,-48,-43,]),']':([66,67,68,69,70,86,87,106,107,108,109,111,114,115,116,121,122,124,125,126,127,128,129,135,142,144,145,147,148,149,150,151,153,156,],[-52,-49,-45,-41,-42,-32,-33,131,132,-7,-10,-12,138,140,-34,-84,-44,-50,-51,-46,-47,-48,144,-11,-30,-43,155,-8,-9,-13,-14,-35,-84,-31,]),'{':([66,67,68,69,70,84,86,87,121,122,124,125,126,127,128,142,143,144,153,156,159,],[-52,-49,-45,-41,-42,120,-32,-33,-84,-44,-50,-51,-46,-47,-48,-30,154,-43,-84,-31,160,]),'+':([66,67,68,69,70,111,122,124,125,126,127,128,144,],[96,-49,-45,-41,-42,136,-44,-50,-51,-46,-47,-48,-43,]),'-':([66,67,68,69,70,77,111,122,124,125,126,127,128,133,134,144,],[97,-49,-45,-41,-42,110,137,-44,-50,-51,-46,-47,-48,110,110,-43,]),'*':([67,68,69,70,122,124,125,126,127,128,144,],[98,-45,-41,-42,-44,98,98,-46,-47,-48,-43,]),'/':([67,68,69,70,122,124,125,126,127,128,144,],[99,-45,-41,-42,-44,99,99,-46,-47,-48,-43,]),'%':([67,68,69,70,122,124,125,126,127,128,144,],[100,-45,-41,-42,-44,100,100,-46,-47,-48,-43,]),'ELSE':([158,],[159,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'varDef':([0,3,],[2,38,]),'gateDef':([0,5,],[3,39,]),'defclause':([0,2,3,38,],[4,9,4,9,]),'gateDefclause':([0,5,],[5,5,]),'procedureBody':([2,38,],[8,53,]),'programBlock':([2,38,120,154,160,],[10,10,141,157,161,]),'programStatement':([2,10,38,120,141,154,157,160,161,],[11,43,11,11,43,11,43,11,43,]),'qbitUnitaryStatement':([2,10,38,120,141,154,157,160,161,],[12,12,12,12,12,12,12,12,12,]),'measureStatement':([2,10,38,120,141,154,157,160,161,],[13,13,13,13,13,13,13,13,13,]),'foreachStatement':([2,10,38,120,141,154,157,160,161,],[14,14,14,14,14,14,14,14,14,]),'ifStatement':([2,10,38,120,141,154,157,160,161,],[15,15,15,15,15,15,15,15,15,]),'uGate':([2,10,38,120,141,154,157,160,161,],[16,16,16,16,16,16,16,16,16,]),'seen_Qbit':([6,],[40,]),'gDefID':([7,],[41,]),'id_list':([40,],[54,]),'qubitListExpr':([44,45,],[57,60,]),'qubitExpr':([44,45,46,47,79,],[58,58,61,62,113,]),'intExpr':([49,50,51,52,63,64,80,89,101,121,139,153,],[65,71,72,73,86,88,116,123,129,86,151,86,]),'intExprTier2':([49,50,51,52,63,64,80,89,101,121,139,153,],[66,66,66,66,66,66,66,66,66,66,66,66,]),'intExprTier1':([49,50,51,52,63,64,80,89,96,97,101,121,139,153,],[67,67,67,67,67,67,67,67,124,125,67,67,67,67,]),'intExprAtom':([49,50,51,52,63,64,80,89,96,97,98,99,100,101,121,139,153,],[68,68,68,68,68,68,68,68,68,68,126,127,128,68,68,68,68,]),'rangeExpr':([63,80,],[84,115,]),'optionalIntExpr':([63,80,121,153,],[85,85,142,156,]),'emptyStatement':([63,80,121,153,],[87,87,87,87,]),'asso':([65,],[89,]),'matrixContents':([77,133,134,],[107,147,148,]),'CNUMBER':([77,133,134,],[108,108,108,]),'NumberExpr':([77,110,133,134,],[109,135,109,109,]),'sectionExpr':([80,],[114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> varDef procedureBody','program',2,'p_program','parser.py',37),
  ('program -> gateDef varDef procedureBody','program',3,'p_program','parser.py',38),
  ('gateDef -> gateDefclause','gateDef',1,'p_gateDef','parser.py',50),
  ('gateDef -> gateDefclause gateDef','gateDef',2,'p_gateDef','parser.py',51),
  ('gDefID -> ID','gDefID',1,'p_gDefID','parser.py',58),
  ('gateDefclause -> DEFGATE gDefID = [ matrixContents ] ;','gateDefclause',7,'p_gateDefclause','parser.py',67),
  ('matrixContents -> CNUMBER','matrixContents',1,'p_matrixContents','parser.py',72),
  ('matrixContents -> CNUMBER , matrixContents','matrixContents',3,'p_matrixContents','parser.py',73),
  ('matrixContents -> CNUMBER ; matrixContents','matrixContents',3,'p_matrixContents','parser.py',74),
  ('CNUMBER -> NumberExpr','CNUMBER',1,'p_CNUMBER','parser.py',81),
  ('CNUMBER -> - NumberExpr','CNUMBER',2,'p_CNUMBER','parser.py',82),
  ('NumberExpr -> NUMBER','NumberExpr',1,'p_NumberExpr','parser.py',89),
  ('NumberExpr -> NUMBER + NUMBER','NumberExpr',3,'p_NumberExpr','parser.py',90),
  ('NumberExpr -> NUMBER - NUMBER','NumberExpr',3,'p_NumberExpr','parser.py',91),
  ('varDef -> defclause','varDef',1,'p_varDef','parser.py',97),
  ('varDef -> varDef defclause','varDef',2,'p_varDef','parser.py',98),
  ('defclause -> QBIT seen_Qbit id_list ;','defclause',4,'p_defclause','parser.py',105),
  ('seen_Qbit -> <empty>','seen_Qbit',0,'p_seen_Qbit','parser.py',112),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',118),
  ('id_list -> id_list , ID','id_list',3,'p_id_list','parser.py',119),
  ('id_list -> ID [ NUMBER ]','id_list',4,'p_id_list','parser.py',120),
  ('id_list -> id_list , ID [ NUMBER ]','id_list',6,'p_id_list','parser.py',121),
  ('procedureBody -> programBlock','procedureBody',1,'p_procedureBody','parser.py',157),
  ('programStatement -> qbitUnitaryStatement','programStatement',1,'p_statement','parser.py',165),
  ('programStatement -> measureStatement','programStatement',1,'p_statement','parser.py',166),
  ('programStatement -> foreachStatement','programStatement',1,'p_statement','parser.py',167),
  ('programStatement -> ifStatement','programStatement',1,'p_statement','parser.py',168),
  ('programBlock -> programStatement','programBlock',1,'p_programBlock','parser.py',171),
  ('programBlock -> programBlock programStatement','programBlock',2,'p_programBlock','parser.py',172),
  ('rangeExpr -> optionalIntExpr : optionalIntExpr','rangeExpr',3,'p_rangeExpr','parser.py',186),
  ('rangeExpr -> optionalIntExpr : optionalIntExpr : optionalIntExpr','rangeExpr',5,'p_rangeExpr','parser.py',187),
  ('optionalIntExpr -> intExpr','optionalIntExpr',1,'p_optionalIntExpr','parser.py',194),
  ('optionalIntExpr -> emptyStatement','optionalIntExpr',1,'p_optionalIntExpr','parser.py',195),
  ('sectionExpr -> intExpr','sectionExpr',1,'p_section','parser.py',205),
  ('sectionExpr -> sectionExpr , intExpr','sectionExpr',3,'p_section','parser.py',206),
  ('qubitExpr -> ID','qubitExpr',1,'p_qubitExpr','parser.py',218),
  ('qubitExpr -> ID [ sectionExpr ]','qubitExpr',4,'p_qubitExpr','parser.py',219),
  ('qubitExpr -> ID [ rangeExpr ]','qubitExpr',4,'p_qubitExpr','parser.py',220),
  ('qubitListExpr -> qubitExpr','qubitListExpr',1,'p_qubitListExpr','parser.py',232),
  ('qubitListExpr -> qubitListExpr , qubitExpr','qubitListExpr',3,'p_qubitListExpr','parser.py',233),
  ('intExprAtom -> ID','intExprAtom',1,'p_intExprAtom','parser.py',252),
  ('intExprAtom -> NUMBER','intExprAtom',1,'p_intExprAtom','parser.py',253),
  ('intExprAtom -> ID [ intExpr ]','intExprAtom',4,'p_intExprAtom','parser.py',254),
  ('intExprAtom -> ( intExpr )','intExprAtom',3,'p_intExprAtom','parser.py',255),
  ('intExprTier1 -> intExprAtom','intExprTier1',1,'p_intTier1Expr','parser.py',296),
  ('intExprTier1 -> intExprTier1 * intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',297),
  ('intExprTier1 -> intExprTier1 / intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',298),
  ('intExprTier1 -> intExprTier1 % intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',299),
  ('intExprTier2 -> intExprTier1','intExprTier2',1,'p_intTier2Expr','parser.py',307),
  ('intExprTier2 -> intExprTier2 + intExprTier1','intExprTier2',3,'p_intTier2Expr','parser.py',308),
  ('intExprTier2 -> intExprTier2 - intExprTier1','intExprTier2',3,'p_intTier2Expr','parser.py',309),
  ('intExpr -> intExprTier2','intExpr',1,'p_term','parser.py',317),
  ('foreachStatement -> FOR ID IN rangeExpr { programBlock }','foreachStatement',7,'p_foreachStatement','parser.py',324),
  ('asso -> EQ','asso',1,'p_asso','parser.py',331),
  ('asso -> GE','asso',1,'p_asso','parser.py',332),
  ('asso -> LE','asso',1,'p_asso','parser.py',333),
  ('asso -> NE','asso',1,'p_asso','parser.py',334),
  ('asso -> <','asso',1,'p_asso','parser.py',335),
  ('asso -> >','asso',1,'p_asso','parser.py',336),
  ('ifStatement -> IF ( intExpr asso intExpr ) { programBlock }','ifStatement',9,'p_ifStatement','parser.py',341),
  ('ifStatement -> IF ( intExpr asso intExpr ) { programBlock } ELSE { programBlock }','ifStatement',13,'p_ifStatement','parser.py',342),
  ('qbitUnitaryStatement -> uGate < qubitListExpr > ;','qbitUnitaryStatement',5,'p_qbitUnitaryStatement','parser.py',349),
  ('qbitUnitaryStatement -> uGate ( qubitListExpr ) ;','qbitUnitaryStatement',5,'p_qbitUnitaryStatement','parser.py',350),
  ('uGate -> H','uGate',1,'p_uGate','parser.py',372),
  ('uGate -> X','uGate',1,'p_uGate','parser.py',373),
  ('uGate -> Y','uGate',1,'p_uGate','parser.py',374),
  ('uGate -> Z','uGate',1,'p_uGate','parser.py',375),
  ('uGate -> S','uGate',1,'p_uGate','parser.py',376),
  ('uGate -> T','uGate',1,'p_uGate','parser.py',377),
  ('uGate -> SD','uGate',1,'p_uGate','parser.py',378),
  ('uGate -> TD','uGate',1,'p_uGate','parser.py',379),
  ('uGate -> X2P','uGate',1,'p_uGate','parser.py',380),
  ('uGate -> X2M','uGate',1,'p_uGate','parser.py',381),
  ('uGate -> Y2P','uGate',1,'p_uGate','parser.py',382),
  ('uGate -> Y2M','uGate',1,'p_uGate','parser.py',383),
  ('uGate -> RX ( intExpr )','uGate',4,'p_uGate','parser.py',384),
  ('uGate -> RY ( intExpr )','uGate',4,'p_uGate','parser.py',385),
  ('uGate -> RZ ( intExpr )','uGate',4,'p_uGate','parser.py',386),
  ('uGate -> CZ','uGate',1,'p_uGate','parser.py',387),
  ('uGate -> CNOT','uGate',1,'p_uGate','parser.py',388),
  ('uGate -> ID','uGate',1,'p_uGate','parser.py',389),
  ('measureStatement -> M < qubitExpr > ;','measureStatement',5,'p_measureStatement','parser.py',397),
  ('measureStatement -> M ( qubitExpr ) ;','measureStatement',5,'p_measureStatement','parser.py',398),
  ('emptyStatement -> <empty>','emptyStatement',0,'p_emptyStatement','parser.py',403),
]
